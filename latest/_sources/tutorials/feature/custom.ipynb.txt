{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Neural network setup customization"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the previous tutorial, we demonstrated how to build a quantum neural network, specifically a single quantum circuit, to solve the VQE problem. But what if you want to set up a neural network that includes multiple quantum circuits with shared parameters for gradient analysis, along with a classical neural network for post-processing information? This tutorial introduces a general framework in QuAIRKit for customizing quantum neural networks or classical-quantum hybrid neural networks, as well as managing parameters effectively.\n",
    "\n",
    "**Table of contents**\n",
    "\n",
    "- [Setup via quairkit.Circuit](#Setup-via-quairkit.Circuit)\n",
    "- [Setup via torch.nn.Module](#Setup-via-torch.nn.Module)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "\n",
    "import quairkit as qkit\n",
    "from quairkit import Circuit, State\n",
    "from quairkit.database import *\n",
    "from quairkit.loss import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup via quairkit.Circuit\n",
    "\n",
    "If you are satisfied with QuAIRKit's built-in circuit ansatzes and parameter gate structures, and have no special needs for parameter generation or management, we recommend constructing a neural network model using the `Circuit` class.\n",
    "\n",
    " Previous tutorials have covered how to construct a quantum circuit or insert a gate/channel. Here, we focus on the built-in parameter management functionality provided by `Circuit`. Let's start with the following circuit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 504x110 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir = Circuit(2)\n",
    "cir.real_entangled_layer() # a layer of Ry and CNOT\n",
    "cir.complex_block_layer() # a layer of U3 and CNOT\n",
    "\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameters of the circuit can be revised by ``update_param``. If the parameter gate has no input about parameters, the default parameters are uniformly sampled from 0 to $2\\pi$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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amqq222wxd0YFvnuD7g//elPDs9bR2UGDRokb775prJObW2tAJDCwkJV27zzzjvlN7/5jap1O1ITY67GoTtlO8ew2nPUlRgW8V5C58k+s7q6WgBYfc6IiAwYMEBWrVrV7XYuXrwoQUFB8s9//rPLMk/3mb5I6FR/D11NTY3aVd3ehtFohMlkQnx8vNX8hoYGTJkyxaN1ubJ+WVkZLl++jGHDhgEAYmNj8dJLLyErKwsrV65ETEwMDh06hNdff115UOGpp55CVlYWJkyYgOHDh+PEiRNdtpuXl4cXX3wR//znPzF69Gin2h8QEICAgADlMnFSUhI2bNigLP/qq6/w7LPPYsyYMcq84uJiq0vWanV3rC5evIiEhATU1dXZXF5bW6v823kbwcHBCAoKwvnz5xEYGGiz/J49exAUFISWlhar+S0tLfjoo4/wox/9yO19UMNoNNoc9j98+LAy/+jRo/jv//5vl+sAHA8r3H333Vbr2xpKUKN96D48PByjR4/Gq6++qnp4sDNxMHRx1113ubRdtTrequDM8cvIyMA777zjUp32YslkMiE2NrbbdeydE3q9HpWVlXa372ocuxPDO3fuxKOPPgqz2YyAgAA8//zziImJsVufvTLz589HXl4eHn74YcTFxeGtt97C7bff7vC2FACor6/HoUOHMHr0aIwYMQIlJSW4/fbbsXTpUqdu+/Antm63UXOOuhPDgHOx5GzcebrPjIqKQkpKCgoLC5Xz22w249y5c11u1epozZo1MBgMVg9DtOupPtMTuRMAREZGOl5JbeaHTldF3JkcZayJiYmyaNEiKS8vt5oGDx4sf/jDH+yWbc+Ke6ptIiJbtmyR3r17W12JamlpkejoaOWSd1NTk/Tv319ERI4cOSLTp09X1t2zZ48YDAar8u1DZZ3/4ujO5s2blaHniooKmTVrlqSkpChDKKdOnZIrV66IxWKR4uJiGT58uGRnZ1ttY9SoUbJ27VpV9Ym4f2z9cXLlryeDwWB11addRkaGLF68WETsD6ur/cvd2WGF7oYS7HE0dN8de/ugZujCEVeubnS+VcGZ4+fs7Qci/nU+OBvH7sawyHdXWf74xz/K1q1bVddrq0xJSYmMHz9eAEhgYKAkJibKF198oWp77Vc4k5KSlGHLNWvWSFhYmJw7d85uWX+8Qmfrdhu156grMSziXhyrjbue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YMeOHbh27Vq3X5Ny8OBB/O53v0NVVRUSExMxe/ZsLFq0SFl+8uRJfPPNN5g5c6b6AwXv5iIBIh0e6+hhNTU1iIqKgtls7nYH58+fj3379uHQoUNW83//+99j8+bNOH78uNt1EBERkWt6qp+dN28eSktLMWDAACxevNhqWX5+Pl544QUUFhZaJYbeMn36dEydOhVPPPGEqvV9kYv4XUKnhTqIiIi+r3qqn92+fTuee+45fP3118p3xGmVL3IRv3zKlYiIiL5f9u/fj1WrVmk+mfMVJnRERETkMxcuXMBDDz2EwMBAPPjgg75ujmb55RcLExER0fdD3759sX37dl83Q/N4hY6IiIhI45jQEREREWkcEzoiIiIijWNCR0RERKRxTOiIiIiINI4JHREREZHGMaEjIiIi0jgmdEREREQax4SOiIiISOOY0BERERFpHBM6IiIiIo3zyW+51tTUaHLbRERE9B32t93zxbHxakKn0+mQlJQEg8HQo/UkJSVBp9P1aB1ERETfR97qy7XO27lIgIiI12oD0NjYiObm5h6tQ6fTITQ0tEfrICIi+r7yRl+udd7ORbye0BERERGRZ/GhCCIiIiKNY0JHREREpHFM6IiIiIg0jgkdERERkcYxoSMiIiLSOCZ0RERERBrHhI6IiIhI45jQEREREWkcEzoiIiIijWNCR0RERKRxTOiIiIiINI4JHREREZHGMaEjIiIi0jgmdEREREQa9/8BGHA4boipOAkAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 634x220 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "circuit after updating the parameters\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 634x220 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "new_cir = Circuit(4)\n",
    "\n",
    "new_cir.superposition_layer() # a layer of Hadamard\n",
    "new_cir.real_entangled_layer([1, 2])\n",
    "new_cir.complex_block_layer([1, 2])\n",
    "new_cir.weak_superposition_layer() # a layer of fixed Ry\n",
    "\n",
    "new_cir.plot() \n",
    "new_cir.update_param(cir.param) \n",
    "\n",
    "print('circuit after updating the parameters')\n",
    "new_cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `Circuit` class also provides adjustable options for uniform sampling and Gaussian sampling methods."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 504x110 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.randomize_param(0, 0.1, method='uniform') # use uniform sampling to generate the parameters.\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 504x110 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.randomize_param(1, 1.1, method='normal') # use Gaussian sampling to generate the parameters.\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "What if you just want to manipulate the parameter of a particular gate? One can visit all elements of the `Circuit` through indexing. In this way, users can also access or modify the parameter of the specific gate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The parameters of first two RY gates are\n",
      " [Parameter containing:\n",
      "tensor([[[ 1.3114]],\n",
      "\n",
      "        [[-0.8210]]], requires_grad=True)]\n",
      "The Kraus representations of the first two RY gates are: \n",
      " tensor([[[[ 0.7926+0.j, -0.6097+0.j],\n",
      "          [ 0.6097+0.j,  0.7926+0.j]]],\n",
      "\n",
      "\n",
      "        [[[ 0.9169+0.j,  0.3991+0.j],\n",
      "          [-0.3991+0.j,  0.9169+0.j]]]], grad_fn=<UnsqueezeBackward0>)\n"
     ]
    }
   ],
   "source": [
    "first_gate = cir[0]\n",
    "print('The parameters of first two RY gates are\\n', list(first_gate.parameters()))\n",
    "print('The Kraus representations of the first two RY gates are: \\n', first_gate.kraus_repr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In addition to parameter manipulations, the `Circuit` class also provides built-in interface for parameterized gate customizations. For example, suppose one wants to implement a controlled-U3 parameterized gate with control on the $\\vert{11}\\rangle$ state\n",
    "\n",
    "$$\n",
    "\\left(I^{\\otimes 2} - \\vert 11 \\rangle\\langle 11 \\vert\\right) \\otimes I +  \\vert 11 \\rangle\\langle 11 \\vert \\otimes \\operatorname{U3}({\\bm \\theta})\n",
    ".$$\n",
    "\n",
    "Such three-qubit gate could be implemented via the following code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "def ccu3(theta: torch.Tensor) -> torch.Tensor:\n",
    "    proj = computational_state(num_system=2, index=3).density_matrix\n",
    "    return torch.kron((torch.eye(2) - proj), torch.eye(2)) + torch.kron(proj, u3(theta))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By providing the gate function, and the size of parameters, `param_oracle` would take care of any other messes, including the parameter management."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The parameters of this circuit are\n",
      " [Parameter containing:\n",
      "tensor([[[2.1875, 0.4630, 2.6166]]], requires_grad=True)]\n"
     ]
    }
   ],
   "source": [
    "cir = Circuit(4)\n",
    "cir.param_oracle(ccu3, num_acted_param=3, system_idx=[1, 2, 3], gate_name='ccu3')\n",
    "print('The parameters of this circuit are\\n', list(cir.parameters()))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Setup via torch.nn.Module\n",
    "\n",
    "For more general machine learning tasks, such as classical-quantum hybrid machine learning, or if you're a machine learning researcher aligning with common practices, we recommend setting up the quantum neural network in the same way as a classical neural network—by creating a child class from `torch.nn.Module`.\n",
    "\n",
    "Next, we will demonstrate how to construct a classical-quantum hybrid neural network using `torch.nn.Module`. We'll start by considering the quantum side, which involves inputting quantum data followed by a parameterized universal gate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_cir(training_data: torch.Tensor, param: torch.Tensor) -> Circuit:\n",
    "    r\"\"\"Create a quantum neural network circuit.\n",
    "    \n",
    "    Args:\n",
    "        training_data: The input data.\n",
    "        param: The parameters for the quantum layers.\n",
    "    \n",
    "    \"\"\"\n",
    "    circuit = Circuit(2)\n",
    "    circuit.oracle(training_data, system_idx=[0, 1])\n",
    "    circuit.universal_two_qubits(param=param)\n",
    "    return circuit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The overall structure of our example neural network is as follows: The network first accepts a quantum state, which is passed through two quantum layers containing the training data. Quantum measurements are then performed to obtain expectation values with respect to the given Hamiltonian. These expectation values are subsequently passed through two classical fully connected layers to produce the final result.\n",
    "\n",
    "<figure style=\"text-align: center;\">\n",
    "  <img src=\"./figures/network.png\" alt=\"alt text\" width=\"700\"/>\n",
    "  <figcaption>Fig.1: Depiction of below quantum-classical hybrid neural network with batch_size 100.</figcaption>\n",
    "</figure>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Network(torch.nn.Module):\n",
    "    r\"\"\"A customized hybrid quantum-classical neural network.\n",
    "    \n",
    "    Args:\n",
    "        batch_size: The batch dimension of input data.\n",
    "        H: The Hamiltonian for measuring the neural network.\n",
    "    \n",
    "    Note:\n",
    "        contains the following layers:\n",
    "        - two quantum circuits\n",
    "        - A fully connected (dense) layer that takes batch_size inputs and outputs 10 features\n",
    "        - A second dense layer that takes the 10 features from fc1 and reduces them to a single output\n",
    "    \n",
    "    \"\"\"\n",
    "    def __init__(self, batch_size: int, H: hamiltonian):\n",
    "        super().__init__()\n",
    "        \n",
    "        self.training_data = random_unitary(2, size=(2, batch_size))\n",
    "        self.theta = torch.nn.Parameter(torch.poisson(torch.rand(2, batch_size, 15)))\n",
    "        self.measure = ExpecVal(H)\n",
    "        \n",
    "        self.fc1 = torch.nn.Linear(batch_size, 10)\n",
    "        self.fc2 = torch.nn.Linear(10, 1)\n",
    "        \n",
    "    def forward(self, input_state: State) -> torch.Tensor:\n",
    "        r\"\"\"Perform the forward propagation of the neural network.\n",
    "        \n",
    "        Args:\n",
    "            input_state: The input quantum state of the neural network.\n",
    "            \n",
    "        Note:\n",
    "            If the `Network` does not require custom parameters, \n",
    "            one can move the creation of `cir1` and `cir2` directly into \n",
    "            the `__init__` method to improve runtime efficiency.\n",
    "        \"\"\"\n",
    "        cir1 = create_cir(self.training_data[0], self.theta[0])\n",
    "        cir2 = create_cir(self.training_data[1], self.theta[1])\n",
    "        \n",
    "        state1 = cir1(input_state)\n",
    "        state2 = cir2(state1)\n",
    "        expectation = self.measure(state2)\n",
    "        \n",
    "        x = torch.relu(self.fc1(expectation))\n",
    "        x = torch.sigmoid(self.fc2(x))\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "BATCH_SIZE = 100\n",
    "ham = random_hamiltonian_generator(2)\n",
    "net = Network(BATCH_SIZE, ham)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the `Network` class, the parameters can be directly accessed through self-defined attributes, making it more convenient to modify parameters as needed."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "net.theta = torch.nn.Parameter(torch.ones_like(net.theta))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here is an example of passing a randomly-generated two-qubit quantum state through the network."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape of the gradient tensor for the theta parameters torch.Size([2, 100, 15])\n"
     ]
    }
   ],
   "source": [
    "psi = random_state(2)\n",
    "loss = net(psi)\n",
    "\n",
    "loss.backward()\n",
    "\n",
    "print(\"shape of the gradient tensor for the theta parameters\", net.theta.grad.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Table: A reference of notation conventions in this tutorial.*\n",
    "\n",
    "| Symbol        | Variant          | Description                               |\n",
    "|:---------------:|:------------------:|-------------------------------------------|\n",
    "|  $I$ |   |   Identity gate |\n",
    "|$ \\vert 11 \\rangle$ | |  The fourth two-qubit computational state |\n",
    "| $\\operatorname{U3}$ |   |  Universal single-qubit gate  |\n",
    "|  ${\\bm \\theta}$ |   |   Trainable parameters |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---------VERSION---------\n",
      "quairkit: 0.3.0\n",
      "torch: 2.5.1+cpu\n",
      "numpy: 1.26.0\n",
      "scipy: 1.14.1\n",
      "matplotlib: 3.10.0\n",
      "---------SYSTEM---------\n",
      "Python version: 3.10.16\n",
      "OS: Windows\n",
      "OS version: 10.0.26100\n",
      "---------DEVICE---------\n",
      "CPU: ARMv8 (64-bit) Family 8 Model 1 Revision 201, Qualcomm Technologies Inc\n"
     ]
    }
   ],
   "source": [
    "qkit.print_info()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "quair_test",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
