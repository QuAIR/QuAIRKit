{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e594174e",
   "metadata": {},
   "source": [
    "# Training quantum process transformation with PQC\n",
    "\n",
    "**Table of Contents**\n",
    "\n",
    "- [Introduction](#Introduction)\n",
    "- [Background](#Background)\n",
    "- [Construct from Scratch](#Construct-a-PQC-to-train-process-transformation-from-scratch)\n",
    "  - [Construct the quantum circuit](#Construct-the-quantum-circuit)\n",
    "  - [Loss function](#Loss-function)\n",
    "  - [Train the circuit](#Train-the-circuit)\n",
    "- [PQCombNet](#Parameterized-Quantum-CombNet---a-ml-tool-for-quantum-process-transformation-training)\n",
    "  - [What is quantum comb](#What-is-quantum-comb)\n",
    "  - [Construct quantum comb with PQC](#Construct-quantum-comb-with-PQC)\n",
    "  - [Initialize PQCombNet](#Initializing-PQCombNet)\n",
    "  - [Other functional](#Other-functional)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "db98830e",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "af4bc6ca",
   "metadata": {},
   "source": [
    "Quantum processes represent the fundamental transformations that govern the evolution of quantum states, enabling the manipulation, communication, and computation of quantum information. Understanding and simulating quantum processes and their transformations is critical for advancing research in these fields.\n",
    "\n",
    "A common approach to simulate a quantum process transformation is by using a parameterized quantum circuit (PQC), which provides a flexible framework for encoding and optimizing quantum operations. In this tutorial, we will introduce two approaches for constructing and training quantum processes using PQCs:\n",
    "\n",
    "1. (Constructing a PQC from Scratch) This method involves building a parameterized quantum process from the ground up using our QuAIRKit's capabilities, offering fine-grained control over the circuit structure and parameters.\n",
    "\n",
    "2. (Simulating Process with Our QuAIR Toolkit - PQCombNet) The PQCombNet tool, as a part of the QuAIRKit application, streamlines the initialization of quantum combs [1], enabling a more efficient and intuitive simulation of quantum process transformations.\n",
    "\n",
    "These approaches provide versatile pathways for exploring and optimizing quantum processes, tailored to the needs of researchers and practitioners in quantum information science."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1a017824",
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from typing import Callable\n",
    "import numpy as np\n",
    "import torch\n",
    "\n",
    "\n",
    "import quairkit as qkit\n",
    "from quairkit import Circuit\n",
    "from quairkit.database import *\n",
    "from quairkit.qinfo import *\n",
    "\n",
    "qkit.set_device(\"cpu\")  # alternatively, switch to \"cuda:x\" for GPU\n",
    "qkit.set_dtype(\"complex128\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3a3dc386",
   "metadata": {},
   "source": [
    "## Background"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "afe5d139",
   "metadata": {},
   "source": [
    "The time evolution of a closed quantum system is governed by a unitary operator $ U = e^{-iHt} $, where $ H $ represents the Hamiltonian of the system and $ t $ denotes time. The inverse of this transformation is given by $ U^{-1} = e^{iHt} $. This reversible nature of quantum operations distinguishes quantum processes from classical ones, highlighting a key feature of quantum mechanics.\n",
    "\n",
    "Reversing a quantum process by obtaining its time-reversed unitary $ U^{-1} $ is a fundamental task in quantum information science. However, deriving the inverse operation for an unknown unitary is challenging and resource-intensive. The conventional approach, known as quantum process tomography, requires a prohibitively large number of measurements to fully reconstruct the Hamiltonian $ H $ and, consequently, the entire quantum process for reversal. Alternatively, it is possible to approximate $ U^{-1} $ directly using the original unitary $ U $ without performing process tomography.\n",
    "\n",
    "In this tutorial, two approaches to simulate the inverse of an unknown unitary by constructing parameterized quantum circuits (PQC) will be presented.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c99e5dfb",
   "metadata": {},
   "source": [
    "## Construct a PQC to train process transformation from scratch\n",
    "The objective of our quantum circuits is to perform the inverse operation $U^{-1}$ of a given unitary $U$. In particular, this circuit should query a finite number of $U$ copies and output $f(U)\\ket{\\psi}$ for any input state $\\ket{\\psi}$, where $f(U) = U^{-1} = U^\\dagger$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f84f28aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# the target quantum process we want to simulate\n",
    "f: Callable[[torch.Tensor], torch.Tensor] = dagger"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "89e2955d",
   "metadata": {},
   "source": [
    "In the rest of this tutorial, one will focus on the task of qubit-unitary inversion. The number of unitaries used in the circuit is named `num_slots`, and the number of ancilla qubits utilized in the circuit is denoted as `num_aux_qubits`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "426500cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_slots = 4\n",
    "num_aux_qubits = 3\n",
    "\n",
    "ancilla_systems = list(range(num_aux_qubits))\n",
    "all_systems = list(range(num_aux_qubits + 1))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b75b0d8c",
   "metadata": {},
   "source": [
    "We also need to prepare the training set of PQC - a set of sampled unitary from the Haar measure in the 2-dimensional unitary group. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "420b8426",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_sample = 1000\n",
    "\n",
    "train_set = random_unitary(1, size=num_sample)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "416645c8",
   "metadata": {},
   "source": [
    "### Construct the quantum circuit\n",
    "\n",
    "In our example, we initialize `num_slots + 1` parameterized universal qudit gates, as we want to insert the target unitary $U$ between each pair of parameterized structures. Each of these gates requires $d^2 - 1$ parameters, where $d$ is the dimension of the qudit gate. The complete circuit construction is illustrated as follows:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4abdd3c9",
   "metadata": {},
   "outputs": [],
   "source": [
    "cir = Circuit(num_aux_qubits + 2)\n",
    "\n",
    "cir.universal_qudits(all_systems)\n",
    "for _ in range(num_slots):\n",
    "    cir.oracle(train_set, [num_aux_qubits], latex_name=r'U_\\textrm{in}') # input batch unitary\n",
    "    cir.universal_qudits(all_systems)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "284d90c4",
   "metadata": {},
   "source": [
    "How can we ensure that the trained circuit reliably processes any input state? A common approach is to \"borrow\" an additional qubit system that is initialized in one part of the Bell state. In this setup, the output of the optimal circuit will ideally be the Choi state corresponding to the target function $f$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "62718317",
   "metadata": {},
   "outputs": [],
   "source": [
    "input_state = nkron(zero_state(num_aux_qubits), bell_state(2))\n",
    "expect_state = bell_state(2).evolve(f(train_set), 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d0accf8",
   "metadata": {},
   "source": [
    "### Loss function\n",
    "\n",
    "The loss function is chosen to be the average trace distance between the output state $\\rho_{\\text{out}}(U)$ and the expected state $\\rho_{\\text{exp}}(U)$ for all sampled unitaries $U$.\n",
    "Specifically:\n",
    "\n",
    "- $\\rho_{\\text{out}}(U)$ is the output state from our circuit, when $U$ is the input unitary.\n",
    "- $\\rho_{\\text{exp}}(U)$ is the expected output state, expected to be $\\frac{1}{2}\\sum_{i, j=0}^1 f(U) \\ket{i}\\bra{j} f(U)^\\dagger \\otimes \\ket{i}\\bra{j}$.\n",
    "\n",
    "The trace distance is defined as:\n",
    "$$\n",
    "D(\\rho, \\sigma) = \\frac{1}{2}\\operatorname{tr}\\left|\\rho - \\sigma\\right|,\n",
    "\\tag{1}\n",
    "$$\n",
    "\n",
    "where $|A|$ represents the positive semidefinite square root of $A^\\dagger A$. Then the loss function is mathematically represented as\n",
    "$$\n",
    "\\mathcal{L} = \\frac{1}{\\text{\\# of } U} \\sum_{U} D(\\rho_{\\text{out}}(U), \\rho_{\\text{exp}}(U)).\n",
    "\\tag{2}\n",
    "$$\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "482e0a01",
   "metadata": {},
   "outputs": [],
   "source": [
    "def loss_func(circuit: Circuit) -> torch.Tensor:\n",
    "    r\"\"\"Compute the loss function according to Equation (2)\n",
    "    \n",
    "    Args:\n",
    "        circuit: the quantum circuit to be trained\n",
    "        \n",
    "    Returns:\n",
    "        the average trace distance between the output state and the expect state\n",
    "    \n",
    "    \"\"\"\n",
    "    output_state = circuit(input_state).trace(ancilla_systems)\n",
    "    return trace_distance(output_state, expect_state).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65db9825",
   "metadata": {},
   "source": [
    "One also needs to setup a fidelity function to test the generality of our trained circuit. To do this, one could use another batch of random unitaries to construct a new batched circuit. Such circuit is passed through a random input state, to see the state fidelity between the output states of the trained circuit with the expected output states. Note that for test case, there is no need to add an extra line."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "47f3639b",
   "metadata": {},
   "outputs": [],
   "source": [
    "test_set = random_unitary(1, size=num_sample)\n",
    "test_state = random_state(1)\n",
    "test_input_state = nkron(zero_state(num_aux_qubits), test_state)\n",
    "test_expect_state = test_state.evolve(f(test_set), 0)\n",
    "\n",
    "def fidelity_func(circuit: Circuit) -> torch.Tensor:\n",
    "    r\"\"\"Compute the fidelity between the output state and the expect state\n",
    "    \n",
    "    Args:\n",
    "        circuit: the quantum circuit to be trained\n",
    "        \n",
    "    Returns:\n",
    "        the average fidelity between the output state and the expect state\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    test_cir = Circuit(num_aux_qubits + 1)\n",
    "    test_cir.universal_qudits(all_systems)\n",
    "    for _ in range(num_slots):\n",
    "        test_cir.oracle(test_set, [num_aux_qubits])\n",
    "        test_cir.universal_qudits(all_systems)\n",
    "    test_cir.update_param(circuit.param)\n",
    "    \n",
    "    output_state = test_cir(test_input_state).trace(ancilla_systems)\n",
    "    return state_fidelity(output_state, test_expect_state).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "82a7846d",
   "metadata": {},
   "source": [
    "### Train the circuit\n",
    "\n",
    "\n",
    "After setting up learning rate and total number of iterations, we are now ready to train the circuit with our predefined loss function $\\mathcal{L}$ to simulate the process transformation $f(U) = U^{-1}$.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "15d92647",
   "metadata": {},
   "outputs": [],
   "source": [
    "lr = 0.05\n",
    "num_iter = 2000\n",
    "opt = torch.optim.Adam(cir.parameters(), lr=lr)\n",
    "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(opt, factor=0.5, patience=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f250d055",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter: 0000, loss: 0.77150656, fidelity: 0.98635952, lr: 5.00E-02, avg_time: 0.0651s\n",
      "iter: 0200, loss: 0.06817947, fidelity: 0.99981770, lr: 1.25E-02, avg_time: 0.0269s\n",
      "iter: 0400, loss: 0.04828257, fidelity: 0.99990464, lr: 6.25E-03, avg_time: 0.0226s\n",
      "iter: 0600, loss: 0.04007090, fidelity: 0.99993332, lr: 6.25E-03, avg_time: 0.0275s\n",
      "iter: 0800, loss: 0.03425919, fidelity: 0.99995093, lr: 3.13E-03, avg_time: 0.0331s\n",
      "iter: 1000, loss: 0.03077639, fidelity: 0.99996036, lr: 3.13E-03, avg_time: 0.0343s\n",
      "iter: 1200, loss: 0.02724140, fidelity: 0.99996892, lr: 3.13E-03, avg_time: 0.0287s\n",
      "iter: 1400, loss: 0.02533548, fidelity: 0.99997306, lr: 7.81E-04, avg_time: 0.0296s\n",
      "iter: 1600, loss: 0.02445474, fidelity: 0.99997488, lr: 7.81E-04, avg_time: 0.0307s\n",
      "iter: 1800, loss: 0.02350115, fidelity: 0.99997678, lr: 7.81E-04, avg_time: 0.0301s\n",
      "iter: 1999, loss: 0.02248585, fidelity: 0.99997872, lr: 7.81E-04, avg_time: 0.0305s\n"
     ]
    }
   ],
   "source": [
    "time_list = []\n",
    "for itr in range(num_iter):\n",
    "    start_time = time.time()\n",
    "    opt.zero_grad()\n",
    "\n",
    "    loss = loss_func(cir) # compute loss\n",
    "\n",
    "    loss.backward()\n",
    "    opt.step()\n",
    "    scheduler.step(loss.item()) # activate scheduler\n",
    "\n",
    "    time_list.append(time.time() - start_time)\n",
    "\n",
    "    if itr % (num_iter // 10) == 0 or itr == num_iter - 1:\n",
    "        fidelity = fidelity_func(cir).item()\n",
    "        print(f\"iter: {str(itr).zfill(len(str(num_iter)))}, \" +\n",
    "              f\"loss: {loss.item():.8f}, fidelity: {fidelity:.8f}, \" +\n",
    "              f\"lr: {scheduler.get_last_lr()[0]:.2E}, avg_time: {np.mean(time_list):.4f}s\")\n",
    "        time_list = []"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9dcab1bf",
   "metadata": {},
   "source": [
    "As shown by above training result, one can obtain a trained circuit that can effectively simulate the inverse of a given unitary $U$, with test fidelity above 99%."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "14d7bf13",
   "metadata": {},
   "source": [
    "## Parameterized Quantum CombNet - a ML tool for quantum process transformation training\n",
    "\n",
    "Apparently above construction is far more complicated for beginners in quantum information science. To simplify the code work, we have developed a class named `PQCombNet` to streamline above process, and bring more functionalities to the table. To be specific, PQCombNet abstracts above idea into quantum comb, and provides a more intuitive way to train the quantum process transformation."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5c109e2b",
   "metadata": {},
   "source": [
    "### What is quantum comb\n",
    "A quantum comb [2] can be thought of as a series of quantum operations or gates that act sequentially or in parallel on quantum states. It is a tool to represent quantum channels, processes, or transformations that involve multiple quantum gates, typically applied to a series of quantum bits (qubits).\n",
    "\n",
    "Here is a simple visualization of a quantum (sequential) comb:\n",
    "\n",
    "<figure style=\"text-align: center;\">\n",
    "  <img src=\"figures/comb_structure.png\" alt=\"alt text\" width=\"1000\"/>\n",
    "  <figcaption>Fig.1: The schematic representation of sequential quantum comb structure.</figcaption>\n",
    "</figure>\n",
    "\n",
    "**P** and **F** denote the input and output systems of the main register. $I_k$ and $O_k$ correspond to the input and output systems for the operation in the k-th slot. Additionally, $\\mathcal{N}_\\textrm{in}^{(k)}$ and $\\mathcal{N}_\\textrm{out}$ denote the $k$-th input operation and the final output operation highlighted by red boxes, respectively. Each tooth within the comb, corresponding to the $k$-th position, is characterized by a quantum channel $\\mathcal{V}_k$. Here $\\textrm{aux}_k$ denotes the ancilla system shared by $\\mathcal{V}_{k-1}$ and $\\mathcal{V}_k$. At the end of the circuit, the projector $\\Pi$ determines the post-selection of the output auxiliary system. Usually, $\\Pi$ could be selected as the identity matrix, i.e., the output auxiliary system is traced out.\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ac113fe",
   "metadata": {},
   "source": [
    "### Construct quantum comb with PQC\n",
    "To enhance the flexibility and adaptability of quantum combs, we utilize PQC to construct a `Parameterized Quantum Comb (PQcomb)`. For the target process transformation $f$, that take process $\\mathcal{N}_\\textrm{in}^{(1)}, \\ldots, \\mathcal{N}_\\textrm{in}^{(m)}$ as inputs and $\\mathcal{N}_\\textrm{out}$ as an ouput, such that:\n",
    "$$ \n",
    "f(\\mathcal{N}_\\textrm{in}^{(1)}, \\ldots, \\mathcal{N}_\\textrm{in}^{(m)}) = \\mathcal{N}_\\textrm{out},\n",
    "\\tag{3}\n",
    "$$\n",
    "the PQC approach to realize such transforamtion is to replace the data processing channel by PQC parameterized by $\\theta$. One choice of the loss function is the dissimilarity between the trained process $\\widehat{\\mathcal{N}}_\\textrm{out}$ and expected process $\\mathcal{N}_\\textrm{out}$. Optimizing this loss function will provide us with a practical solution to achieve the desired transformation. In our previous example, such dissimilarity is measured by the trace distance (Equation (1)) between Choi states of $\\widehat{\\mathcal{N}}_\\textrm{out}$ and $\\mathcal{N}_\\textrm{out}$."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "49fee3f8",
   "metadata": {},
   "source": [
    "###  Initializing PQCombNet <a id=\"initializing\"></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62b91649",
   "metadata": {},
   "source": [
    "First of all, import the necessary libraries for initializing the `PQCombNet` class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "9118d875",
   "metadata": {},
   "outputs": [],
   "source": [
    "from quairkit.application import PQCombNet"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad16f446",
   "metadata": {},
   "source": [
    "Initializing the PQCombNet, we want to achieve the process $U^{-1}$\n",
    "\n",
    "According to the recent paper [1], the minimum resource for PQComb to implement the inverse unitary task is 4 `num_slots` and 3 `num_aux_qubits`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "32a155ff",
   "metadata": {},
   "outputs": [],
   "source": [
    "net = PQCombNet(\n",
    "    target_function=dagger,  # Callable function, no default value\n",
    "    num_slots=num_slots,  # Number of slots, no default value\n",
    "    ancilla=num_aux_qubits,  # Number of ancilla qubits, no default value\n",
    "    train_unitary_info=num_sample,  # Default: 2000 (can be an integer or torch.Tensor for training data)\n",
    "    test_unitary_info=num_sample,  # Default: 10000 (can be an integer or torch.Tensor for test data)\n",
    "    train_mode=\"process\",  # Default: \"process\" (alternatively \"pqc\", which is gpu friendly)\n",
    "    seed=73,  # Default: None (fix seed for reproducibility)\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a873bd50",
   "metadata": {},
   "source": [
    "This initializes a PQCombNet instance with the specified parameters, ready for training and optimization. Now we can train our model to approximate the quantum process transformation $f(U) = U^{-1}$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3dc5d493",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[pqcomb_dagger | process | 73 | \u001b[90m0\t0.0463s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-02\u001b[0m, \u001b[91mLoss: 0.75190565\u001b[0m, \u001b[92mFid: 0.24181475\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m100\t0.0297s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-02\u001b[0m, \u001b[91mLoss: 0.05256974\u001b[0m, \u001b[92mFid: 0.94567283\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m200\t0.0297s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-02\u001b[0m, \u001b[91mLoss: 0.01628234\u001b[0m, \u001b[92mFid: 0.98326826\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m300\t0.0288s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-02\u001b[0m, \u001b[91mLoss: 0.00678811\u001b[0m, \u001b[92mFid: 0.99304489\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m400\t0.0310s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00533677\u001b[0m, \u001b[92mFid: 0.99453199\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m500\t0.0306s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00489814\u001b[0m, \u001b[92mFid: 0.99498090\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m600\t0.0307s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00445306\u001b[0m, \u001b[92mFid: 0.99543658\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m700\t0.0310s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00401353\u001b[0m, \u001b[92mFid: 0.99588677\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m800\t0.0300s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00358973\u001b[0m, \u001b[92mFid: 0.99632106\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m900\t0.0306s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00318941\u001b[0m, \u001b[92mFid: 0.99673156\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1000\t0.0343s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00281806\u001b[0m, \u001b[92mFid: 0.99711266\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1100\t0.0307s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00247907\u001b[0m, \u001b[92mFid: 0.99746085\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1200\t0.0273s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00217393\u001b[0m, \u001b[92mFid: 0.99777451\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1300\t0.0294s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00190252\u001b[0m, \u001b[92mFid: 0.99805372\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1400\t0.0341s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00166335\u001b[0m, \u001b[92mFid: 0.99829986\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1500\t0.0330s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00145403\u001b[0m, \u001b[92mFid: 0.99851530\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1600\t0.0310s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00127160\u001b[0m, \u001b[92mFid: 0.99870302\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1700\t0.0297s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00111292\u001b[0m, \u001b[92mFid: 0.99886618\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1800\t0.0304s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00097495\u001b[0m, \u001b[92mFid: 0.99900790\u001b[0m\n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1900\t0.0289s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00085491\u001b[0m, \u001b[92mFid: 0.99913105\u001b[0m\n",
      "Progress |██████████████████████████████████████████████████| 100.0% \n",
      "[pqcomb_dagger | process | 73 | \u001b[90m1999\t0.0303s\u001b[0m] slot_dim: 2, slots: 4, ancilla_dim: 8, \u001b[93mLR: 5.00e-03\u001b[0m, \u001b[91mLoss: 0.00075133\u001b[0m, \u001b[92mFid: 0.99923716\u001b[0m\n",
      "[pqcomb_dagger | process | 73] Finished training with Fidelity: 0.99923816\n"
     ]
    }
   ],
   "source": [
    "net.train(base_lr=lr, max_epochs=num_iter, is_save_data=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b43f122d",
   "metadata": {},
   "source": [
    "### Other functional"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "90231f80",
   "metadata": {},
   "source": [
    "We can have a view of the PQComb by the attribute `plot`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b6d0858c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "net.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88c68553",
   "metadata": {},
   "source": [
    "Sometimes we want to test our hypothesis that substituting a certain part of `PQCombnet` with a segment from a random parameterized circuit to a known part can enhance our understanding of quantum architecture or help in searching for an optimized one. The `PQCombnet` provides the method `update_V_circuit`, which allows users to update a specific `V` circuit at a given index within the `V_circuit_list`. The whole quantum process will then be a hybrid circuit combining known structures with the original parameterized circuit. we will show a simple example in this section about the usage of updating certain part of circuit for a **PQCombNet**\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a52e1769",
   "metadata": {},
   "source": [
    "For example, we want to substitute a known circuit `new_V` and we can prepare the new_V in several ways."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "60cad719",
   "metadata": {},
   "outputs": [],
   "source": [
    "from quairkit.operator import ParamOracle\n",
    "\n",
    "# Number of qubits in the circuit\n",
    "num_qubits_cir = num_aux_qubits + 1\n",
    "\n",
    "# Circuit\n",
    "V0 = Circuit(num_qubits_cir)\n",
    "V0.real_entangled_layer(depth=2)\n",
    "\n",
    "\n",
    "# ParamOracle\n",
    "def V_generator(param):\n",
    "    return rx(param[0]) @ u3(param[1:4]) @ h()\n",
    "\n",
    "V1 = ParamOracle(V_generator, system_idx=list(range(num_qubits_cir)), num_acted_param=4)\n",
    "\n",
    "# torch.Tensor as a gate working on all the systems\n",
    "V2 = random_unitary(num_qubits_cir)  # Work on all the systems\n",
    "\n",
    "# torch.Tensor as a gate working on parts of the systems\n",
    "V3 = random_unitary(num_qubits_cir - 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b67b05d",
   "metadata": {},
   "source": [
    "Update the V circuit in place at a specified `index`.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3b1ce009",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# In this example, we replace the `index` 1 (the 2nd part of the PQCombNet) with our prepared structure\n",
    "net.update_V_circuit(index=1, new_V=V0)  # V1,V2,V3\n",
    "# we can visualize the new net after replacement\n",
    "net.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ccae5531",
   "metadata": {},
   "source": [
    "- **Training Data**: If `is_save_data=True`, the training data will be saved in the directory `data_directory_name/V_circuit_lists/`. Each saved file includes details like the mode used, number of qubits, and fidelity.\n",
    "- **Logs**: Training logs are saved as CSV files named `{name_task}_train_log.csv` in the specified data directory.\n",
    "- **Fidelity Results**: After extracting the highest fidelity, results for each `num_qubits_U` are saved as CSV files with names like `fidelity_table_num_qubits_U_{num_qubits_U}.csv`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f44aa19",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## References\n",
    "\n",
    "[1] Mo, Yin, et al. \"Parameterized quantum comb and simpler circuits for reversing unknown qubit-unitary operations.\" npj Quantum Information 11.1 (2025): 32.\n",
    "\n",
    "[2] Chiribella, Giulio, G. Mauro D’Ariano, and Paolo Perinotti. \"Quantum circuit architecture.\" Physical review letters 101.6 (2008): 060401.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "91fc15b9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---------VERSION---------\n",
      "quairkit: 0.4.1\n",
      "torch: 2.8.0+cpu\n",
      "numpy: 2.2.6\n",
      "scipy: 1.15.3\n",
      "matplotlib: 3.10.5\n",
      "---------SYSTEM---------\n",
      "Python version: 3.10.18\n",
      "OS: Windows\n",
      "OS version: 10.0.26100\n",
      "---------DEVICE---------\n",
      "CPU: ARMv8 (64-bit) Family 8 Model 1 Revision 201, Qualcomm Technologies Inc\n"
     ]
    }
   ],
   "source": [
    "qkit.print_info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8d0804d5",
   "metadata": {},
   "source": [
    "*Table: A reference of notation conventions in this tutorial.*\n",
    "\n",
    "| Symbol                  | Description                               |\n",
    "|:---------------:        |-------------------------------------------|\n",
    "|$H$                      |  a Hamiltonian |\n",
    "|$U$                      |  a unitary transformation |\n",
    "|$f$                   | a quantum process transformation |\n",
    "|$D$                   | trace distance between two quantum states|\n",
    "|$\\rho_{\\text{out}}(U)$            | output state evolved by the train circuit with input $U$ |\n",
    "|$\\rho_{\\text{exp}}(U)$            | expected output state, evolved by the quantum process $U^{-1}$|\n",
    "|$\\mathcal{L}$                   | loss function |\n",
    "|$\\mathcal{N}^{(k)}_\\textrm{in}$ and $\\mathcal{N}_\\textrm{out}$          | $k$-th input operation and the final output operation|\n",
    "|$I_k$ and $O_k$                 | input and output systems for the operation in the $k$-th slot|\n",
    "|$\\Pi$                                  | an orthogonal projector|"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "quair",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
