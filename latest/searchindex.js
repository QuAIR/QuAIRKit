Search.setIndex({"alltitles": {"Add circuit templates": [[1, "Add-circuit-templates"]], "Add gates": [[1, "Add-gates"]], "Batch Computation in QuAIRKit": [[0, null]], "Batch Measurement": [[3, "Batch-Measurement"]], "Constructing Quantum Circuits in QuAIRKit": [[1, null]], "Constructing quantum circuits": [[1, "Constructing-quantum-circuits"]], "Creation of states": [[42, "Creation-of-states"]], "Example": [[0, "Example"]], "Execution": [[1, "Execution"]], "Information extraction": [[42, "Information-extraction"]], "Interaction with environments": [[42, "Interaction-with-environments"]], "Manipulation of Quantum States in QuAIRKit": [[42, null]], "Manipulation of states": [[42, "Manipulation-of-states"]], "Measurement": [[0, "Measurement"]], "Measuring quantum states in QuAIRKit": [[3, null]], "Note": [[6, null], [7, null], [7, null], [7, null], [7, null], [7, null], [7, null], [8, null], [8, null], [8, null], [8, null], [10, null], [11, null], [13, null], [13, null], [13, null], [13, null], [13, null], [13, null], [13, null], [14, null], [15, null], [16, null], [16, null], [27, null], [30, null], [31, null], [31, null], [31, null], [31, null], [34, null], [34, null], [40, null], [41, null], [41, null], [41, null], [41, null], [41, null], [41, null]], "Operator management": [[1, "Operator-management"]], "Other properties": [[1, "Other-properties"]], "Perform measurement": [[3, "Perform-measurement"]], "Positive operator-valued measurement": [[3, "Positive-operator-valued-measurement"]], "QuAIRKit": [[4, "id1"]], "Quantum circuit": [[0, "Quantum-circuit"]], "Quantum measurement": [[3, "Quantum-measurement"]], "References": [[3, "References"]], "Sampled measurements": [[3, "Sampled-measurements"]], "Training noisy ground state preparation": [[1, "Training-noisy-ground-state-preparation"]], "Warning": [[41, null]], "Welcome to QuAIRKit\u2019s documentation!": [[2, null]], "quairkit": [[4, null]], "quairkit.ansatz": [[5, null]], "quairkit.ansatz.container": [[6, null]], "quairkit.ansatz.layer": [[7, null]], "quairkit.circuit": [[8, null]], "quairkit.core": [[9, null]], "quairkit.core.base": [[10, null]], "quairkit.core.hamiltonian": [[11, null]], "quairkit.core.state": [[12, null]], "quairkit.core.state.backend": [[13, null]], "quairkit.core.state.backend.density_matrix": [[14, null]], "quairkit.core.state.backend.state_vector": [[15, null]], "quairkit.core.state.state": [[16, null]], "quairkit.core.visual": [[17, null]], "quairkit.database": [[18, null]], "quairkit.database.hamiltonian": [[19, null]], "quairkit.database.matrix": [[20, null]], "quairkit.database.random": [[21, null]], "quairkit.database.representation": [[22, null]], "quairkit.database.set": [[23, null]], "quairkit.database.state": [[24, null]], "quairkit.loss": [[25, null]], "quairkit.loss.distance": [[26, null]], "quairkit.loss.measure": [[27, null]], "quairkit.operator": [[28, null]], "quairkit.operator.channel": [[29, null]], "quairkit.operator.channel.base": [[30, null]], "quairkit.operator.channel.common": [[31, null]], "quairkit.operator.channel.custom": [[32, null]], "quairkit.operator.gate": [[33, null]], "quairkit.operator.gate.base": [[34, null]], "quairkit.operator.gate.custom": [[35, null]], "quairkit.operator.gate.encoding": [[36, null]], "quairkit.operator.gate.multi_qubit_gate": [[37, null]], "quairkit.operator.gate.single_qubit_gate": [[38, null]], "quairkit.operator.gate.visual": [[39, null]], "quairkit.operator.special": [[40, null]], "quairkit.qinfo": [[41, null]], "tutorials": [[43, null]]}, "docurls": ["batch.html", "circuit.html", "index.html", "measure.html", "quairkit.html", "quairkit.ansatz.html", "quairkit.ansatz.container.html", "quairkit.ansatz.layer.html", "quairkit.circuit.html", "quairkit.core.html", "quairkit.core.base.html", "quairkit.core.hamiltonian.html", "quairkit.core.state.html", "quairkit.core.state.backend.html", "quairkit.core.state.backend.density_matrix.html", "quairkit.core.state.backend.state_vector.html", "quairkit.core.state.state.html", "quairkit.core.visual.html", "quairkit.database.html", "quairkit.database.hamiltonian.html", "quairkit.database.matrix.html", "quairkit.database.random.html", "quairkit.database.representation.html", "quairkit.database.set.html", "quairkit.database.state.html", "quairkit.loss.html", "quairkit.loss.distance.html", "quairkit.loss.measure.html", "quairkit.operator.html", "quairkit.operator.channel.html", "quairkit.operator.channel.base.html", "quairkit.operator.channel.common.html", "quairkit.operator.channel.custom.html", "quairkit.operator.gate.html", "quairkit.operator.gate.base.html", "quairkit.operator.gate.custom.html", "quairkit.operator.gate.encoding.html", "quairkit.operator.gate.multi_qubit_gate.html", "quairkit.operator.gate.single_qubit_gate.html", "quairkit.operator.gate.visual.html", "quairkit.operator.special.html", "quairkit.qinfo.html", "state.html", "tutorials.html"], "envversion": {"nbsphinx": 4, "sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "indexentries": {"abs_norm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.abs_norm", false]], "amplitude_damping() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.amplitude_damping", false]], "amplitude_damping_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.amplitude_damping_kraus", false]], "amplitudedamping (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.AmplitudeDamping", false]], "amplitudeencoding (class in quairkit.operator.gate.encoding)": [[36, "quairkit.operator.gate.encoding.AmplitudeEncoding", false]], "angleencoding (class in quairkit.operator.gate.encoding)": [[36, "quairkit.operator.gate.encoding.AngleEncoding", false]], "append() (quairkit.ansatz.container.operatorlist method)": [[6, "quairkit.ansatz.container.OperatorList.append", false]], "are_qubits() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.are_qubits", false]], "are_qutrits() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.are_qutrits", false]], "backend (class in quairkit.core.base)": [[10, "quairkit.core.base.Backend", false]], "backend (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.backend", false]], "basisencoding (class in quairkit.operator.gate.encoding)": [[36, "quairkit.operator.gate.encoding.BasisEncoding", false]], "bell_basis() (in module quairkit.database.set)": [[23, "quairkit.database.set.bell_basis", false]], "bell_diagonal_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.bell_diagonal_state", false]], "bell_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.bell_state", false]], "bit_flip() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.bit_flip", false]], "bit_flip_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.bit_flip_kraus", false]], "bit_phase_flip() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.bit_phase_flip", false]], "bit_phase_flip_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.bit_phase_flip_kraus", false]], "bitflip (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.BitFlip", false]], "bitphaseflip (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.BitPhaseFlip", false]], "block_enc_herm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.block_enc_herm", false]], "bra (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.bra", false]], "ccx (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CCX", false]], "ccx() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.ccx", false]], "channel (class in quairkit.operator.channel.base)": [[30, "quairkit.operator.channel.base.Channel", false]], "channel_repr_convert() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.channel_repr_convert", false]], "check() (quairkit.core.state.backend.state static method)": [[13, "quairkit.core.state.backend.State.check", false]], "choi_channel() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.choi_channel", false]], "choi_repr (quairkit.operator.channel.base.channel property)": [[30, "quairkit.operator.channel.base.Channel.choi_repr", false]], "choirepr (class in quairkit.operator.channel.custom)": [[32, "quairkit.operator.channel.custom.ChoiRepr", false]], "circuit (class in quairkit.circuit)": [[8, "quairkit.circuit.Circuit", false]], "clone() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.clone", false]], "cnot (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CNOT", false]], "cnot() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cnot", false]], "cnot() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cnot", false]], "cnot_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cnot_gate", false]], "coefficients (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.coefficients", false]], "collapse (class in quairkit.operator.special)": [[40, "quairkit.operator.special.Collapse", false]], "collapse() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.collapse", false]], "completely_mixed_computational() (in module quairkit.database.state)": [[24, "quairkit.database.state.completely_mixed_computational", false]], "complex_block_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.complex_block_layer", false]], "complex_entangled_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.complex_entangled_layer", false]], "complexblocklayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.ComplexBlockLayer", false]], "complexentangledlayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.ComplexEntangledLayer", false]], "computational_basis() (in module quairkit.database.state)": [[24, "quairkit.database.state.computational_basis", false]], "construct_h_matrix() (quairkit.core.hamiltonian.hamiltonian method)": [[11, "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix", false]], "control_oracle() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.control_oracle", false]], "controloracle (class in quairkit.operator.gate.custom)": [[35, "quairkit.operator.gate.custom.ControlOracle", false]], "cp (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CP", false]], "cp() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cp", false]], "cp() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cp", false]], "cp_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cp_gate", false]], "create_choi_repr() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.create_choi_repr", false]], "create_matrix() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.create_matrix", false]], "crx (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CRX", false]], "crx() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.crx", false]], "crx() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.crx", false]], "crx_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.crx_gate", false]], "cry (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CRY", false]], "cry() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cry", false]], "cry() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cry", false]], "cry_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cry_gate", false]], "crz (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CRZ", false]], "crz() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.crz", false]], "crz() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.crz", false]], "crz_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.crz_gate", false]], "cswap (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CSWAP", false]], "cswap() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cswap", false]], "cswap() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cswap", false]], "cswap_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cswap_gate", false]], "cu (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CU", false]], "cu() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cu", false]], "cu() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cu", false]], "cu_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cu_gate", false]], "cx (in module quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CX", false]], "cy (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CY", false]], "cy() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cy", false]], "cy() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cy", false]], "cy_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cy_gate", false]], "cz (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CZ", false]], "cz() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cz", false]], "cz() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.cz", false]], "cz_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.cz_gate", false]], "dagger() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.dagger", false]], "data (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.data", false]], "decomp_1qubit() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.decomp_1qubit", false]], "decomp_ctrl_1qubit() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.decomp_ctrl_1qubit", false]], "decompose_pauli_words() (quairkit.core.hamiltonian.hamiltonian method)": [[11, "quairkit.core.hamiltonian.Hamiltonian.decompose_pauli_words", false]], "decompose_with_sites() (quairkit.core.hamiltonian.hamiltonian method)": [[11, "quairkit.core.hamiltonian.Hamiltonian.decompose_with_sites", false]], "density_matrix (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.density_matrix", false]], "depolarizing (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.Depolarizing", false]], "depolarizing() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.depolarizing", false]], "depolarizing_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.depolarizing_kraus", false]], "depth (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.depth", false]], "device (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.device", false]], "diamond_norm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.diamond_norm", false]], "dim (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.dim", false]], "direct_sum() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.direct_sum", false]], "display_in_circuit() (quairkit.operator.gate.base.gate method)": [[34, "quairkit.operator.gate.base.Gate.display_in_circuit", false]], "display_in_circuit() (quairkit.operator.gate.base.paramgate method)": [[34, "quairkit.operator.gate.base.ParamGate.display_in_circuit", false]], "dtype (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.dtype", false]], "evolve() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.evolve", false]], "expand() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.expand", false]], "expand_as() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.expand_as", false]], "expec_val() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.expec_val", false]], "expecval (class in quairkit.loss.measure)": [[27, "quairkit.loss.measure.ExpecVal", false]], "extend() (quairkit.ansatz.container.operatorlist method)": [[6, "quairkit.ansatz.container.OperatorList.extend", false]], "extend() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.extend", false]], "eye() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.eye", false]], "eye_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.eye_gate", false]], "fit() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.fit", false]], "forward() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.forward", false]], "forward() (quairkit.loss.distance.statefidelity method)": [[26, "quairkit.loss.distance.StateFidelity.forward", false]], "forward() (quairkit.loss.distance.tracedistance method)": [[26, "quairkit.loss.distance.TraceDistance.forward", false]], "forward() (quairkit.loss.measure.expecval method)": [[27, "quairkit.loss.measure.ExpecVal.forward", false]], "forward() (quairkit.loss.measure.measure method)": [[27, "quairkit.loss.measure.Measure.forward", false]], "forward() (quairkit.operator.special.collapse method)": [[40, "quairkit.operator.special.Collapse.forward", false]], "forward() (quairkit.operator.special.partialstate method)": [[40, "quairkit.operator.special.PartialState.forward", false]], "forward() (quairkit.operator.special.resetstate method)": [[40, "quairkit.operator.special.ResetState.forward", false]], "func() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.func", false]], "gate (class in quairkit.operator.gate.base)": [[34, "quairkit.operator.gate.base.Gate", false]], "gate_fidelity() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.gate_fidelity", false]], "gate_history (quairkit.ansatz.layer.layer property)": [[7, "quairkit.ansatz.layer.Layer.gate_history", false]], "gate_history (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.gate_history", false]], "gate_history_generation() (quairkit.operator.gate.base.gate method)": [[34, "quairkit.operator.gate.base.Gate.gate_history_generation", false]], "gate_history_generation() (quairkit.operator.gate.base.paramgate method)": [[34, "quairkit.operator.gate.base.ParamGate.gate_history_generation", false]], "gell_mann() (in module quairkit.database.set)": [[23, "quairkit.database.set.gell_mann", false]], "generalized_amplitude_damping() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.generalized_amplitude_damping", false]], "generalized_amplitude_damping_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.generalized_amplitude_damping_kraus", false]], "generalized_depolarizing() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.generalized_depolarizing", false]], "generalized_depolarizing_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.generalized_depolarizing_kraus", false]], "generalizedamplitudedamping (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.GeneralizedAmplitudeDamping", false]], "generalizeddepolarizing (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.GeneralizedDepolarizing", false]], "get_backend() (in module quairkit.core.base)": [[10, "quairkit.core.base.get_backend", false]], "get_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.get_circuit_plot_param", false]], "get_device() (in module quairkit.core.base)": [[10, "quairkit.core.base.get_device", false]], "get_dtype() (in module quairkit.core.base)": [[10, "quairkit.core.base.get_dtype", false]], "get_float_dtype() (in module quairkit.core.base)": [[10, "quairkit.core.base.get_float_dtype", false]], "get_seed() (in module quairkit.core.base)": [[10, "quairkit.core.base.get_seed", false]], "ghz_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.ghz_state", false]], "grad (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.grad", false]], "gradient() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.gradient", false]], "grover_matrix() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.grover_matrix", false]], "h (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.H", false]], "h() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.h", false]], "h() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.h", false]], "h_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.h_gate", false]], "haar_density_operator() (in module quairkit.database.random)": [[21, "quairkit.database.random.haar_density_operator", false]], "haar_orthogonal() (in module quairkit.database.random)": [[21, "quairkit.database.random.haar_orthogonal", false]], "haar_state_vector() (in module quairkit.database.random)": [[21, "quairkit.database.random.haar_state_vector", false]], "haar_unitary() (in module quairkit.database.random)": [[21, "quairkit.database.random.haar_unitary", false]], "hamiltonian (class in quairkit.core.hamiltonian)": [[11, "quairkit.core.hamiltonian.Hamiltonian", false]], "heisenberg_hamiltonian() (in module quairkit.database.hamiltonian)": [[19, "quairkit.database.hamiltonian.heisenberg_hamiltonian", false]], "heisenberg_weyl() (in module quairkit.database.set)": [[23, "quairkit.database.set.heisenberg_weyl", false]], "herm_transform() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.herm_transform", false]], "hessian() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.hessian", false]], "image_to_density_matrix() (in module quairkit.core.state.state)": [[16, "quairkit.core.state.state.image_to_density_matrix", false]], "index_select() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.index_select", false]], "iqpencoding (class in quairkit.operator.gate.encoding)": [[36, "quairkit.operator.gate.encoding.IQPEncoding", false]], "is_choi() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_choi", false]], "is_density_matrix() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_density_matrix", false]], "is_hermitian() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_hermitian", false]], "is_linear() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_linear", false]], "is_positive() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_positive", false]], "is_ppt() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_ppt", false]], "is_projector() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_projector", false]], "is_state_vector() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_state_vector", false]], "is_unitary() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.is_unitary", false]], "isdynamic (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.isdynamic", false]], "ising_hamiltonian() (in module quairkit.database.hamiltonian)": [[19, "quairkit.database.hamiltonian.ising_hamiltonian", false]], "isotropic_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.isotropic_state", false]], "ket (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.ket", false]], "kraus_channel() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.kraus_channel", false]], "kraus_repr (quairkit.operator.channel.base.channel property)": [[30, "quairkit.operator.channel.base.Channel.kraus_repr", false]], "krausrepr (class in quairkit.operator.channel.custom)": [[32, "quairkit.operator.channel.custom.KrausRepr", false]], "layer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.Layer", false]], "linear_entangled_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.linear_entangled_layer", false]], "linearentangledlayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.LinearEntangledLayer", false]], "logarithmic_negativity() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.logarithmic_negativity", false]], "logm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.logm", false]], "matrix (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.matrix", false]], "matrix (quairkit.operator.gate.base.gate property)": [[34, "quairkit.operator.gate.base.Gate.matrix", false]], "measure (class in quairkit.loss.measure)": [[27, "quairkit.loss.measure.Measure", false]], "measure() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.measure", false]], "mixedstate (class in quairkit.core.state.backend.density_matrix)": [[14, "quairkit.core.state.backend.density_matrix.MixedState", false]], "module": [[4, "module-quairkit", false], [5, "module-quairkit.ansatz", false], [6, "module-quairkit.ansatz.container", false], [7, "module-quairkit.ansatz.layer", false], [8, "module-quairkit.circuit", false], [9, "module-quairkit.core", false], [10, "module-quairkit.core.base", false], [11, "module-quairkit.core.hamiltonian", false], [12, "module-quairkit.core.state", false], [13, "module-quairkit.core.state.backend", false], [14, "module-quairkit.core.state.backend.density_matrix", false], [15, "module-quairkit.core.state.backend.state_vector", false], [16, "module-quairkit.core.state.state", false], [17, "module-quairkit.core.visual", false], [18, "module-quairkit.database", false], [19, "module-quairkit.database.hamiltonian", false], [20, "module-quairkit.database.matrix", false], [21, "module-quairkit.database.random", false], [22, "module-quairkit.database.representation", false], [23, "module-quairkit.database.set", false], [24, "module-quairkit.database.state", false], [25, "module-quairkit.loss", false], [26, "module-quairkit.loss.distance", false], [27, "module-quairkit.loss.measure", false], [28, "module-quairkit.operator", false], [29, "module-quairkit.operator.channel", false], [30, "module-quairkit.operator.channel.base", false], [31, "module-quairkit.operator.channel.common", false], [32, "module-quairkit.operator.channel.custom", false], [33, "module-quairkit.operator.gate", false], [34, "module-quairkit.operator.gate.base", false], [35, "module-quairkit.operator.gate.custom", false], [36, "module-quairkit.operator.gate.encoding", false], [37, "module-quairkit.operator.gate.multi_qubit_gate", false], [38, "module-quairkit.operator.gate.single_qubit_gate", false], [39, "module-quairkit.operator.gate.visual", false], [40, "module-quairkit.operator.special", false], [41, "module-quairkit.qinfo", false]], "ms (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.MS", false]], "ms() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.ms", false]], "ms() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.ms", false]], "ms_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.ms_gate", false]], "n_qubits (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.n_qubits", false]], "n_terms (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.n_terms", false]], "negativity() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.negativity", false]], "nkron() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.NKron", false]], "normalize() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.normalize", false]], "num_qubits (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.num_qubits", false]], "num_qubits (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.num_qubits", false]], "num_systems (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.num_systems", false]], "numel() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.numel", false]], "numpy() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.numpy", false]], "of() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.Of", false]], "of_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.Of_gate", false]], "one_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.one_state", false]], "oper_history (quairkit.ansatz.container.operatorlist property)": [[6, "quairkit.ansatz.container.OperatorList.oper_history", false]], "operator (class in quairkit.core.base)": [[10, "quairkit.core.base.Operator", false]], "operatorlist (class in quairkit.ansatz.container)": [[6, "quairkit.ansatz.container.OperatorList", false]], "oracle (class in quairkit.operator.gate.custom)": [[35, "quairkit.operator.gate.custom.Oracle", false]], "oracle() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.oracle", false]], "p (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.P", false]], "p() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.p", false]], "p() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.p", false]], "p_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.p_gate", false]], "p_norm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.p_norm", false]], "param (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.param", false]], "paramgate (class in quairkit.operator.gate.base)": [[34, "quairkit.operator.gate.base.ParamGate", false]], "paramoracle (class in quairkit.operator.gate.custom)": [[35, "quairkit.operator.gate.custom.ParamOracle", false]], "partial_trace() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.partial_trace", false]], "partial_trace_discontiguous() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.partial_trace_discontiguous", false]], "partial_transpose() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.partial_transpose", false]], "partial_transpose_2() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.partial_transpose_2", false]], "partialstate (class in quairkit.operator.special)": [[40, "quairkit.operator.special.PartialState", false]], "pauli_basis() (in module quairkit.database.set)": [[23, "quairkit.database.set.pauli_basis", false]], "pauli_channel() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.pauli_channel", false]], "pauli_decomposition() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.pauli_decomposition", false]], "pauli_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.pauli_kraus", false]], "pauli_str (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.pauli_str", false]], "pauli_str_basis() (in module quairkit.database.set)": [[23, "quairkit.database.set.pauli_str_basis", false]], "pauli_str_convertor() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.pauli_str_convertor", false]], "pauli_str_povm() (in module quairkit.database.set)": [[23, "quairkit.database.set.pauli_str_povm", false]], "pauli_words (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.pauli_words", false]], "pauli_words_matrix (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_matrix", false]], "pauli_words_r (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_r", false]], "paulichannel (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.PauliChannel", false]], "permute_systems() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.permute_systems", false]], "phase() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.phase", false]], "phase_damping() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.phase_damping", false]], "phase_damping_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.phase_damping_kraus", false]], "phase_flip() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.phase_flip", false]], "phase_flip_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.phase_flip_kraus", false]], "phase_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.phase_gate", false]], "phase_space_point() (in module quairkit.database.set)": [[23, "quairkit.database.set.phase_space_point", false]], "phasedamping (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.PhaseDamping", false]], "phaseflip (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.PhaseFlip", false]], "plot() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.plot", false]], "plot_density_matrix_graph() (in module quairkit.core.visual)": [[17, "quairkit.core.visual.plot_density_matrix_graph", false]], "plot_multi_qubits_state_in_bloch_sphere() (in module quairkit.core.visual)": [[17, "quairkit.core.visual.plot_multi_qubits_state_in_bloch_sphere", false]], "plot_rotation_in_bloch_sphere() (in module quairkit.core.visual)": [[17, "quairkit.core.visual.plot_rotation_in_bloch_sphere", false]], "plot_state_in_bloch_sphere() (in module quairkit.core.visual)": [[17, "quairkit.core.visual.plot_state_in_bloch_sphere", false]], "prob_sample() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.prob_sample", false]], "purestate (class in quairkit.core.state.backend.state_vector)": [[15, "quairkit.core.state.backend.state_vector.PureState", false]], "purity() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.purity", false]], "qaoalayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.QAOALayer", false]], "qaoalayerweighted (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.QAOALayerWeighted", false]], "qft_basis() (in module quairkit.database.set)": [[23, "quairkit.database.set.qft_basis", false]], "qft_matrix() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.qft_matrix", false]], "quairkit": [[4, "module-quairkit", false]], "quairkit.ansatz": [[5, "module-quairkit.ansatz", false]], "quairkit.ansatz.container": [[6, "module-quairkit.ansatz.container", false]], "quairkit.ansatz.layer": [[7, "module-quairkit.ansatz.layer", false]], "quairkit.circuit": [[8, "module-quairkit.circuit", false]], "quairkit.core": [[9, "module-quairkit.core", false]], "quairkit.core.base": [[10, "module-quairkit.core.base", false]], "quairkit.core.hamiltonian": [[11, "module-quairkit.core.hamiltonian", false]], "quairkit.core.state": [[12, "module-quairkit.core.state", false]], "quairkit.core.state.backend": [[13, "module-quairkit.core.state.backend", false]], "quairkit.core.state.backend.density_matrix": [[14, "module-quairkit.core.state.backend.density_matrix", false]], "quairkit.core.state.backend.state_vector": [[15, "module-quairkit.core.state.backend.state_vector", false]], "quairkit.core.state.state": [[16, "module-quairkit.core.state.state", false]], "quairkit.core.visual": [[17, "module-quairkit.core.visual", false]], "quairkit.database": [[18, "module-quairkit.database", false]], "quairkit.database.hamiltonian": [[19, "module-quairkit.database.hamiltonian", false]], "quairkit.database.matrix": [[20, "module-quairkit.database.matrix", false]], "quairkit.database.random": [[21, "module-quairkit.database.random", false]], "quairkit.database.representation": [[22, "module-quairkit.database.representation", false]], "quairkit.database.set": [[23, "module-quairkit.database.set", false]], "quairkit.database.state": [[24, "module-quairkit.database.state", false]], "quairkit.loss": [[25, "module-quairkit.loss", false]], "quairkit.loss.distance": [[26, "module-quairkit.loss.distance", false]], "quairkit.loss.measure": [[27, "module-quairkit.loss.measure", false]], "quairkit.operator": [[28, "module-quairkit.operator", false]], "quairkit.operator.channel": [[29, "module-quairkit.operator.channel", false]], "quairkit.operator.channel.base": [[30, "module-quairkit.operator.channel.base", false]], "quairkit.operator.channel.common": [[31, "module-quairkit.operator.channel.common", false]], "quairkit.operator.channel.custom": [[32, "module-quairkit.operator.channel.custom", false]], "quairkit.operator.gate": [[33, "module-quairkit.operator.gate", false]], "quairkit.operator.gate.base": [[34, "module-quairkit.operator.gate.base", false]], "quairkit.operator.gate.custom": [[35, "module-quairkit.operator.gate.custom", false]], "quairkit.operator.gate.encoding": [[36, "module-quairkit.operator.gate.encoding", false]], "quairkit.operator.gate.multi_qubit_gate": [[37, "module-quairkit.operator.gate.multi_qubit_gate", false]], "quairkit.operator.gate.single_qubit_gate": [[38, "module-quairkit.operator.gate.single_qubit_gate", false]], "quairkit.operator.gate.visual": [[39, "module-quairkit.operator.gate.visual", false]], "quairkit.operator.special": [[40, "module-quairkit.operator.special", false]], "quairkit.qinfo": [[41, "module-quairkit.qinfo", false]], "qubit_history (quairkit.circuit.circuit property)": [[8, "quairkit.circuit.Circuit.qubit_history", false]], "r_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.r_state", false]], "random_channel() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_channel", false]], "random_density_matrix() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_density_matrix", false]], "random_hamiltonian_generator() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_hamiltonian_generator", false]], "random_hermitian() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_hermitian", false]], "random_orthogonal_projection() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_orthogonal_projection", false]], "random_pauli_str_generator() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_pauli_str_generator", false]], "random_state() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_state", false]], "random_unitary() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_unitary", false]], "random_unitary_hermitian() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_unitary_hermitian", false]], "random_unitary_with_hermitian_block() (in module quairkit.database.random)": [[21, "quairkit.database.random.random_unitary_with_hermitian_block", false]], "randomize_param() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.randomize_param", false]], "rank (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.rank", false]], "real_block_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.real_block_layer", false]], "real_entangled_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.real_entangled_layer", false]], "realblocklayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.RealBlockLayer", false]], "realentangledlayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.RealEntangledLayer", false]], "relative_entropy() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.relative_entropy", false]], "replacement_choi() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.replacement_choi", false]], "replacementchannel (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.ReplacementChannel", false]], "reset_channel() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.reset_channel", false]], "reset_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.reset_circuit_plot_param", false]], "reset_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.reset_kraus", false]], "reset_sequence() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.reset_sequence", false]], "resetchannel (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.ResetChannel", false]], "resetstate (class in quairkit.operator.special)": [[40, "quairkit.operator.special.ResetState", false]], "rx (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.RX", false]], "rx() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rx", false]], "rx() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.rx", false]], "rx_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rx_gate", false]], "rxx (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.RXX", false]], "rxx() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rxx", false]], "rxx() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.rxx", false]], "rxx_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rxx_gate", false]], "ry (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.RY", false]], "ry() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.ry", false]], "ry() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.ry", false]], "ry_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.ry_gate", false]], "ryy (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.RYY", false]], "ryy() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.ryy", false]], "ryy() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.ryy", false]], "ryy_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.ryy_gate", false]], "rz (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.RZ", false]], "rz() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rz", false]], "rz() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.rz", false]], "rz_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rz_gate", false]], "rzz (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.RZZ", false]], "rzz() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rzz", false]], "rzz() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.rzz", false]], "rzz_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.rzz_gate", false]], "s (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.S", false]], "s() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.s", false]], "s() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.s", false]], "s_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.s_gate", false]], "s_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.s_state", false]], "scale_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.scale_circuit_plot_param", false]], "schmidt_decompose() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.schmidt_decompose", false]], "sdg (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Sdg", false]], "sdg() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.sdg", false]], "sdg() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.sdg", false]], "sdg_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.sdg_gate", false]], "set_backend() (in module quairkit.core.base)": [[10, "quairkit.core.base.set_backend", false]], "set_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.set_circuit_plot_param", false]], "set_device() (in module quairkit.core.base)": [[10, "quairkit.core.base.set_device", false]], "set_dtype() (in module quairkit.core.base)": [[10, "quairkit.core.base.set_dtype", false]], "set_gate_info() (quairkit.operator.gate.base.gate method)": [[34, "quairkit.operator.gate.base.Gate.set_gate_info", false]], "set_seed() (in module quairkit.core.base)": [[10, "quairkit.core.base.set_seed", false]], "shift() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.shift", false]], "shift_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.shift_gate", false]], "sigx_p (quairkit.core.hamiltonian.spinops property)": [[11, "quairkit.core.hamiltonian.SpinOps.sigx_p", false]], "sigy_p (quairkit.core.hamiltonian.spinops property)": [[11, "quairkit.core.hamiltonian.SpinOps.sigy_p", false]], "sigz_p (quairkit.core.hamiltonian.spinops property)": [[11, "quairkit.core.hamiltonian.SpinOps.sigz_p", false]], "sites (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.sites", false]], "spinops (class in quairkit.core.hamiltonian)": [[11, "quairkit.core.hamiltonian.SpinOps", false]], "sqrtm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.sqrtm", false]], "state (class in quairkit.core.state.backend)": [[13, "quairkit.core.state.backend.State", false]], "state_fidelity() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.state_fidelity", false]], "statefidelity (class in quairkit.loss.distance)": [[26, "quairkit.loss.distance.StateFidelity", false]], "std_basis() (in module quairkit.database.set)": [[23, "quairkit.database.set.std_basis", false]], "stinespring_channel() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.stinespring_channel", false]], "stinespring_repr (quairkit.operator.channel.base.channel property)": [[30, "quairkit.operator.channel.base.Channel.stinespring_repr", false]], "stinespringrepr (class in quairkit.operator.channel.custom)": [[32, "quairkit.operator.channel.custom.StinespringRepr", false]], "superposition_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.superposition_layer", false]], "superpositionlayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.SuperpositionLayer", false]], "swap (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.SWAP", false]], "swap() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.swap", false]], "swap() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.swap", false]], "swap_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.swap_gate", false]], "system_dim (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.system_dim", false]], "system_seq (quairkit.core.state.backend.density_matrix.mixedstate property)": [[14, "quairkit.core.state.backend.density_matrix.MixedState.system_seq", false]], "system_seq (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.system_seq", false]], "system_seq (quairkit.core.state.backend.state_vector.purestate property)": [[15, "quairkit.core.state.backend.state_vector.PureState.system_seq", false]], "t (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.T", false]], "t() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.t", false]], "t() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.t", false]], "t_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.t_gate", false]], "tdg (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Tdg", false]], "tdg() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.tdg", false]], "tdg() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.tdg", false]], "tdg_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.tdg_gate", false]], "tensor_state() (in module quairkit.core.state.state)": [[16, "quairkit.core.state.state.tensor_state", false]], "terms (quairkit.core.hamiltonian.hamiltonian property)": [[11, "quairkit.core.hamiltonian.Hamiltonian.terms", false]], "thermal_relaxation() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.thermal_relaxation", false]], "thermal_relaxation_kraus() (in module quairkit.database.representation)": [[22, "quairkit.database.representation.thermal_relaxation_kraus", false]], "thermalrelaxation (class in quairkit.operator.channel.common)": [[31, "quairkit.operator.channel.common.ThermalRelaxation", false]], "to() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.to", false]], "to_state() (in module quairkit.core.state.state)": [[16, "quairkit.core.state.state.to_state", false]], "toffoli (in module quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.Toffoli", false]], "toffoli() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.toffoli", false]], "toffoli_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.toffoli_gate", false]], "trace() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.trace", false]], "trace() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.trace", false]], "trace_distance() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.trace_distance", false]], "trace_norm() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.trace_norm", false]], "tracedistance (class in quairkit.loss.distance)": [[26, "quairkit.loss.distance.TraceDistance", false]], "transfer_static() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.transfer_static", false]], "transform() (quairkit.core.state.backend.state method)": [[13, "quairkit.core.state.backend.State.transform", false]], "u3 (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.U3", false]], "u3() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.u3", false]], "u3() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.u3", false]], "u3_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.u3_gate", false]], "uf() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.Uf", false]], "uf_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.Uf_gate", false]], "unitary_matrix() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.unitary_matrix", false]], "universal2() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.universal2", false]], "universal2_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.universal2_gate", false]], "universal3() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.universal3", false]], "universal3_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.universal3_gate", false]], "universal_qudit() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.universal_qudit", false]], "universal_qudits() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.universal_qudits", false]], "universal_three_qubits() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.universal_three_qubits", false]], "universal_two_qubits() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.universal_two_qubits", false]], "universalqudits (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", false]], "universalthreequbits (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.UniversalThreeQubits", false]], "universaltwoqubits (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.UniversalTwoQubits", false]], "update_param() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.update_param", false]], "vec (quairkit.core.state.backend.state property)": [[13, "quairkit.core.state.backend.State.vec", false]], "von_neumann_entropy() (in module quairkit.qinfo)": [[41, "quairkit.qinfo.von_neumann_entropy", false]], "w_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.w_state", false]], "weak_superposition_layer() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.weak_superposition_layer", false]], "weaksuperpositionlayer (class in quairkit.ansatz.layer)": [[7, "quairkit.ansatz.layer.WeakSuperpositionLayer", false]], "x (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.X", false]], "x() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.x", false]], "x() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.x", false]], "x_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.x_gate", false]], "xy_hamiltonian() (in module quairkit.database.hamiltonian)": [[19, "quairkit.database.hamiltonian.xy_hamiltonian", false]], "y (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Y", false]], "y() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.y", false]], "y() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.y", false]], "y_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.y_gate", false]], "z (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Z", false]], "z() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.z", false]], "z() (quairkit.circuit.circuit method)": [[8, "quairkit.circuit.Circuit.z", false]], "z_gate() (in module quairkit.database.matrix)": [[20, "quairkit.database.matrix.z_gate", false]], "zero_state() (in module quairkit.database.state)": [[24, "quairkit.database.state.zero_state", false]]}, "objects": {"": [[4, 0, 0, 1, "quairkit", ""]], "quairkit": [[5, 0, 0, 1, "ansatz", ""], [8, 0, 0, 1, "circuit", ""], [9, 0, 0, 1, "core", ""], [18, 0, 0, 1, "database", ""], [25, 0, 0, 1, "loss", ""], [28, 0, 0, 1, "operator", ""], [41, 0, 0, 1, "qinfo", ""]], "quairkit.ansatz": [[6, 0, 0, 1, "container", ""], [7, 0, 0, 1, "layer", ""]], "quairkit.ansatz.container": [[6, 1, 1, 0, "OperatorList", "Sequential container."]], "quairkit.ansatz.container.OperatorList": [[6, 3, 1, 0, "append", "Appends an given operator to the end."], [6, 3, 1, 0, "extend", "Appends an given operator to the end."], [6, 4, 1, 0, "oper_history", "Return the operator history of this Sequential"]], "quairkit.ansatz.container.OperatorList.__init__": [[6, 2, 2, "quairkit.ansatz.container.OperatorList", "operators", "Sequential container."]], "quairkit.ansatz.container.OperatorList.append": [[6, 2, 2, "quairkit.ansatz.container.OperatorList.append", "op", "Appends an given operator to the end."]], "quairkit.ansatz.container.OperatorList.extend": [[6, 2, 2, "quairkit.ansatz.container.OperatorList.extend", "sequential", "Appends an given operator to the end."]], "quairkit.ansatz.layer": [[7, 1, 1, 0, "ComplexBlockLayer", "Weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [7, 1, 1, 0, "ComplexEntangledLayer", "Strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [7, 1, 1, 0, "Layer", "Base class for Layers."], [7, 1, 1, 0, "LinearEntangledLayer", "Linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [7, 1, 1, 0, "QAOALayer", "QAOA driving layers"], [7, 1, 1, 0, "QAOALayerWeighted", "QAOA driving layers with weights"], [7, 1, 1, 0, "RealBlockLayer", "Weakly entangled layers consisting of Ry gates and CNOT gates."], [7, 1, 1, 0, "RealEntangledLayer", "Strongly entangled layers consisting of Ry gates and CNOT gates."], [7, 1, 1, 0, "SuperpositionLayer", "Layers of Hadamard gates."], [7, 1, 1, 0, "WeakSuperpositionLayer", "Layers of Ry gates with a rotation angle \\pi/4."]], "quairkit.ansatz.layer.ComplexBlockLayer.__init__": [[7, 2, 2, 0, "depth", "Number of layers."], [7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.ComplexEntangledLayer.__init__": [[7, 2, 2, 0, "depth", "Number of layers."], [7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.Layer": [[7, 4, 1, 0, "gate_history", "list of gates information of this layer"]], "quairkit.ansatz.layer.Layer.__init__": [[7, 2, 2, 0, "depth", "Number of layers."], [7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this layer is applied."]], "quairkit.ansatz.layer.LinearEntangledLayer.__init__": [[7, 2, 2, 0, "depth", "Number of layers."], [7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.QAOALayer.__init__": [[7, 2, 2, 0, "depth", "depth of layer"], [7, 2, 2, 0, "edges", "edges of the graph"], [7, 2, 2, 0, "nodes", "nodes of the graph"]], "quairkit.ansatz.layer.QAOALayerWeighted.__init__": [[7, 2, 2, 0, "depth", "depth of layer"], [7, 2, 2, 0, "edges", "edges of the graph with weights"], [7, 2, 2, 0, "nodes", "nodes of the graph with weights"]], "quairkit.ansatz.layer.RealBlockLayer.__init__": [[7, 2, 2, 0, "depth", "Number of layers."], [7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.RealEntangledLayer.__init__": [[7, 2, 2, 0, "depth", "Number of layers."], [7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.SuperpositionLayer.__init__": [[7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.WeakSuperpositionLayer.__init__": [[7, 2, 2, 0, "num_qubits", "Total number of qubits."], [7, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.circuit": [[8, 1, 1, 0, "Circuit", "Quantum circuit."]], "quairkit.circuit.Circuit": [[8, 3, 1, 0, "amplitude_damping", "Add amplitude damping channels."], [8, 3, 1, 0, "bit_flip", "Add bit flip channels."], [8, 3, 1, 0, "bit_phase_flip", "Add bit phase flip channels."], [8, 3, 1, 0, "ccx", "Add CCX (Toffoli) gates."], [8, 3, 1, 0, "choi_channel", "Add custom channels in the Choi representation."], [8, 3, 1, 0, "cnot", "Add CNOT gates."], [8, 3, 1, 0, "collapse", "list of qubits to be collapsed. Defaults to 'full'."], [8, 3, 1, 0, "complex_block_layer", "Add weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [8, 3, 1, 0, "complex_entangled_layer", "Add strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [8, 3, 1, 0, "control_oracle", "Add a controlled oracle gate."], [8, 3, 1, 0, "cp", "Add controlled P gates."], [8, 3, 1, 0, "crx", "Add controlled rotation gates about the x-axis."], [8, 3, 1, 0, "cry", "Add controlled rotation gates about the y-axis."], [8, 3, 1, 0, "crz", "Add controlled rotation gates about the z-axis."], [8, 3, 1, 0, "cswap", "Add CSWAP (Fredkin) gates."], [8, 3, 1, 0, "cu", "Add controlled single-qubit rotation gates."], [8, 3, 1, 0, "cy", "Add controlled Y gates."], [8, 3, 1, 0, "cz", "Add controlled Z gates."], [8, 3, 1, 0, "depolarizing", "Add depolarizing channels."], [8, 4, 1, 0, "depth", "Depth of gate sequences."], [8, 3, 1, 0, "extend", "extend for quantum circuit"], [8, 3, 1, 0, "forward", "forward the input"], [8, 4, 1, 0, "gate_history", "List of gates information of circuit"], [8, 3, 1, 0, "generalized_amplitude_damping", "Add generalized amplitude damping channels."], [8, 3, 1, 0, "generalized_depolarizing", "Add a general depolarizing channel."], [8, 4, 1, 0, "grad", "Gradients with respect to the flattened parameters."], [8, 3, 1, 0, "h", "Add single-qubit Hadamard gates."], [8, 4, 1, 0, "isdynamic", "Whether the circuit is dynamic"], [8, 3, 1, 0, "kraus_channel", "Add custom channels in the Kraus representation."], [8, 3, 1, 0, "linear_entangled_layer", "Add linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [8, 3, 1, 0, "ms", "Add M\u00f8lmer-S\u00f8rensen (MS) gates."], [8, 4, 1, 0, "num_qubits", "Number of qubits."], [8, 3, 1, 0, "oracle", "Add an oracle gate."], [8, 3, 1, 0, "p", "Add single-qubit P gates."], [8, 4, 1, 0, "param", "Flattened parameters in the circuit."], [8, 3, 1, 0, "pauli_channel", "Add Pauli channels."], [8, 3, 1, 0, "phase_damping", "Add phase damping channels."], [8, 3, 1, 0, "phase_flip", "Add phase flip channels."], [8, 3, 1, 0, "plot", "display the circuit using matplotlib"], [8, 4, 1, 0, "qubit_history", "gate information on each qubit"], [8, 3, 1, 0, "randomize_param", "Randomize parameters of the circuit based on the initializer.  Current we only support Uniform and Normal initializer."], [8, 3, 1, 0, "real_block_layer", "Add weakly entangled layers consisting of Ry gates and CNOT gates."], [8, 3, 1, 0, "real_entangled_layer", "Add strongly entangled layers consisting of Ry gates and CNOT gates."], [8, 3, 1, 0, "reset_channel", "Add reset channels."], [8, 3, 1, 0, "rx", "Add single-qubit rotation gates about the x-axis."], [8, 3, 1, 0, "rxx", "Add RXX gates."], [8, 3, 1, 0, "ry", "Add single-qubit rotation gates about the y-axis."], [8, 3, 1, 0, "ryy", "Add RYY gates."], [8, 3, 1, 0, "rz", "Add single-qubit rotation gates about the z-axis."], [8, 3, 1, 0, "rzz", "Add RZZ gates."], [8, 3, 1, 0, "s", "Add single-qubit S gates."], [8, 3, 1, 0, "sdg", "Add single-qubit S dagger (S inverse) gates."], [8, 3, 1, 0, "stinespring_channel", "Add custom channels in the Stinespring representation."], [8, 3, 1, 0, "superposition_layer", "Add layers of Hadamard gates."], [8, 3, 1, 0, "swap", "Add SWAP gates."], [8, 3, 1, 0, "t", "Add single-qubit T gates."], [8, 3, 1, 0, "tdg", "Add single-qubit T dagger (T inverse) gates."], [8, 3, 1, 0, "thermal_relaxation", "Add thermal relaxation channels."], [8, 3, 1, 0, "transfer_static", "set stop_gradient of all parameters of the circuit as True"], [8, 3, 1, 0, "u3", "Add single-qubit rotation gates."], [8, 3, 1, 0, "unitary_matrix", "Get the unitary matrix form of the circuit."], [8, 3, 1, 0, "universal_qudits", "TODO add description"], [8, 3, 1, 0, "universal_three_qubits", "Add universal three-qubit gates. One of such a gate requires 81 parameters."], [8, 3, 1, 0, "universal_two_qubits", "Add universal two-qubit gates. One of such a gate requires 15 parameters."], [8, 3, 1, 0, "update_param", "Replace parameters of all/one layer(s) by theta."], [8, 3, 1, 0, "weak_superposition_layer", "Add layers of Ry gates with a rotation angle \\pi/4."], [8, 3, 1, 0, "x", "Add single-qubit X gates."], [8, 3, 1, 0, "y", "Add single-qubit Y gates."], [8, 3, 1, 0, "z", "Add single-qubit Z gates."]], "quairkit.circuit.Circuit.__init__": [[8, 2, 2, 0, "num_qubits", "Number of qubits."]], "quairkit.circuit.Circuit.amplitude_damping": [[8, 2, 2, 0, "gamma", "Damping probability."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.bit_flip": [[8, 2, 2, 0, "prob", "Probability of a bit flip."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.bit_phase_flip": [[8, 2, 2, 0, "prob", "Probability of a bit phase flip."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.ccx": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.choi_channel": [[8, 2, 2, 0, "choi_repr", "Choi representation of this channel."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.cnot": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.collapse": [[8, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [8, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [8, 2, 2, 0, "measure_basis", "The basis of the measurement."], [8, 2, 2, 0, "qubits_idx", "list of qubits to be collapsed."]], "quairkit.circuit.Circuit.complex_block_layer": [[8, 2, 2, 0, "depth", "Number of layers."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.complex_entangled_layer": [[8, 2, 2, 0, "depth", "Number of layers."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.control_oracle": [[8, 2, 2, 0, "gate_name", "name of this oracle."], [8, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [8, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [8, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cp": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crx": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cry": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crz": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cswap": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cu": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cy": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cz": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.depolarizing": [[8, 2, 2, 0, "prob", "Parameter of the depolarizing channel."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.extend": [[8, 2, 2, 0, "cir", "a Circuit or a Sequential"]], "quairkit.circuit.Circuit.forward": [[8, 2, 2, 0, "state", "initial state"]], "quairkit.circuit.Circuit.generalized_amplitude_damping": [[8, 2, 2, 0, "gamma", "Damping probability."], [8, 2, 2, 0, "prob", "Excitation probability."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.generalized_depolarizing": [[8, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli basis."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channel is applied."]], "quairkit.circuit.Circuit.h": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.kraus_channel": [[8, 2, 2, 0, "kraus_oper", "Kraus representation of this channel."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.linear_entangled_layer": [[8, 2, 2, 0, "depth", "Number of layers."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ms": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.oracle": [[8, 2, 2, 0, "gate_name", "name of this oracle."], [8, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [8, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [8, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.p": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.pauli_channel": [[8, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.phase_damping": [[8, 2, 2, 0, "gamma", "Parameter of the phase damping channel."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.phase_flip": [[8, 2, 2, 0, "prob", "Probability of a phase flip."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.plot": [[8, 2, 2, 0, "dpi", "dots per inches, here is resolution ratio"], [8, 2, 2, 0, "output", "whether return the matplotlib.figure.Figure instance"], [8, 2, 2, 0, "save_path", "the save path of image"], [8, 2, 2, 0, "scale", "scale coefficient of figure, default to 1.0"], [8, 2, 2, 0, "show", "whether execute plt.show()"], [8, 2, 2, 0, "tex", "a bool flag which controls latex fonts of gate display, default to False."]], "quairkit.circuit.Circuit.randomize_param": [[8, 2, 2, 0, "arg0", "first argument of the initializer."], [8, 2, 2, 0, "arg1", "first argument of the initializer."], [8, 2, 2, 0, "initializer_type", "The type of the initializer."]], "quairkit.circuit.Circuit.real_block_layer": [[8, 2, 2, 0, "depth", "Number of layers."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.real_entangled_layer": [[8, 2, 2, 0, "depth", "Number of layers."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.reset_channel": [[8, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.rx": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rxx": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ry": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ryy": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rz": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rzz": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.s": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.sdg": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.stinespring_channel": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."], [8, 2, 2, 0, "stinespring_repr", "Stinespring representation of this channel."]], "quairkit.circuit.Circuit.superposition_layer": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.swap": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.t": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.tdg": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.thermal_relaxation": [[8, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [8, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.u3": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_qudits": [[8, 2, 2, "quairkit.circuit.Circuit.universal_qudits", "param", "TODO add description"], [8, 2, 2, "quairkit.circuit.Circuit.universal_qudits", "param_sharing", "TODO add description"], [8, 2, 2, "quairkit.circuit.Circuit.universal_qudits", "qubits_idx", "TODO add description"]], "quairkit.circuit.Circuit.universal_three_qubits": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_two_qubits": [[8, 2, 2, 0, "param", "Parameters of the gates."], [8, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.update_param": [[8, 2, 2, 0, "idx", "Index of replacement."], [8, 2, 2, 0, "theta", "New parameters"]], "quairkit.circuit.Circuit.weak_superposition_layer": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.x": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.y": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.z": [[8, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.core": [[10, 0, 0, 1, "base", ""], [11, 0, 0, 1, "hamiltonian", ""], [12, 0, 0, 1, "state", ""], [17, 0, 0, 1, "visual", ""]], "quairkit.core.base": [[10, 1, 1, 0, "Backend", "Backend classifier in the QuAIRKit."], [10, 1, 1, 0, "Operator", "The basic class to implement the operation in QuAIRKit."], [10, 5, 1, 0, "get_backend", "Get the current backend of QuAIRKit."], [10, 5, 1, 0, "get_device", "Get the current device to save the tensor."], [10, 5, 1, 0, "get_dtype", "Return currently used data type."], [10, 5, 1, 0, "get_float_dtype", "Return currently used float data type."], [10, 5, 1, 0, "get_seed", "Get the currently used seed of QuAIRKit."], [10, 5, 1, 0, "set_backend", "Set the backend implementation of QuAIRKit."], [10, 5, 1, 0, "set_device", "Set the device to save the tensor."], [10, 5, 1, 0, "set_dtype", "Set the data type ."], [10, 5, 1, 0, "set_seed", "Set the global seed of QuAIRKit."]], "quairkit.core.base.Backend.__init__": [[10, 2, 2, "quairkit.core.base.Backend", "value", "Backend classifier in the QuAIRKit."]], "quairkit.core.base.Operator.__init__": [[10, 2, 2, 0, "backend", "The backend implementation of the operator. Defaults to None, which means to use the default backend implementation."], [10, 2, 2, 0, "dtype", "The data type of the operator. Defaults to None, which means to use the default data type."]], "quairkit.core.base.set_backend": [[10, 2, 2, 0, "backend", "The name of the backend."]], "quairkit.core.base.set_device": [[10, 2, 2, 0, "device", "The name of the device."]], "quairkit.core.base.set_dtype": [[10, 2, 2, 0, "dtype", "The dtype can be complex64 and complex128."]], "quairkit.core.base.set_seed": [[10, 2, 2, 0, "seed", "the random seed used in QuAIRKit."]], "quairkit.core.hamiltonian": [[11, 1, 1, 0, "Hamiltonian", "Hamiltonian class in QuAIRKit."], [11, 1, 1, 0, "SpinOps", "The spin operators in matrix forms, could be used to construct Hamiltonian matrix or spin observables."]], "quairkit.core.hamiltonian.Hamiltonian": [[11, 4, 1, 0, "coefficients", "The coefficient of each term in the Hamiltonian, i.e. [1.0, 2.0]."], [11, 3, 1, 0, "construct_h_matrix", "Construct a matrix form of the Hamiltonian in Z-basis."], [11, 3, 1, 0, "decompose_pauli_words", "Decompose pauli_str into coefficients and Pauli strings."], [11, 3, 1, 0, "decompose_with_sites", "Decompose pauli_str into coefficients, a simplified form of Pauli strings, and the indices of qubits on which the Pauli operators act on."], [11, 4, 1, 0, "matrix", "The matrix form of the Hamiltonian."], [11, 4, 1, 0, "n_qubits", "Number of qubits."], [11, 4, 1, 0, "n_terms", "Number of terms of the hamiltonian."], [11, 4, 1, 0, "pauli_str", "The Pauli string corresponding to the hamiltonian."], [11, 4, 1, 0, "pauli_words", "The Pauli word of each term, i.e. ['ZIZ', 'IIX']."], [11, 4, 1, 0, "pauli_words_matrix", "The list of matrices with respect to simplied Pauli words."], [11, 4, 1, 0, "pauli_words_r", "A list of Pauli word (exclude I), i.e. ['ZXZZ', 'Z', 'X']."], [11, 4, 1, 0, "sites", "A list of qubits index corresponding to the hamiltonian."], [11, 4, 1, 0, "terms", "All items in hamiltonian, i.e. [['Z0, Z1'], ['I']]."]], "quairkit.core.hamiltonian.Hamiltonian.__init__": [[11, 2, 2, 0, "compress", "Determines whether the input list will be automatically merged (e.g."], [11, 2, 2, 0, "pauli_str", "A list of Hamiltonian information, e.g."]], "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix": [[11, 2, 2, 0, "qubit_num", "The number of qubits."]], "quairkit.core.hamiltonian.SpinOps": [[11, 4, 1, 0, "sigx_p", "A list of S^x_i operators, different elements correspond to different indices i."], [11, 4, 1, 0, "sigy_p", "A list of S^y_i operators, different elements correspond to different indices i."], [11, 4, 1, 0, "sigz_p", "A list of S^z_i operators, different elements correspond to different indices i."]], "quairkit.core.hamiltonian.SpinOps.__init__": [[11, 2, 2, 0, "size", "Size of the system (number of qubits)."], [11, 2, 2, 0, "use_sparse", "Decide whether to use the sparse matrix to calculate."]], "quairkit.core.state": [[13, 0, 0, 1, "backend", ""], [16, 0, 0, 1, "state", ""]], "quairkit.core.state.backend": [[13, 1, 1, 0, "State", "The abstract base class for quantum states in QuAIRKit."], [14, 0, 0, 1, "density_matrix", ""], [15, 0, 0, 1, "state_vector", ""]], "quairkit.core.state.backend.State": [[13, 3, 1, 0, "are_qubits", "Whether all systems are qubits"], [13, 3, 1, 0, "are_qutrits", "Whether all systems are qutrits"], [13, 4, 1, 0, "backend", "The backend of this state."], [13, 4, 1, 0, "bra", "Dagger of the ket form."], [13, 3, 1, 0, "check", "Assert whether the input data is valid for the specific State class."], [13, 3, 1, 0, "clone", "Return a copy of the quantum state."], [13, 4, 1, 0, "data", "The data tensor of this state"], [13, 4, 1, 0, "density_matrix", "The density matrix representation of this state."], [13, 4, 1, 0, "device", "The device of this state"], [13, 4, 1, 0, "dim", "The dimension of this state"], [13, 4, 1, 0, "dtype", "The data type of this state"], [13, 3, 1, 0, "evolve", "Evolve this state with unitary operators."], [13, 3, 1, 0, "expand", "Expand the batch dimension of the State."], [13, 3, 1, 0, "expand_as", "Expand this tensor to the same size as other."], [13, 3, 1, 0, "expec_val", "The expectation value of the observable with respect to the quantum state."], [13, 3, 1, 0, "fit", "Convert the data to the specified backend."], [13, 3, 1, 0, "index_select", "Indexing elements from the State batch along the given dimension."], [13, 4, 1, 0, "ket", "The ket form of this state"], [13, 3, 1, 0, "measure", "Measure the quantum state"], [13, 3, 1, 0, "normalize", "Normalize this state"], [13, 4, 1, 0, "num_qubits", "The number of qubits of this state, when all systems are qubits"], [13, 4, 1, 0, "num_systems", "The number of systems"], [13, 3, 1, 0, "numel", "The number of elements in this data"], [13, 3, 1, 0, "numpy", "Get the data in numpy."], [13, 4, 1, 0, "rank", "The rank of the state."], [13, 3, 1, 0, "reset_sequence", "reset the system order to default sequence i.e. from 1 to n."], [13, 4, 1, 0, "system_dim", "The list of dimensions for each system"], [13, 4, 1, 0, "system_seq", "The system order of this state"], [13, 3, 1, 0, "to", "Change the property of the data tensor, and return a copy of this State"], [13, 3, 1, 0, "trace", "(Partial) trace of the state"], [13, 3, 1, 0, "transform", "Apply a general linear operator to the state."], [13, 4, 1, 0, "vec", "\\textrm{vec}(|i \\rangle\\langle j|)=|j, i \\rangle"]], "quairkit.core.state.backend.State.__init__": [[13, 2, 2, 0, "data", "tensor array for quantum state(s)."], [13, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [13, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.backend.State.check": [[13, 2, 2, 0, "data", "tensor array for quantum state(s)."], [13, 2, 2, 0, "sys_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer."]], "quairkit.core.state.backend.State.evolve": [[13, 2, 2, 0, "sys_idx", "the system indices to be acted on."], [13, 2, 2, 0, "unitary", "the unitary operator."]], "quairkit.core.state.backend.State.expand": [[13, 2, 2, 0, "batch_dim", "the new batch dimension"]], "quairkit.core.state.backend.State.expand_as": [[13, 2, 2, 0, "other", "the state/tensor to be expanded to."]], "quairkit.core.state.backend.State.expec_val": [[13, 2, 2, 0, "decompose", "If decompose is True, it will return the expectation value of each term."], [13, 2, 2, 0, "hamiltonian", "Input observable."], [13, 2, 2, "quairkit.core.state.backend.State.expec_val", "shots", "The expectation value of the observable with respect to the quantum state."]], "quairkit.core.state.backend.State.fit": [[13, 2, 2, 0, "state_backend", "the target backend of the state."]], "quairkit.core.state.backend.State.index_select": [[13, 2, 2, 0, "dim", "the dimension in which we index"], [13, 2, 2, 0, "index", "the 1-D tensor containing the indices to index"]], "quairkit.core.state.backend.State.measure": [[13, 2, 2, 0, "is_povm", "whether the measurement is a POVM."], [13, 2, 2, 0, "keep_state", "whether to keep the state after measurement."], [13, 2, 2, 0, "measured_op", "measurement operator."], [13, 2, 2, 0, "sys_idx", "the system indices to be measured."]], "quairkit.core.state.backend.State.to": [[13, 2, 2, 0, "device", "the new device of the state."], [13, 2, 2, 0, "dtype", "the new data type of the state."]], "quairkit.core.state.backend.State.trace": [[13, 2, 2, 0, "sys_idx", "the subsystem indices to be traced out."]], "quairkit.core.state.backend.State.transform": [[13, 2, 2, 0, "op", "the input operator."], [13, 2, 2, 0, "repr_type", "the representation type of input operator."], [13, 2, 2, 0, "sys_idx", "the qubit indices to be applied."]], "quairkit.core.state.backend.density_matrix": [[14, 1, 1, 0, "MixedState", "The mixed state class."]], "quairkit.core.state.backend.density_matrix.MixedState": [[14, 4, 1, 0, "system_seq", "The system order of this state"]], "quairkit.core.state.backend.density_matrix.MixedState.__init__": [[14, 2, 2, 0, "data", "tensor array (in density matrix representation) for quantum mixed state(s)."], [14, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [14, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.backend.state_vector": [[15, 1, 1, 0, "PureState", "The pure state class."]], "quairkit.core.state.backend.state_vector.PureState": [[15, 4, 1, 0, "system_seq", "The system order of this state"]], "quairkit.core.state.backend.state_vector.PureState.__init__": [[15, 2, 2, 0, "data", "tensor array in vector representation for quantum pure state(s)."], [15, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [15, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.state": [[16, 5, 1, 0, "image_to_density_matrix", "Encode image to density matrix"], [16, 5, 1, 0, "tensor_state", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [16, 5, 1, 0, "to_state", "The function to generate a specified state instance."]], "quairkit.core.state.state.image_to_density_matrix": [[16, 2, 2, 0, "image_filepath", "Path to the image file."]], "quairkit.core.state.state.tensor_state": [[16, 2, 2, "quairkit.core.state.state.tensor_state", "args", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [16, 2, 2, 0, "state_a", "State"], [16, 2, 2, 0, "state_b", "State"]], "quairkit.core.state.state.to_state": [[16, 2, 2, 0, "data", "a representation of the quantum state in allowable backend, or an instance of the State class."], [16, 2, 2, 0, "dtype", "Used to specify the data dtype of the data."], [16, 2, 2, 0, "state_backend", "The backend of the state."], [16, 2, 2, 0, "sys_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer."]], "quairkit.core.visual": [[17, 5, 1, 0, "plot_density_matrix_graph", "Density matrix visualization tools"], [17, 5, 1, 0, "plot_multi_qubits_state_in_bloch_sphere", "Displaying the quantum state on the Bloch sphere which has multi qubits."], [17, 5, 1, 0, "plot_rotation_in_bloch_sphere", "Plot the rotation starting from the initial quantum state on the Bloch sphere."], [17, 5, 1, 0, "plot_state_in_bloch_sphere", "Plot the input quantum state on the Bloch sphere."]], "quairkit.core.visual.plot_density_matrix_graph": [[17, 2, 2, 0, "density_matrix", "The state vector or density matrix of quantum state with multi qubits, requiring the number of qubits greater than 1"], [17, 2, 2, 0, "size", "Bar width, between 0 and 1, default is 0.3."]], "quairkit.core.visual.plot_multi_qubits_state_in_bloch_sphere": [[17, 2, 2, 0, "filename", "The name of the picture to be stored."], [17, 2, 2, 0, "save_gif", "Whether to store the gif."], [17, 2, 2, 0, "save_pic", "Whether to store the picture."], [17, 2, 2, 0, "set_color", "To set the specified color, consult the cmap table."], [17, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [17, 2, 2, 0, "state", "List of the input quantum states in the state vector form or the density matrix form."], [17, 2, 2, 0, "view_angle", "View angle."], [17, 2, 2, 0, "view_dist", "View distance."], [17, 2, 2, 0, "which_qubits", "Index of qubits to display, default to be fully displayed."]], "quairkit.core.visual.plot_rotation_in_bloch_sphere": [[17, 2, 2, 0, "color_scheme", "initial color, trace color, and end color, respectively."], [17, 2, 2, 0, "filename", "The name of the gif file to be stored."], [17, 2, 2, 0, "init_state", "Initial quantum state in the state vector form or the density matrix form."], [17, 2, 2, 0, "rotating_angle", "Rotation angle [theta, phi, lam]."], [17, 2, 2, 0, "save_gif", "Whether to store the gif."], [17, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [17, 2, 2, 0, "view_angle", "The first element is the angle [0-360] to the x-y plane, and the second element is the angle [0-360] to the x-z plane."], [17, 2, 2, 0, "view_dist", "View distance."]], "quairkit.core.visual.plot_state_in_bloch_sphere": [[17, 2, 2, 0, "filename", "The name of the gif file to be stored."], [17, 2, 2, 0, "save_gif", "Whether to store the gif."], [17, 2, 2, 0, "set_color", "To set the specified color, consult the cmap table."], [17, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [17, 2, 2, 0, "state", "List of the input quantum states in the state vector form or the density matrix form."], [17, 2, 2, 0, "view_angle", "View angle."], [17, 2, 2, 0, "view_dist", "View distance."]], "quairkit.database": [[19, 0, 0, 1, "hamiltonian", ""], [20, 0, 0, 1, "matrix", ""], [21, 0, 0, 1, "random", ""], [22, 0, 0, 1, "representation", ""], [23, 0, 0, 1, "set", ""], [24, 0, 0, 1, "state", ""]], "quairkit.database.hamiltonian": [[19, 5, 1, 0, "heisenberg_hamiltonian", "Compute the Heisenberg Hamiltonian"], [19, 5, 1, 0, "ising_hamiltonian", "Compute the Ising Hamiltonian"], [19, 5, 1, 0, "xy_hamiltonian", "Compute the Ising Hamiltonian"]], "quairkit.database.hamiltonian.heisenberg_hamiltonian": [[19, 2, 2, 0, "edges", "A tensor E shape=[3, V, V], where E[0][u][v] is alpha_{uv}, E[1][u][v] is beta_{uv} and E[2][u][v] is gamma_{uv}."]], "quairkit.database.hamiltonian.ising_hamiltonian": [[19, 2, 2, 0, "edges", "A tensor E shape=[V, V], where E[u][v] is gamma_{uv}."], [19, 2, 2, 0, "vertices", "A tensor E shape=[V], where V[k] is beta_{k}."]], "quairkit.database.hamiltonian.xy_hamiltonian": [[19, 2, 2, 0, "edges", "A tensor E shape=[2, V, V], where E[0][u][v] is alpha_{uv} and E[1][u][v] is beta_{uv}."]], "quairkit.database.matrix": [[20, 5, 1, 0, "Of", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [20, 5, 1, 0, "Of_gate", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [20, 5, 1, 0, "Uf", "Construct the unitary matrix maps |x\\rangle|y\\rangle to |x\\rangle|y\\oplus f(x)\\rangle based on a boolean function f."], [20, 5, 1, 0, "Uf_gate", "Construct the unitary matrix maps |x\\rangle|y\\rangle to |x\\rangle|y\\oplus f(x)\\rangle based on a boolean function f."], [20, 5, 1, 0, "cnot", "Generate the matrix"], [20, 5, 1, 0, "cnot_gate", "Generate the matrix"], [20, 5, 1, 0, "cp", "Generate the matrix"], [20, 5, 1, 0, "cp_gate", "Generate the matrix"], [20, 5, 1, 0, "crx", "Generate the matrix"], [20, 5, 1, 0, "crx_gate", "Generate the matrix"], [20, 5, 1, 0, "cry", "Generate the matrix"], [20, 5, 1, 0, "cry_gate", "Generate the matrix"], [20, 5, 1, 0, "crz", "Generate the matrix"], [20, 5, 1, 0, "crz_gate", "Generate the matrix"], [20, 5, 1, 0, "cswap", "Generate the matrix"], [20, 5, 1, 0, "cswap_gate", "Generate the matrix"], [20, 5, 1, 0, "cu", "Generate the matrix"], [20, 5, 1, 0, "cu_gate", "Generate the matrix"], [20, 5, 1, 0, "cy", "Generate the matrix"], [20, 5, 1, 0, "cy_gate", "Generate the matrix"], [20, 5, 1, 0, "cz", "Generate the matrix"], [20, 5, 1, 0, "cz_gate", "Generate the matrix"], [20, 5, 1, 0, "eye", "Generate the matrix"], [20, 5, 1, 0, "eye_gate", "Generate the matrix"], [20, 5, 1, 0, "func", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [20, 5, 1, 0, "grover_matrix", "Construct the Grover operator based on oracle."], [20, 5, 1, 0, "h", "Generate the matrix"], [20, 5, 1, 0, "h_gate", "Generate the matrix"], [20, 5, 1, 0, "ms", "Generate the matrix"], [20, 5, 1, 0, "ms_gate", "Generate the matrix"], [20, 5, 1, 0, "p", "Generate the matrix"], [20, 5, 1, 0, "p_gate", "Generate the matrix"], [20, 5, 1, 0, "phase", "Generate phase operator for qudit"], [20, 5, 1, 0, "phase_gate", "Generate phase operator for qudit"], [20, 5, 1, 0, "qft_matrix", "Construct the quantum fourier transpose (QFT) gate."], [20, 5, 1, 0, "rx", "Generate the matrix"], [20, 5, 1, 0, "rx_gate", "Generate the matrix"], [20, 5, 1, 0, "rxx", "Generate the matrix"], [20, 5, 1, 0, "rxx_gate", "Generate the matrix"], [20, 5, 1, 0, "ry", "Generate the matrix"], [20, 5, 1, 0, "ry_gate", "Generate the matrix"], [20, 5, 1, 0, "ryy", "Generate the matrix"], [20, 5, 1, 0, "ryy_gate", "Generate the matrix"], [20, 5, 1, 0, "rz", "Generate the matrix"], [20, 5, 1, 0, "rz_gate", "Generate the matrix"], [20, 5, 1, 0, "rzz", "Generate the matrix"], [20, 5, 1, 0, "rzz_gate", "Generate the matrix"], [20, 5, 1, 0, "s", "Generate the matrix"], [20, 5, 1, 0, "s_gate", "Generate the matrix"], [20, 5, 1, 0, "sdg", "Generate the matrix"], [20, 5, 1, 0, "sdg_gate", "Generate the matrix"], [20, 5, 1, 0, "shift", "Generate shift operator for qudit"], [20, 5, 1, 0, "shift_gate", "Generate shift operator for qudit"], [20, 5, 1, 0, "swap", "Generate the matrix"], [20, 5, 1, 0, "swap_gate", "Generate the matrix"], [20, 5, 1, 0, "t", "Generate the matrix"], [20, 5, 1, 0, "t_gate", "Generate the matrix"], [20, 5, 1, 0, "tdg", "Generate the matrix"], [20, 5, 1, 0, "tdg_gate", "Generate the matrix"], [20, 5, 1, 0, "toffoli", "Generate the matrix"], [20, 5, 1, 0, "toffoli_gate", "Generate the matrix"], [20, 5, 1, 0, "u3", "Generate the matrix"], [20, 5, 1, 0, "u3_gate", "Generate the matrix"], [20, 5, 1, 0, "universal2", "Generate the matrix"], [20, 5, 1, 0, "universal2_gate", "Generate the matrix"], [20, 5, 1, 0, "universal3", "Generate the matrix"], [20, 5, 1, 0, "universal3_gate", "Generate the matrix"], [20, 5, 1, 0, "universal_qudit", "Generalized GellMann matrix basis were used to construct the universal gate for qudits"], [20, 5, 1, 0, "x", "Generate the matrix"], [20, 5, 1, 0, "x_gate", "Generate the matrix"], [20, 5, 1, 0, "y", "Generate the matrix"], [20, 5, 1, 0, "y_gate", "Generate the matrix"], [20, 5, 1, 0, "z", "Generate the matrix"], [20, 5, 1, 0, "z_gate", "Generate the matrix"]], "quairkit.database.matrix.Of": [[20, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [20, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Of_gate": [[20, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [20, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Uf": [[20, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [20, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Uf_gate": [[20, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [20, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.cnot": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cnot_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cp": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cp_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crx": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crx_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cry": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cry_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crz": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crz_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cswap": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cswap_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cu": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cu_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cy": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cy_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cz": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cz_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.eye": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.eye_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.func": [[20, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [20, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.grover_matrix": [[20, 2, 2, 0, "oracle", "the input oracle A to be rotated."]], "quairkit.database.matrix.h": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.h_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.ms": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.ms_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.p": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.p_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.phase": [[20, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.phase_gate": [[20, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.qft_matrix": [[20, 2, 2, 0, "dtype", "the data type you used, default type is torch.complex64"], [20, 2, 2, 0, "num_qubits", "number of qubits n st."]], "quairkit.database.matrix.rx": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rx_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rxx": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rxx_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ry": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ry_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ryy": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ryy_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rz": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rz_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rzz": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rzz_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.s": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.s_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.sdg": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.sdg_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.shift": [[20, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.shift_gate": [[20, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.swap": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.swap_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.t": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.t_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.tdg": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.tdg_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.toffoli": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.toffoli_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.u3": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.u3_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal2": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal2_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal3": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal3_gate": [[20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal_qudit": [[20, 2, 2, 0, "dimension", "the dimension of the qudit"], [20, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.x": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.x_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.y": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.y_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.z": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.z_gate": [[20, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.random": [[21, 5, 1, 0, "haar_density_operator", "randomly generate a density matrix following Haar random"], [21, 5, 1, 0, "haar_orthogonal", "randomly generate an orthogonal matrix following Haar random, referenced by arXiv:math-ph/0609050v2"], [21, 5, 1, 0, "haar_state_vector", "randomly generate a state vector following Haar random"], [21, 5, 1, 0, "haar_unitary", "randomly generate a unitary following Haar random, referenced by arXiv:math-ph/0609050v2"], [21, 5, 1, 0, "random_channel", "Generate a random channel from its Stinespring representation"], [21, 5, 1, 0, "random_density_matrix", "randomly generate an num_qubits-qubit state in density matrix form"], [21, 5, 1, 0, "random_hamiltonian_generator", "Generate a random Hamiltonian."], [21, 5, 1, 0, "random_hermitian", "randomly generate a 2^n \\times 2^n hermitian matrix"], [21, 5, 1, 0, "random_orthogonal_projection", "randomly generate a 2^n \\times 2^n rank-1 orthogonal projector"], [21, 5, 1, 0, "random_pauli_str_generator", "Generate a random observable in list form."], [21, 5, 1, 0, "random_state", "Generate a random quantum state."], [21, 5, 1, 0, "random_unitary", "randomly generate a 2^n \\times 2^n unitary"], [21, 5, 1, 0, "random_unitary_hermitian", "randomly generate a 2^n \\times 2^n hermitian unitary"], [21, 5, 1, 0, "random_unitary_with_hermitian_block", "randomly generate a unitary 2^n \\times 2^n matrix that is a block encoding of a 2^{n/2} \\times 2^{n/2} Hermitian matrix"]], "quairkit.database.random.haar_density_operator": [[21, 2, 2, 0, "is_real", "whether the density matrix is real, default to be False"], [21, 2, 2, 0, "num_qubits", "number of qubits n"], [21, 2, 2, 0, "rank", "rank of density matrix, default to be None refering to full ranks"]], "quairkit.database.random.haar_orthogonal": [[21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.haar_state_vector": [[21, 2, 2, 0, "is_real", "whether the vector is real, default to be False"], [21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.haar_unitary": [[21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_channel": [[21, 2, 2, 0, "num_qubits", "number of qubits n"], [21, 2, 2, 0, "rank", "rank of this Channel."], [21, 2, 2, 0, "size", "batch size."], [21, 2, 2, 0, "target", "target representation, should to be 'choi', 'kraus' or 'stinespring'"]], "quairkit.database.random.random_density_matrix": [[21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_hamiltonian_generator": [[21, 2, 2, 0, "num_qubits", "Number of qubits."], [21, 2, 2, 0, "terms", "Number of terms in the Hamiltonian."]], "quairkit.database.random.random_hermitian": [[21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_orthogonal_projection": [[21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_pauli_str_generator": [[21, 2, 2, 0, "num_qubits", "Number of qubits."], [21, 2, 2, 0, "terms", "Number of terms in the observable."]], "quairkit.database.random.random_state": [[21, 2, 2, 0, "is_real", "If the quantum state only contains the real number."], [21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."], [21, 2, 2, 0, "rank", "The rank of the density matrix."], [21, 2, 2, 0, "size", "Batch size."]], "quairkit.database.random.random_unitary": [[21, 2, 2, 0, "num_qubits", "number of qubits n"], [21, 2, 2, 0, "size", "batch size."]], "quairkit.database.random.random_unitary_hermitian": [[21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_unitary_with_hermitian_block": [[21, 2, 2, 0, "is_unitary", "whether the hermitian block is a unitary divided by 2 (for tutorial only)"], [21, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.representation": [[22, 5, 1, 0, "amplitude_damping_kraus", "Kraus representation of an amplitude damping channel with form"], [22, 5, 1, 0, "bit_flip_kraus", "Kraus representation of a bit flip channel with form"], [22, 5, 1, 0, "bit_phase_flip_kraus", "Kraus representation of a bit-phase flip channel with form"], [22, 5, 1, 0, "depolarizing_kraus", "Kraus representation of a depolarizing channel with form"], [22, 5, 1, 0, "generalized_amplitude_damping_kraus", "Kraus representation of a generalized amplitude damping channel with form"], [22, 5, 1, 0, "generalized_depolarizing_kraus", "Kraus representation of a generalized depolarizing channel with form"], [22, 5, 1, 0, "pauli_kraus", "Kraus representation of a pauli channel"], [22, 5, 1, 0, "phase_damping_kraus", "Kraus representation of a phase damping channel with form"], [22, 5, 1, 0, "phase_flip_kraus", "Kraus representation of a phase flip channel with form"], [22, 5, 1, 0, "replacement_choi", "Choi representation of a replacement channel"], [22, 5, 1, 0, "reset_kraus", "Kraus representation of a reset channel with form"], [22, 5, 1, 0, "thermal_relaxation_kraus", "Kraus representation of a thermal relaxation channel"]], "quairkit.database.representation.amplitude_damping_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.bit_flip_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.bit_phase_flip_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.depolarizing_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_amplitude_damping_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "gamma", "coefficient \\gamma."], [22, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_depolarizing_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "num_qubits", "number of qubits n of this channel."], [22, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.pauli_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "prob", "a list of three probabilities corresponding to X, Y, Z gate p."]], "quairkit.database.representation.phase_damping_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.phase_flip_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.replacement_choi": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "sigma", "output state of this channel."]], "quairkit.database.representation.reset_kraus": [[22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "prob", "list of two probabilities of resetting to state |0\\rangle and |1\\rangle."]], "quairkit.database.representation.thermal_relaxation_kraus": [[22, 2, 2, 0, "const_t", "list of T_1 and T_2 relaxation time in microseconds."], [22, 2, 2, 0, "dtype", "data type."], [22, 2, 2, 0, "exec_time", "quantum gate execution time in the process of relaxation in nanoseconds."]], "quairkit.database.set": [[23, 5, 1, 0, "bell_basis", "Generate the Bell basis for a 2-qubit system, with each basis state accessible along the first dimension of a tensor."], [23, 5, 1, 0, "gell_mann", "Generate a set of Gell-Mann matrices for a given dimension. These matrices span the entire space dim-by-dim matrices, and they generalize the Pauli operators when dim = 2 and the Gell-Mann operators when dim = 3."], [23, 5, 1, 0, "heisenberg_weyl", "The Heisenberg-Weyl operators are defined as T(a,b) = e^{-(d+1) pi i a b/ d}Z^a X^b."], [23, 5, 1, 0, "pauli_basis", "Generate a Pauli basis."], [23, 5, 1, 0, "pauli_str_basis", "Get the state basis with respect to the Pauli string"], [23, 5, 1, 0, "pauli_str_povm", "Get the povm with respect to the Pauli string"], [23, 5, 1, 0, "phase_space_point", "Generate phase space point operator for qudit"], [23, 5, 1, 0, "qft_basis", "Compute the eigenvectors (eigenbasis) of the Quantum Fourier Transform (QFT) matrix."], [23, 5, 1, 0, "std_basis", "Generate all standard basis states for a given number of qubits."]], "quairkit.database.set.gell_mann": [[23, 2, 2, 0, "dim", "a positive integer indicating the dimension."]], "quairkit.database.set.heisenberg_weyl": [[23, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.pauli_basis": [[23, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_str_basis": [[23, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.pauli_str_povm": [[23, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.phase_space_point": [[23, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.qft_basis": [[23, 2, 2, 0, "num_qubits", "Number of qubits n such that N = 2^n."]], "quairkit.database.set.std_basis": [[23, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state": [[24, 5, 1, 0, "bell_diagonal_state", "Generate a bell diagonal state."], [24, 5, 1, 0, "bell_state", "Generate a bell state."], [24, 5, 1, 0, "completely_mixed_computational", "Generate the density matrix of the completely mixed state."], [24, 5, 1, 0, "computational_basis", "Generate a computational basis state |e_{i}\\rangle , whose i-th element is 1 and all the other elements are 0."], [24, 5, 1, 0, "ghz_state", "Generate a GHZ-state."], [24, 5, 1, 0, "isotropic_state", "Generate the isotropic state."], [24, 5, 1, 0, "one_state", "The function to generate a one state."], [24, 5, 1, 0, "r_state", "Generate an R-state."], [24, 5, 1, 0, "s_state", "Generate the S-state."], [24, 5, 1, 0, "w_state", "Generate a W-state."], [24, 5, 1, 0, "zero_state", "The function to generate a zero state."]], "quairkit.database.state.bell_diagonal_state": [[24, 2, 2, 0, "prob", "The prob of each bell state."]], "quairkit.database.state.bell_state": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.completely_mixed_computational": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.computational_basis": [[24, 2, 2, 0, "index", "Index i of the computational basis state :math`|e_{i}rangle` ."], [24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.ghz_state": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained izn the quantum state."]], "quairkit.database.state.isotropic_state": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."], [24, 2, 2, 0, "prob", "The parameter of the isotropic state to be generated."]], "quairkit.database.state.one_state": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.r_state": [[24, 2, 2, 0, "prob", "The parameter of the R-state to be generated."]], "quairkit.database.state.s_state": [[24, 2, 2, 0, "prob", "The parameter of the S-state to be generated."]], "quairkit.database.state.w_state": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.zero_state": [[24, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.loss": [[26, 0, 0, 1, "distance", ""], [27, 0, 0, 1, "measure", ""]], "quairkit.loss.distance": [[26, 1, 1, 0, "StateFidelity", "The class of the loss function to compute the state fidelity."], [26, 1, 1, 0, "TraceDistance", "The class of the loss function to compute the trace distance."]], "quairkit.loss.distance.StateFidelity": [[26, 3, 1, 0, "forward", "Compute the state fidelity between the input state and the target state."]], "quairkit.loss.distance.StateFidelity.__init__": [[26, 2, 2, 0, "target_state", "The target state to be used to compute the state fidelity."]], "quairkit.loss.distance.StateFidelity.forward": [[26, 2, 2, 0, "state", "The input state which will be used to compute the state fidelity with the target state."]], "quairkit.loss.distance.TraceDistance": [[26, 3, 1, 0, "forward", "Compute the trace distance between the input state and the target state."]], "quairkit.loss.distance.TraceDistance.__init__": [[26, 2, 2, 0, "target_state", "The target state to be used to compute the trace distance."]], "quairkit.loss.distance.TraceDistance.forward": [[26, 2, 2, 0, "state", "The input state which will be used to compute the trace distance with the target state."]], "quairkit.loss.measure": [[27, 1, 1, 0, "ExpecVal", "The class of the loss function to compute the expectation value for the observable."], [27, 1, 1, 0, "Measure", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.ExpecVal": [[27, 3, 1, 0, "forward", "Compute the expectation value of the observable with respect to the input state."]], "quairkit.loss.measure.ExpecVal.__init__": [[27, 2, 2, 0, "hamiltonian", "The input observable."]], "quairkit.loss.measure.ExpecVal.forward": [[27, 2, 2, 0, "decompose", "Defaults to False."], [27, 2, 2, 0, "state", "The input state which will be used to compute the expectation value."]], "quairkit.loss.measure.Measure": [[27, 3, 1, 0, "forward", "Compute the probability of measurement to the input state."]], "quairkit.loss.measure.Measure.__init__": [[27, 2, 2, "quairkit.loss.measure.Measure", "measure_op", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.Measure.forward": [[27, 2, 2, 0, "desired_result", "Specify the results of the measurement to return."], [27, 2, 2, 0, "keep_state", "Whether return the measured state."], [27, 2, 2, 0, "qubits_idx", "The index of the qubits to be measured."], [27, 2, 2, 0, "state", "The quantum state to be measured."]], "quairkit.operator": [[29, 0, 0, 1, "channel", ""], [33, 0, 0, 1, "gate", ""], [40, 0, 0, 1, "special", ""]], "quairkit.operator.channel": [[30, 0, 0, 1, "base", ""], [31, 0, 0, 1, "common", ""], [32, 0, 0, 1, "custom", ""]], "quairkit.operator.channel.base": [[30, 1, 1, 0, "Channel", "Basic class for quantum channels."]], "quairkit.operator.channel.base.Channel": [[30, 4, 1, 0, "choi_repr", "Choi representation of a channel"], [30, 4, 1, 0, "kraus_repr", "Kraus representation of a channel"], [30, 4, 1, 0, "stinespring_repr", "Stinespring representation of a channel"]], "quairkit.operator.channel.base.Channel.__init__": [[30, 2, 2, 0, "check_legality", "whether check the completeness of the representation if provided."], [30, 2, 2, 0, "num_acted_qubits", "the number of qubits that this channel acts on."], [30, 2, 2, 0, "num_qubits", "total number of qubits."], [30, 2, 2, 0, "qubits_idx", "indices of the qubits on which this channel acts on."], [30, 2, 2, 0, "representation", "the representation of this channel."], [30, 2, 2, 0, "type_repr", "type of a representation."]], "quairkit.operator.channel.common": [[31, 1, 1, 0, "AmplitudeDamping", "A collection of amplitude damping channels."], [31, 1, 1, 0, "BitFlip", "A collection of bit flip channels."], [31, 1, 1, 0, "BitPhaseFlip", "A collection of bit phase flip channels."], [31, 1, 1, 0, "Depolarizing", "A collection of depolarizing channels."], [31, 1, 1, 0, "GeneralizedAmplitudeDamping", "A collection of generalized amplitude damping channels."], [31, 1, 1, 0, "GeneralizedDepolarizing", "A generalized depolarizing channel."], [31, 1, 1, 0, "PauliChannel", "A collection of Pauli channels."], [31, 1, 1, 0, "PhaseDamping", "A collection of phase damping channels."], [31, 1, 1, 0, "PhaseFlip", "A collection of phase flip channels."], [31, 1, 1, 0, "ReplacementChannel", "A collection of quantum replacement channels."], [31, 1, 1, 0, "ResetChannel", "A collection of reset channels."], [31, 1, 1, 0, "ThermalRelaxation", "A collection of thermal relaxation channels."]], "quairkit.operator.channel.common.AmplitudeDamping.__init__": [[31, 2, 2, 0, "gamma", "Damping probability."], [31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitFlip.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Probability of a bit flip."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitPhaseFlip.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Probability of a bit phase flip."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.Depolarizing.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Parameter of the depolarizing channels."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedAmplitudeDamping.__init__": [[31, 2, 2, 0, "gamma", "Damping probability."], [31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Excitation probability."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedDepolarizing.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "probability p."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."]], "quairkit.operator.channel.common.PauliChannel.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseDamping.__init__": [[31, 2, 2, 0, "gamma", "Parameter of the phase damping channels."], [31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseFlip.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Probability of a phase flip."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ReplacementChannel.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."], [31, 2, 2, 0, "sigma", "The state to be replaced."]], "quairkit.operator.channel.common.ResetChannel.__init__": [[31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ThermalRelaxation.__init__": [[31, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [31, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [31, 2, 2, 0, "num_qubits", "Total number of qubits."], [31, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.custom": [[32, 1, 1, 0, "ChoiRepr", "A custom channel in Choi representation."], [32, 1, 1, 0, "KrausRepr", "A custom channel in Kraus representation."], [32, 1, 1, 0, "StinespringRepr", "A custom channel in Stinespring representation."]], "quairkit.operator.channel.custom.ChoiRepr.__init__": [[32, 2, 2, 0, "choi_repr", "Choi operator of this channel."], [32, 2, 2, 0, "num_qubits", "Total number of qubits."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this channel acts."]], "quairkit.operator.channel.custom.KrausRepr.__init__": [[32, 2, 2, 0, "kraus_repr", "list of Kraus operators of this channel."], [32, 2, 2, 0, "num_qubits", "Total number of qubits."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this channel acts."]], "quairkit.operator.channel.custom.StinespringRepr.__init__": [[32, 2, 2, 0, "num_qubits", "Total number of qubits."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this channel acts."], [32, 2, 2, 0, "stinespring_mat", "Stinespring matrix that represents this channel."]], "quairkit.operator.gate": [[34, 0, 0, 1, "base", ""], [35, 0, 0, 1, "custom", ""], [36, 0, 0, 1, "encoding", ""], [37, 0, 0, 1, "multi_qubit_gate", ""], [38, 0, 0, 1, "single_qubit_gate", ""], [39, 0, 0, 1, "visual", ""]], "quairkit.operator.gate.base": [[34, 1, 1, 0, "Gate", "Base class for quantum gates."], [34, 1, 1, 0, "ParamGate", "Base class for quantum parameterized gates."]], "quairkit.operator.gate.base.Gate": [[34, 3, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [34, 3, 1, 0, "gate_history_generation", "determine self.gate_history"], [34, 4, 1, 0, "matrix", "Unitary matrix of this gate"], [34, 3, 1, 0, "set_gate_info", "the interface to set self.gate_info"]], "quairkit.operator.gate.base.Gate.__init__": [[34, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [34, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit."], [34, 2, 2, 0, "matrix", "the matrix of this gate."], [34, 2, 2, 0, "num_acted_qubits", "the number of qubits that this gate acts on."], [34, 2, 2, 0, "num_qubits", "total number of qubits."], [34, 2, 2, 0, "qubits_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.base.Gate.display_in_circuit": [[34, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [34, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.base.Gate.set_gate_info": [[34, 2, 2, 0, "kwargs", "parameters to set self.gate_info"]], "quairkit.operator.gate.base.ParamGate": [[34, 3, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [34, 3, 1, 0, "gate_history_generation", "determine self.gate_history when gate is parameterized"]], "quairkit.operator.gate.base.ParamGate.__init__": [[34, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [34, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [34, 2, 2, 0, "generator", "function that generates the unitary matrix of this gate."], [34, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [34, 2, 2, 0, "num_acted_qubits", "the number of qubits that this gate acts on."], [34, 2, 2, 0, "num_qubits", "total number of qubits."], [34, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [34, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [34, 2, 2, 0, "qubits_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.base.ParamGate.display_in_circuit": [[34, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [34, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.custom": [[35, 1, 1, 0, "ControlOracle", "A controlled oracle as a gate."], [35, 1, 1, 0, "Oracle", "An oracle as a gate."], [35, 1, 1, 0, "ParamOracle", "An parameterized oracle as a gate"]], "quairkit.operator.gate.custom.ControlOracle.__init__": [[35, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "gate_info", "A controlled oracle as a gate."], [35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.custom.Oracle.__init__": [[35, 2, 2, "quairkit.operator.gate.custom.Oracle", "gate_info", "An oracle as a gate."], [35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.custom.ParamOracle.__init__": [[35, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit."], [35, 2, 2, 0, "generator", "function that generates the oracle."], [35, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [35, 2, 2, 0, "num_qubits", "total number of qubits."], [35, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [35, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [35, 2, 2, 0, "qubits_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.encoding": [[36, 1, 1, 0, "AmplitudeEncoding", "Amplitude encoding gate for encoding input classical data into quantum states."], [36, 1, 1, 0, "AngleEncoding", "Angle encoding gate for encoding input classical data into quantum states."], [36, 1, 1, 0, "BasisEncoding", "Basis encoding gate for encoding input classical data into quantum states."], [36, 1, 1, 0, "IQPEncoding", "IQP style encoding gate for encoding input classical data into quantum states."]], "quairkit.operator.gate.encoding.AmplitudeEncoding.__init__": [[36, 2, 2, 0, "num_qubits", "Total number of qubits."], [36, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.encoding.AngleEncoding.__init__": [[36, 2, 2, 0, "encoding_gate", "The type of quantum gates used for encoding, which should be one of \"rx\", \"ry\", and \"rz\"."], [36, 2, 2, 0, "feature", "Vector to be encoded."], [36, 2, 2, 0, "num_qubits", "Total number of qubits."], [36, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.encoding.BasisEncoding.__init__": [[36, 2, 2, 0, "num_qubits", "Total number of qubits."], [36, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.encoding.IQPEncoding.__init__": [[36, 2, 2, 0, "feature", "Vector to be encoded."], [36, 2, 2, 0, "num_qubits", "Total number of qubits."], [36, 2, 2, 0, "num_repeat", "Number of encoding layers."], [36, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate": [[37, 1, 1, 0, "CCX", "A collection of CCX (Toffoli) gates."], [37, 1, 1, 0, "CNOT", "A collection of CNOT gates."], [37, 1, 1, 0, "CP", "A collection of controlled P gates."], [37, 1, 1, 0, "CRX", "A collection of controlled rotation gates about the x-axis."], [37, 1, 1, 0, "CRY", "A collection of controlled rotation gates about the y-axis."], [37, 1, 1, 0, "CRZ", "A collection of controlled rotation gates about the z-axis."], [37, 1, 1, 0, "CSWAP", "A collection of CSWAP (Fredkin) gates."], [37, 1, 1, 0, "CU", "A collection of controlled single-qubit rotation gates."], [37, 6, 1, 0, "CX", "alias of CNOT"], [37, 1, 1, 0, "CY", "A collection of controlled Y gates."], [37, 1, 1, 0, "CZ", "A collection of controlled Z gates."], [37, 1, 1, 0, "MS", "A collection of M\u00f8lmer-S\u00f8rensen (MS) gates for trapped ion devices."], [37, 1, 1, 0, "RXX", "A collection of RXX gates."], [37, 1, 1, 0, "RYY", "A collection of RYY gates."], [37, 1, 1, 0, "RZZ", "A collection of RZZ gates."], [37, 1, 1, 0, "SWAP", "A collection of SWAP gates."], [37, 6, 1, 0, "Toffoli", "alias of CCX"], [37, 1, 1, 0, "UniversalQudits", "TODO add description"], [37, 1, 1, 0, "UniversalThreeQubits", "A collection of universal three-qubit gates. One of such a gate requires 81 parameters."], [37, 1, 1, 0, "UniversalTwoQubits", "A collection of universal two-qubit gates. One of such a gate requires 15 parameters."]], "quairkit.operator.gate.multi_qubit_gate.CCX.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CNOT.__init__": [[37, 2, 2, 0, "cnot_idx", "CNOT gate index."], [37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CP.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRX.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRY.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRZ.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CSWAP.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CU.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CY.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CZ.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.MS.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RXX.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RYY.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RZZ.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.SWAP.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.UniversalQudits.__init__": [[37, 2, 2, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", "param", "TODO add description"], [37, 2, 2, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", "param_sharing", "TODO add description"], [37, 2, 2, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", "qubits_idx", "TODO add description"]], "quairkit.operator.gate.multi_qubit_gate.UniversalThreeQubits.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.UniversalTwoQubits.__init__": [[37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate": [[38, 1, 1, 0, "H", "A collection of single-qubit Hadamard gates."], [38, 1, 1, 0, "P", "A collection of single-qubit P gates."], [38, 1, 1, 0, "RX", "A collection of single-qubit rotation gates about the x-axis."], [38, 1, 1, 0, "RY", "A collection of single-qubit rotation gates about the y-axis."], [38, 1, 1, 0, "RZ", "A collection of single-qubit rotation gates about the z-axis."], [38, 1, 1, 0, "S", "A collection of single-qubit S gates."], [38, 1, 1, 0, "Sdg", "A collection of single-qubit S dagger (S inverse) gates."], [38, 1, 1, 0, "T", "A collection of single-qubit T gates."], [38, 1, 1, 0, "Tdg", "A collection of single-qubit T dagger (T inverse) gates."], [38, 1, 1, 0, "U3", "A collection of single-qubit rotation gates."], [38, 1, 1, 0, "X", "A collection of single-qubit X gates."], [38, 1, 1, 0, "Y", "A collection of single-qubit Y gates."], [38, 1, 1, 0, "Z", "A collection of single-qubit Z gates."]], "quairkit.operator.gate.single_qubit_gate.H.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.P.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RX.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RY.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RZ.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.S.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Sdg.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.T.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Tdg.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.U3.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.X.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Y.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Z.__init__": [[38, 2, 2, 0, "num_qubits", "Total number of qubits."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.visual": [[39, 5, 1, 0, "get_circuit_plot_param", "The output function of __CIRCUIT_PLOT_PARAM dictionary"], [39, 5, 1, 0, "reset_circuit_plot_param", "The reset function of __CIRCUIT_PLOT_PARAM dictionary"], [39, 5, 1, 0, "scale_circuit_plot_param", "The scale function of __CIRCUIT_PLOT_PARAM dictionary"], [39, 5, 1, 0, "set_circuit_plot_param", "The set function of __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.gate.visual.scale_circuit_plot_param": [[39, 2, 2, 0, "scale", "the scalar for scaling the elements in the figure"]], "quairkit.operator.gate.visual.set_circuit_plot_param": [[39, 2, 2, 0, "kwargs", "parameters to update the __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.special": [[40, 1, 1, 0, "Collapse", "The class to compute the collapse of the quantum state."], [40, 1, 1, 0, "PartialState", "The class to obtain the partial quantum state. It will be implemented soon."], [40, 1, 1, 0, "ResetState", "The class to reset the quantum state. It will be implemented soon."]], "quairkit.operator.special.Collapse": [[40, 3, 1, 0, "forward", "Compute the collapse of the input state."]], "quairkit.operator.special.Collapse.__init__": [[40, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [40, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [40, 2, 2, 0, "measure_basis", "The basis of the measurement."], [40, 2, 2, 0, "num_qubits", "Total number of qubits."], [40, 2, 2, 0, "qubits_idx", "list of qubits to be collapsed."]], "quairkit.operator.special.Collapse.forward": [[40, 2, 2, 0, "state", "The input state, which will be collapsed"]], "quairkit.operator.special.PartialState": [[40, 3, 1, 0, "forward", "The forward function."]], "quairkit.operator.special.PartialState.forward": [[40, 2, 2, "quairkit.operator.special.PartialState.forward", "inputs", "The forward function."], [40, 2, 2, "quairkit.operator.special.PartialState.forward", "kwargs", "The forward function."]], "quairkit.operator.special.ResetState": [[40, 3, 1, 0, "forward", "The forward function."]], "quairkit.operator.special.ResetState.forward": [[40, 2, 2, "quairkit.operator.special.ResetState.forward", "inputs", "The forward function."], [40, 2, 2, "quairkit.operator.special.ResetState.forward", "kwargs", "The forward function."]], "quairkit.qinfo": [[41, 5, 1, 0, "NKron", "calculate Kronecker product of at least two matrices"], [41, 5, 1, 0, "abs_norm", "tool for calculation of matrix norm"], [41, 5, 1, 0, "block_enc_herm", "generate a (qubitized) block encoding of hermitian mat"], [41, 5, 1, 0, "channel_repr_convert", "convert the given representation of a channel to the target implementation"], [41, 5, 1, 0, "create_choi_repr", "Create the Choi representation of a linear map with input checks."], [41, 5, 1, 0, "create_matrix", "Create a matrix representation of a linear map without needing to specify the output dimension."], [41, 5, 1, 0, "dagger", "tool for calculation of matrix dagger"], [41, 5, 1, 0, "decomp_1qubit", "Decompose a single-qubit unitary operator into Z-Y-Z rotation angles."], [41, 5, 1, 0, "decomp_ctrl_1qubit", "Decompose a controlled single-qubit unitary operator into its components."], [41, 5, 1, 0, "diamond_norm", "Calculate the diamond norm of input."], [41, 5, 1, 0, "direct_sum", "calculate the direct sum of A and B"], [41, 5, 1, 0, "gate_fidelity", "calculate the fidelity between gates"], [41, 5, 1, 0, "gradient", "Computes the gradient of a given loss function with respect to its input variable."], [41, 5, 1, 0, "herm_transform", "function transformation for Hermitian matrix"], [41, 5, 1, 0, "hessian", "Computes the Hessian matrix of a given loss function with respect to its input variables."], [41, 5, 1, 0, "is_choi", "Support batch input."], [41, 5, 1, 0, "is_density_matrix", "Support batch input"], [41, 5, 1, 0, "is_hermitian", "Support batch input."], [41, 5, 1, 0, "is_linear", "Check if the provided function 'func' is linear."], [41, 5, 1, 0, "is_positive", "Support batch input."], [41, 5, 1, 0, "is_ppt", "Support batch input."], [41, 5, 1, 0, "is_projector", "Support batch input."], [41, 5, 1, 0, "is_state_vector", "Support batch input."], [41, 5, 1, 0, "is_unitary", "Support batch input."], [41, 5, 1, 0, "logarithmic_negativity", "Calculate the Logarithmic Negativity E_N = ||\\rho^{T_A}|| of the input quantum state."], [41, 5, 1, 0, "logm", "Calculate log of a matrix"], [41, 5, 1, 0, "negativity", "Compute the Negativity N = ||\\frac{\\rho^{T_A}-1}{2}|| of the input quantum state."], [41, 5, 1, 0, "p_norm", "tool for calculation of Schatten p-norm"], [41, 5, 1, 0, "partial_trace", "Calculate the partial trace of the quantum state."], [41, 5, 1, 0, "partial_trace_discontiguous", "Calculate the partial trace of the quantum state with arbitrarily selected subsystem"], [41, 5, 1, 0, "partial_transpose", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [41, 5, 1, 0, "partial_transpose_2", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [41, 5, 1, 0, "pauli_decomposition", "Decompose the matrix by the Pauli basis."], [41, 5, 1, 0, "pauli_str_convertor", "Concatenate the input observable with coefficient 1."], [41, 5, 1, 0, "permute_systems", "Permute quantum system based on a permute list"], [41, 5, 1, 0, "prob_sample", "Sample from a probability distribution."], [41, 5, 1, 0, "purity", "Calculate the purity of a quantum state."], [41, 5, 1, 0, "relative_entropy", "Calculate the relative entropy of two quantum states."], [41, 5, 1, 0, "schmidt_decompose", "Calculate the Schmidt decomposition of a quantum state \\lvert\\psi\\rangle=\\sum_ic_i\\lvert i_A\\rangle\\otimes\\lvert i_B \\rangle."], [41, 5, 1, 0, "sqrtm", "Calculate square root of a matrix"], [41, 5, 1, 0, "state_fidelity", "Calculate the fidelity of two quantum states."], [41, 5, 1, 0, "trace", "Return the sum along diagonals of the tensor."], [41, 5, 1, 0, "trace_distance", "Calculate the trace distance of two quantum states."], [41, 5, 1, 0, "trace_norm", "tool for calculation of trace norm"], [41, 5, 1, 0, "von_neumann_entropy", "Calculate the von Neumann entropy of a quantum state."]], "quairkit.qinfo.NKron": [[41, 2, 2, "quairkit.qinfo.NKron", "args", "calculate Kronecker product of at least two matrices"], [41, 2, 2, 0, "matrix_A", "matrix, as torch.Tensor or numpy.ndarray"], [41, 2, 2, 0, "matrix_B", "matrix, as torch.Tensor or numpy.ndarray"]], "quairkit.qinfo.abs_norm": [[41, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.block_enc_herm": [[41, 2, 2, 0, "mat", "matrix to be block encoded"], [41, 2, 2, 0, "num_block_qubits", "ancilla qubits used in block encoding"]], "quairkit.qinfo.channel_repr_convert": [[41, 2, 2, 0, "representation", "input representation"], [41, 2, 2, 0, "source", "input form, should be 'choi', 'kraus' or 'stinespring'"], [41, 2, 2, 0, "target", "target form, should be 'choi', 'kraus' or 'stinespring'"], [41, 2, 2, 0, "tol", "error tolerance for the conversion from Choi, 10^{-6} by default"]], "quairkit.qinfo.create_choi_repr": [[41, 2, 2, 0, "input_dim", "The dimension of the space in which the linear map operates."], [41, 2, 2, "quairkit.qinfo.create_choi_repr", "input_dtype", "Create the Choi representation of a linear map with input checks."], [41, 2, 2, 0, "linear_map", "A function representing the linear map, which takes and returns a square matrix."]], "quairkit.qinfo.create_matrix": [[41, 2, 2, 0, "input_dim", "The dimension of the input space."], [41, 2, 2, "quairkit.qinfo.create_matrix", "input_dtype", "Create a matrix representation of a linear map without needing to specify the output dimension."], [41, 2, 2, 0, "linear_map", "A function representing the linear map, which takes an input_dim-dimensional vector and returns a vector."]], "quairkit.qinfo.dagger": [[41, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.decomp_1qubit": [[41, 2, 2, 0, "return_global", "If set to True, the global phase angle alpha is also returned."], [41, 2, 2, 0, "unitary", "A batch of 2x2 unitary matrices representing single-qubit gates, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.decomp_ctrl_1qubit": [[41, 2, 2, 0, "unitary", "A 2x2 unitary matrix representing the single-qubit gate, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.diamond_norm": [[41, 2, 2, 0, "channel_repr", "A Channel or a torch.Tensor instance."], [41, 2, 2, 0, "dim_io", "The input and output dimensions."], [41, 2, 2, "quairkit.qinfo.diamond_norm", "kwargs", "Calculate the diamond norm of input."]], "quairkit.qinfo.direct_sum": [[41, 2, 2, 0, "A", "m \\times n matrix"], [41, 2, 2, 0, "B", "p \\times q matrix"]], "quairkit.qinfo.gate_fidelity": [[41, 2, 2, 0, "U", "quantum gate U  in matrix form"], [41, 2, 2, 0, "V", "quantum gate V  in matrix form"]], "quairkit.qinfo.gradient": [[41, 2, 2, 0, "loss_function", "A loss function to compute the gradient."], [41, 2, 2, 0, "n", "The number of iterations for gradient computation."], [41, 2, 2, 0, "var", "A vector of shape (m,1) as the input variables for the loss function."]], "quairkit.qinfo.herm_transform": [[41, 2, 2, 0, "fcn", "function f that can be expanded by Taylor series"], [41, 2, 2, 0, "ignore_zero", "whether ignore eigenspaces with zero eigenvalue, defaults to be False"], [41, 2, 2, 0, "mat", "hermitian matrix H"]], "quairkit.qinfo.hessian": [[41, 2, 2, 0, "loss_function", "The loss function to compute the Hessian."], [41, 2, 2, 0, "var", "A matrix of shape (n, m) as input variables for the loss function."]], "quairkit.qinfo.is_choi": [[41, 2, 2, 0, "op", "matrix form of the linear operation."]], "quairkit.qinfo.is_density_matrix": [[41, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [41, 2, 2, 0, "rho", "density matrix candidate"], [41, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."]], "quairkit.qinfo.is_hermitian": [[41, 2, 2, 0, "eps", "tolerance of error"], [41, 2, 2, 0, "mat", "hermitian candidate P"], [41, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."]], "quairkit.qinfo.is_linear": [[41, 2, 2, 0, "eps", "An optional tolerance value used to determine if the function's behavior is close enough to linear."], [41, 2, 2, 0, "func", "A callable function to be tested."], [41, 2, 2, 0, "info", "A parameter specifying the shape of the input for 'func'."], [41, 2, 2, "quairkit.qinfo.is_linear", "input_dtype", "Check if the provided function 'func' is linear."]], "quairkit.qinfo.is_positive": [[41, 2, 2, 0, "eps", "tolerance of error"], [41, 2, 2, 0, "mat", "positive operator candidate P"], [41, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."]], "quairkit.qinfo.is_ppt": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.is_projector": [[41, 2, 2, 0, "eps", "tolerance of error"], [41, 2, 2, 0, "mat", "projector candidate P"]], "quairkit.qinfo.is_state_vector": [[41, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [41, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."], [41, 2, 2, 0, "vec", "state vector candidate x"]], "quairkit.qinfo.is_unitary": [[41, 2, 2, 0, "eps", "tolerance of error"], [41, 2, 2, 0, "mat", "unitary candidate P"]], "quairkit.qinfo.logarithmic_negativity": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.logm": [[41, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.negativity": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.p_norm": [[41, 2, 2, 0, "mat", "matrix"], [41, 2, 2, 0, "p", "p-norm parameter"]], "quairkit.qinfo.partial_trace": [[41, 2, 2, 0, "A_or_B", "1 or 2."], [41, 2, 2, 0, "dim1", "The dimension of system A."], [41, 2, 2, 0, "dim2", "The dimension of system B."], [41, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.partial_trace_discontiguous": [[41, 2, 2, 0, "preserve_qubits", "Remaining qubits, default is None, indicate all qubits remain."], [41, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.partial_transpose": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."], [41, 2, 2, 0, "n", "Number of qubits of subsystem A, with qubit indices as [0, 1, ..., n-1]"]], "quairkit.qinfo.partial_transpose_2": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."], [41, 2, 2, 0, "sub_system", "1 or 2."]], "quairkit.qinfo.pauli_decomposition": [[41, 2, 2, 0, "mat", "the matrix to be decomposed"]], "quairkit.qinfo.pauli_str_convertor": [[41, 2, 2, 0, "observable", "The observable to be concatenated with coefficient 1."]], "quairkit.qinfo.permute_systems": [[41, 2, 2, "quairkit.qinfo.permute_systems", "dim_list", "Permute quantum system based on a permute list"], [41, 2, 2, 0, "mat", "A given matrix representation which is usually a quantum state."], [41, 2, 2, "quairkit.qinfo.permute_systems", "perm_list", "Permute quantum system based on a permute list"]], "quairkit.qinfo.prob_sample": [[41, 2, 2, 0, "binary", "Whether the sampled result is recorded as binary."], [41, 2, 2, 0, "distribution", "The probability distribution."], [41, 2, 2, 0, "proportional", "Whether the counts are shown in proportion"], [41, 2, 2, 0, "shots", "The number of shots."]], "quairkit.qinfo.purity": [[41, 2, 2, 0, "rho", "Density matrix form of the quantum state."]], "quairkit.qinfo.relative_entropy": [[41, 2, 2, 0, "base", "The base of logarithm."], [41, 2, 2, 0, "rho", "Density matrix form of the quantum state."], [41, 2, 2, 0, "sigma", "Density matrix form of the quantum state."]], "quairkit.qinfo.schmidt_decompose": [[41, 2, 2, 0, "psi", "State vector form of the quantum state, with shape (2**n)"], [41, 2, 2, 0, "sys_A", "Qubit indices to be included in subsystem A (other qubits are included in subsystem B), default are the first half qubits of \\lvert \\psi\\rangle"]], "quairkit.qinfo.sqrtm": [[41, 2, 2, "quairkit.qinfo.sqrtm", "mat", "Calculate square root of a matrix"]], "quairkit.qinfo.state_fidelity": [[41, 2, 2, 0, "rho", "a quantum state."], [41, 2, 2, 0, "sigma", "a quantum state."]], "quairkit.qinfo.trace": [[41, 2, 2, 0, "axis1", "The first axis of the 2-D sub-tensors along which the diagonals should be taken."], [41, 2, 2, 0, "axis2", "The second axis of the 2-D sub-tensors along which the diagonals should be taken."], [41, 2, 2, 0, "mat", "Input tensor, from which the diagonals are taken."]], "quairkit.qinfo.trace_distance": [[41, 2, 2, 0, "rho", "a quantum state."], [41, 2, 2, 0, "sigma", "a quantum state."]], "quairkit.qinfo.trace_norm": [[41, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.von_neumann_entropy": [[41, 2, 2, 0, "base", "The base of logarithm."], [41, 2, 2, 0, "rho", "Density matrix form of the quantum state."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:attribute"}, "terms": {"": [1, 3, 4, 8, 11, 13, 14, 15, 16, 18, 20, 21, 24, 31, 33, 36, 38, 41], "0": [0, 1, 3, 8, 11, 13, 17, 19, 20, 21, 22, 24, 31, 36, 37, 38, 41, 42], "00": [0, 3, 24, 36, 42], "0000": [1, 42], "0000e": 0, "0000ff": 17, "0000j": 1, "0001": 41, "0003004074": 3, "0005207062": 3, "00633": 7, "0068": 3, "00j": 0, "01": [0, 1, 42], "0128": 3, "0159j": 1, "01j": [0, 1, 42], "02": [0, 1, 42], "02109": 31, "0213": 1, "0223": 1, "0225": 1, "0228": 1, "0230": 1, "0234": 1, "0249": 1, "0252": 1, "03": [0, 1, 42], "0351": 1, "0372j": 1, "03j": [0, 1, 42], "04": [0, 1, 42], "04672": 41, "0472j": 1, "04j": [0, 1, 42], "05": [0, 1, 41], "0513": 1, "0526": 0, "0547": 0, "05j": [0, 1, 42], "06": [1, 3, 41, 42], "0609050v2": 21, "0629": 0, "0678": 1, "06j": [1, 42], "07": [0, 1, 42], "0765": 1, "07j": [0, 1, 42], "08": [0, 1, 42], "08143908571771741": 0, "08153820": 1, "0886j": 1, "08j": [0, 1, 42], "09": [0, 1, 42], "0943": 1, "09j": [0, 1, 42], "1": [0, 1, 3, 7, 8, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 31, 34, 35, 36, 37, 38, 41, 42], "10": [0, 3, 4, 31, 41, 42], "100": [1, 8], "1000": 42, "101": 1, "1017": [0, 31], "1018": 3, "1019": 3, "102": [1, 31], "1024": [3, 41], "103": 1, "104": 1, "105": 1, "106": 1, "107": 1, "108": 1, "10876": 7, "109": 1, "10f": 3, "10th": 31, "11": [0, 3, 24, 41, 42], "110": 1, "1100j": 1, "1101": 36, "1102e": 0, "111": 1, "112": 1, "113": 1, "114": 1, "1152": 3, "1195": 3, "1197": 1, "11j": [0, 1, 42], "12": [0, 1, 3, 41, 42], "120": 1, "121": 3, "1248": 3, "12j": [0, 1], "13": [0, 1, 41, 42], "131": 3, "1367": 3, "13j": [0, 42], "14": [0, 41, 42], "140": [1, 3], "14351884": 1, "1450": 0, "14867520": 1, "14j": [0, 42], "15": [0, 8, 20, 37, 41, 42], "15248334": 1, "15756059": 1, "1583": 1, "15873241": 1, "15914619": 1, "15918970": 1, "15919995": 1, "15920043": 1, "15920222": 1, "15j": [0, 42], "16": [0, 1, 41, 42], "160": 1, "16j": [0, 42], "17": [0, 41, 42], "1751": 0, "17j": [0, 42], "18": [0, 42], "180": 1, "1804": 7, "18j": 0, "19": [0, 1], "1905": 7, "199": 1, "19j": 42, "1e": 41, "1j": [0, 8, 37, 42], "2": [0, 1, 3, 8, 11, 16, 19, 20, 21, 23, 24, 30, 37, 38, 41, 42], "20": 1, "200": 1, "2000": 41, "2001": 3, "2009": 41, "2010": 31, "2011": 41, "2020": 41, "2067j": 1, "2084": 0, "21": 0, "2101": 31, "217": 41, "21j": [0, 1], "22": 42, "2243": 0, "23": [0, 1, 42], "2336": 0, "238": 41, "23j": 0, "24": 0, "2490e": 0, "24j": 42, "25": 0, "2544": 3, "26": [0, 42], "2620": 0, "2624": 0, "2624j": 1, "26j": [0, 1], "27": 0, "27j": [0, 42], "28": [0, 42], "2814": 0, "283185307179586": 8, "2855": 1, "28j": 0, "29": [0, 1, 42], "2901163604": 42, "29j": 0, "2j": 0, "2nd": 41, "2x2": 41, "3": [0, 1, 3, 4, 11, 17, 19, 20, 21, 23, 24, 41, 42], "30": 17, "31": [0, 42], "32": 42, "32j": 42, "33": 0, "33j": 42, "34": [0, 3, 42], "3431": 0, "34j": 42, "35": 0, "3557": 1, "35j": 0, "36": [0, 42], "360": 17, "36j": 0, "3775": 1, "37j": 42, "38": [0, 42], "38j": 0, "39": [0, 3, 42], "39j": 0, "3d": 0, "3j": 0, "3p": [22, 31], "3rd": 41, "3x": 21, "4": [0, 1, 3, 7, 8, 20, 22, 23, 24, 31, 38, 41, 42], "40": 1, "4081": 0, "41": 0, "44": [0, 42], "44j": 42, "45": [0, 17], "4521": 0, "46": 0, "46j": 0, "47j": 0, "49": [0, 42], "49j": 42, "4f": 1, "4j": [0, 3], "5": [0, 1, 3, 21, 41, 42], "5000": 3, "51": 42, "51j": 42, "52j": 42, "53": 42, "53j": 42, "55": 0, "5511e": 0, "56": 0, "5772": 8, "58": [0, 3], "58j": 0, "5952776079171331": 0, "5th": 1, "5y": 21, "6": [0, 3, 8, 41, 42], "60": 1, "604": 3, "61": 42, "6122j": 1, "61j": 42, "62": 0, "63": 0, "6569": 0, "65j": 0, "66": 0, "6660": 1, "67": 42, "7": [0, 3, 17, 41, 42], "72": 0, "73": 42, "7376": 0, "7380": 0, "7456": 3, "78j": 42, "7j": 3, "8": [0, 3, 4, 31, 41, 42], "80": 1, "81": [0, 8, 20, 37], "8633": 3, "8752": 3, "88": 1, "8805": 3, "8807": 1, "884": 3, "8848": 3, "889726792": 3, "893": 3, "8f": 1, "9": [0, 3, 41, 42], "903": 3, "9515": 1, "9670744798724846": 0, "98": 3, "9872": 3, "99": 42, "9932": 3, "9955": 1, "9971": 1, "A": [3, 7, 11, 19, 20, 23, 24, 31, 32, 35, 37, 38, 41, 42], "As": [3, 4], "By": 1, "For": [0, 1, 3, 8, 16, 31, 37, 41], "If": [1, 3, 8, 11, 13, 21, 24, 27, 30, 36, 40, 41, 42], "In": [0, 1, 3, 36, 42], "Ising": 19, "It": [1, 4, 24, 40, 41], "Its": [8, 24, 31, 41], "No": 1, "Of": [18, 20], "One": [0, 8, 37, 42], "Or": 42, "Such": [3, 21, 31], "The": [0, 1, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "There": 3, "These": [3, 23], "To": 17, "_": [0, 42], "__circuit_plot_param": 39, "__init__": 3, "_data": 13, "_m": 3, "a_or_b": 41, "ab": [7, 31], "about": [8, 13, 37, 38, 40], "abov": [3, 41], "abs_norm": [4, 41], "abstract": 13, "accept": [3, 41, 42], "access": [1, 23], "across": [1, 3], "act": [0, 3, 11, 13, 30, 31, 32, 34, 35], "activ": [1, 4], "ad": [1, 6], "adam": 1, "add": [0, 8, 37], "adjust": 3, "advanc": 1, "affect": 42, "after": [1, 3, 13, 36], "algorithm": 4, "alia": 37, "align": [8, 19, 20, 37, 38], "all": [1, 3, 4, 7, 8, 11, 13, 23, 24, 27, 34, 35, 41], "allclos": 0, "allow": [16, 27], "along": [13, 23, 41], "alpha": 41, "alpha_": 19, "also": [0, 1, 3, 4, 13, 41], "alwai": 3, "amplitud": [8, 22, 31, 36], "amplitude_damp": 8, "amplitude_damping_krau": [18, 22], "amplitudedamp": [29, 31], "amplitudeencod": [33, 36], "an": [0, 3, 6, 8, 13, 16, 17, 21, 22, 24, 35, 41], "ancilla": 41, "angl": [7, 8, 17, 36, 41], "angleencod": [33, 36], "ani": [34, 39], "anniversari": 31, "anoth": 14, "ansatz": [4, 39], "answer": 8, "api": 1, "appdata": 42, "append": [1, 6], "appli": [1, 3, 7, 8, 13, 35, 36, 37, 38, 41], "approach": 41, "ar": [1, 3, 4, 8, 13, 16, 23, 24, 27, 31, 34, 35, 36, 37, 38, 41, 42], "arang": [1, 41], "arbitrarili": 41, "architectur": 4, "are_qubit": [13, 42], "are_qutrit": [13, 42], "arg": [16, 41], "arg0": 8, "arg1": 8, "argument": [1, 3, 6, 8], "arrai": [13, 14, 15, 41], "arrow": 17, "arxiv": [7, 21, 31, 41], "assert": 13, "assum": [8, 36], "attribut": [1, 3], "automat": [11, 16, 42], "avail": [1, 13, 42], "avg_tim": 1, "ax": [34, 41], "axi": [8, 37, 38, 41], "axis1": 41, "axis2": 41, "b": [23, 24, 41], "backend": [0, 1, 3, 8, 9, 10, 12, 16, 21, 24, 26, 27, 42], "backward": 1, "baidu": 4, "bar": 17, "base": [3, 4, 7, 8, 9, 13, 20, 28, 29, 33, 40, 41], "bash": 4, "basi": [0, 3, 8, 11, 13, 20, 23, 24, 27, 36, 40, 41], "basic": [10, 30, 34], "basisencod": [33, 36], "batch": [13, 16, 21, 41, 42], "batch_cir": 0, "batch_dim": 13, "batch_siz": [0, 3], "been": 31, "befor": [3, 36], "begin": [8, 19, 20, 22, 31, 37, 38], "behav": 41, "behavior": [41, 42], "being": 3, "bell": [23, 24], "bell_basi": [18, 23], "bell_diagonal_st": [18, 24], "bell_stat": [18, 24, 42], "below": [0, 20], "beta": 41, "beta_": 19, "beta_k": 19, "between": [16, 17, 26, 41], "binari": [3, 41], "bit": [1, 8, 22, 31], "bit_flip": 8, "bit_flip_krau": [18, 22], "bit_phase_flip": [1, 8], "bit_phase_flip_krau": [18, 22], "bitflip": [29, 31], "bitphaseflip": [29, 31], "black": 17, "bloch": 17, "block": [21, 41], "block_enc_herm": [4, 41], "blue": 17, "bmatrix": [8, 20, 22, 31, 37, 38], "bool": [8, 11, 13, 17, 21, 27, 30, 34, 35, 37, 38, 40, 41], "boolean": [20, 41], "both": [3, 13], "bound": 41, "bra": [13, 42], "broadcast": [3, 13], "c": [23, 41, 42], "calcul": [8, 11, 16, 40, 41], "call": [0, 1, 3, 14, 34, 42], "callabl": [20, 34, 35, 41], "cambridg": [3, 31], "can": [0, 1, 3, 6, 10, 11, 13, 16, 26, 27, 30, 36, 41, 42], "candid": 41, "cannot": [1, 3, 8, 13], "care": 16, "case": [0, 1, 13, 42], "caus": [8, 41], "cbo9780511976667": 31, "ccx": [8, 33, 37], "cd": 4, "cdot": 20, "chang": [1, 3, 13, 42], "channel": [0, 1, 4, 8, 21, 22, 28, 41], "channel_repr": 41, "channel_repr_convert": [4, 41], "character": 0, "check": [0, 4, 11, 13, 30, 34, 41], "check_leg": [30, 34], "choi": [0, 8, 21, 22, 30, 32, 41, 42], "choi_channel": [0, 1, 8], "choi_repr": [8, 30, 32], "choirepr": [29, 32, 41], "choos": [8, 40], "chuang": [3, 31, 41], "cir": [0, 1, 8], "circuit": [3, 4, 7, 34, 35, 37, 39], "clariti": 0, "class": [0, 1, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42], "classic": [4, 36], "classifi": 10, "clone": [4, 13, 42], "close": 41, "cloud": [4, 42], "cmap": 17, "cnot": [1, 7, 8, 18, 20, 33, 37], "cnot_gat": [18, 20], "cnot_idx": 37, "co": [8, 20, 37, 38], "code": [0, 4, 41], "coeffici": [8, 11, 22, 41], "collaps": [0, 3, 8, 13, 28, 40], "collapsed_st": [0, 3], "collect": [3, 31, 37, 38], "color": 17, "color_schem": 17, "com": [4, 8, 20], "come": 3, "common": [16, 19, 24, 28, 29, 42], "commun": 41, "complet": [3, 24, 30, 34, 41], "completely_mixed_comput": [18, 24], "complex": 7, "complex128": [0, 3, 10, 42], "complex64": [10, 20, 42], "complex_block_lay": [1, 8], "complex_entangled_lay": [1, 8], "complexblocklay": [5, 7], "complexentangledlay": [5, 7], "compon": 41, "compos": [23, 27, 41], "compress": 11, "comput": [1, 3, 4, 13, 19, 23, 24, 26, 27, 31, 40, 41], "computational_basi": [18, 24], "concaten": [8, 41], "conda": 4, "consid": 13, "consist": [7, 8, 36], "const_t": [8, 22, 31], "constant": 1, "construct": [11, 20, 41], "construct_h_matrix": 11, "constructor": 6, "consult": 17, "contain": [1, 4, 5, 11, 13, 21, 24, 41], "content": [0, 1, 3, 42], "contributor": 4, "control": [8, 35, 37, 41], "control_oracl": [0, 1, 8], "controloracl": [33, 35], "convers": 41, "convert": [13, 41, 42], "copi": [13, 39], "core": [3, 4, 42], "corollari": 41, "correct": 41, "correspond": [8, 11, 13, 22, 31, 40, 41], "could": [11, 34], "count": 41, "cp": [8, 18, 20, 33, 37], "cp_gate": [18, 20], "cpu": 42, "cr_x": [8, 20], "cr_y": [8, 20], "cr_z": [8, 20], "creat": [1, 4, 11, 41, 42], "create_choi_repr": [4, 41], "create_matrix": [4, 41], "crx": [8, 18, 20, 33, 37], "crx_gate": [18, 20], "cry": [8, 18, 20, 33, 37], "cry_gat": [18, 20], "crz": [8, 18, 20, 33, 37], "crz_gate": [18, 20], "cswap": [8, 18, 20, 33, 37], "cswap_gat": [18, 20], "cu": [8, 18, 20, 33, 37], "cu_gat": [18, 20], "cuda": [10, 42], "current": [8, 10, 13, 20, 31, 41], "custom": [1, 8, 28, 29, 33, 34], "cut": 4, "cvx": 41, "cx": [1, 33, 37], "cy": [1, 8, 18, 20, 33, 37], "cy_gat": [18, 20], "cycl": [1, 8, 37], "cz": [8, 18, 20, 33, 37], "cz_gate": [18, 20], "d": [13, 14, 15, 16, 20, 22, 23, 24, 31, 41, 42], "d1": [16, 42], "d_": 30, "dagger": [1, 3, 4, 8, 13, 20, 38, 41], "damp": [8, 22, 31], "data": [10, 13, 14, 15, 16, 18, 20, 21, 22, 30, 36, 41, 42], "databas": [0, 1, 3, 4, 41, 42], "datatyp": 16, "decid": 11, "decim": 3, "decomp_1qubit": [4, 41], "decomp_ctrl_1qubit": [4, 41], "decompos": [0, 11, 13, 27, 41], "decompose_pauli_word": 11, "decompose_with_sit": 11, "decomposit": 41, "default": [1, 3, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42], "defin": [1, 23, 31, 41], "definit": 41, "delta": 41, "demo": 1, "demonstr": 3, "densiti": [13, 14, 16, 17, 21, 24, 30, 41, 42], "density_matrix": [0, 1, 3, 12, 13, 16, 17, 42], "density_op": 41, "density_op_random": 41, "depend": 8, "depolar": [1, 8, 22, 29, 31], "depolarizing_krau": [0, 18, 22], "depth": [1, 7, 8, 35], "describ": 3, "descript": [8, 37], "design": 4, "desir": [0, 8, 40], "desired_result": [0, 3, 8, 27, 40], "detail": [8, 13], "determin": [11, 16, 30, 34, 41], "dev": 3, "develop": 4, "devic": [10, 13, 20, 31, 37, 42], "diagon": [24, 41], "diamond": 41, "diamond_norm": [4, 41], "dict": [6, 7, 8, 27, 34, 35, 39, 41], "dictionari": [3, 39, 41], "differ": [1, 11], "dim": [0, 13, 20, 23, 41, 42], "dim0": 17, "dim1": [17, 41], "dim2": 41, "dim_io": 41, "dim_list": 41, "dimens": [0, 1, 3, 13, 14, 15, 16, 20, 23, 30, 41, 42], "dimension": [20, 41], "direct": [41, 42], "direct_sum": [4, 41], "directli": [1, 3], "displai": [8, 17, 34, 39], "display_in_circuit": 34, "distanc": [4, 17, 25, 41], "distinguish": [3, 13], "distort": 8, "distribut": [3, 41], "divid": 21, "dn": [16, 42], "docstr": 13, "document": 1, "doe": [3, 8, 13, 40, 41, 42], "doi": 31, "dot": 8, "download": 4, "dpi": 8, "drive": 7, "dtype": [10, 13, 16, 20, 22, 42], "dynam": [1, 8], "e": [3, 4, 7, 8, 11, 13, 19, 20, 23, 27, 30, 34, 35, 37, 38, 41], "e_": 24, "e_0": [22, 31], "e_1": [22, 31], "e_2": [22, 31], "e_3": [22, 31], "e_4": [22, 31], "e_k": [22, 31], "e_n": 41, "each": [0, 3, 8, 11, 13, 14, 15, 17, 23, 24, 27, 31, 41], "easili": 42, "edg": [4, 7, 19], "edit": 31, "effici": 3, "eigenbasi": [3, 23], "eigenspac": 41, "eigenst": [8, 40], "eigenvalu": 41, "eigenvector": 23, "eigh": 41, "either": [3, 41], "element": [4, 11, 13, 17, 24, 39, 41, 42], "encod": [16, 21, 28, 33, 41], "encoding_g": 36, "end": [6, 8, 17, 19, 20, 22, 31, 37, 38], "engag": 4, "enough": 41, "entangl": [7, 8], "entir": [1, 23], "entri": 8, "entropi": 41, "environ": 4, "ep": 41, "equal": [17, 31], "equat": [3, 41], "equival": 3, "error": [1, 3, 13, 41], "essenti": 1, "evolv": [13, 42], "exampl": [3, 16, 41, 42], "except": [3, 24, 42], "excit": [8, 31], "exclud": 11, "exec_tim": [8, 22, 31], "execut": [8, 22, 31], "exp": 20, "expand": [13, 41], "expand_a": 13, "expec_v": [0, 1, 13], "expect": [0, 1, 13, 14, 17, 27], "expecv": [0, 25, 27], "experi": 3, "explor": 4, "extend": [6, 7, 8], "ey": [18, 20], "eye_g": [18, 20], "f": [1, 3, 20, 41], "factor": 1, "fals": [3, 8, 11, 13, 17, 21, 27, 34, 35, 37, 38, 40, 41, 42], "fcn": 41, "featur": [0, 31, 36], "fidel": [26, 41], "figur": [0, 8, 39], "file": [3, 4, 6, 7, 8, 14, 15, 16, 17, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42], "filenam": 17, "find": 1, "finish": 4, "first": [1, 3, 4, 8, 16, 17, 23, 41], "fit": 13, "flag": 8, "flatten": 8, "flexibl": 4, "flip": [1, 8, 22, 31], "float": [7, 8, 10, 11, 17, 22, 24, 31, 34, 35, 37, 38, 39, 41], "focus": 4, "folder": 4, "follow": [0, 1, 3, 4, 7, 10, 11, 21, 42], "font": 8, "form": [8, 11, 13, 14, 15, 17, 20, 21, 22, 24, 34, 37, 38, 41, 42], "format": [3, 13], "formula": 31, "forward": [8, 26, 27, 40], "found": 1, "four": [3, 23], "fourier": [20, 23], "frac": [3, 8, 20, 24, 37, 38, 41], "framework": 4, "fredkin": [8, 37], "from": [0, 1, 3, 4, 7, 13, 14, 15, 17, 21, 41, 42], "full": [8, 21, 27, 31, 36, 38, 40], "fulli": 17, "func": [18, 20, 41], "function": [0, 1, 4, 9, 10, 13, 14, 16, 17, 18, 20, 21, 24, 26, 27, 34, 35, 39, 40, 41, 42], "further": [1, 42], "futur": [8, 40], "g": [11, 20, 41], "galleri": 8, "gamma": [8, 20, 22, 31, 37, 41], "gamma_": 19, "gate": [0, 4, 7, 8, 20, 22, 28, 31, 41], "gate_fidel": [4, 41], "gate_histori": [7, 8, 34], "gate_history_gener": 34, "gate_info": [34, 35], "gate_nam": [1, 8], "gell": 23, "gell_mann": [18, 23], "gellmann": 20, "gener": [1, 3, 8, 13, 16, 18, 20, 21, 22, 23, 24, 31, 34, 35, 41, 42], "generalized_amplitude_damp": 8, "generalized_amplitude_damping_krau": [18, 22], "generalized_depolar": 8, "generalized_depolarizing_krau": [18, 22], "generalizedamplitudedamp": [29, 31], "generalizeddepolar": [29, 31], "generalizedgel": 20, "get": [8, 10, 13, 23], "get_backend": [9, 10], "get_circuit_plot_param": [33, 39], "get_devic": [9, 10], "get_dtyp": [9, 10], "get_float_dtyp": [9, 10], "get_se": [9, 10], "ghz": 24, "ghz_state": [18, 24], "gif": 17, "git": 4, "github": 4, "give": 23, "given": [0, 3, 6, 13, 23, 30, 41], "global": [10, 16, 41], "go": 2, "gpu": 42, "grad": 8, "grad_fn": 1, "gradient": [4, 8, 17, 40, 41], "graph": 7, "greater": 17, "group": 1, "grover": 20, "grover_matrix": [18, 20], "gt": [1, 3, 42], "h": [0, 1, 8, 18, 20, 33, 38, 41], "h_": 19, "h_gate": [18, 20], "ha": [17, 31, 41, 42], "haar": 21, "haar_density_oper": [18, 21], "haar_orthogon": [18, 21], "haar_state_vector": [18, 21, 42], "haar_unitari": [18, 21], "hadamard": [1, 7, 8, 38], "half": 41, "hamiltonian": [0, 1, 4, 9, 13, 18, 21, 27], "happen": [3, 8], "hard": 1, "have": [1, 8], "heisenberg": [19, 23], "heisenberg_hamiltonian": [18, 19], "heisenberg_weyl": [18, 23], "here": [1, 3, 8, 13, 20], "herm_transform": [4, 41], "hermitian": [21, 41], "hessian": [4, 41], "high": 41, "histori": [6, 7, 8, 34, 35], "hold": 41, "home": [2, 3], "horizont": 34, "how": [0, 1, 3, 42], "howev": [1, 3, 13, 42], "html": [8, 20], "http": [4, 7, 8, 20, 31], "i": [0, 1, 3, 4, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 34, 35, 36, 37, 38, 40, 41, 42], "i_a": 41, "i_b": 41, "idea": 3, "idx": 8, "if_print": [8, 40], "ignor": 41, "ignore_zero": 41, "iix": 11, "illustr": 0, "imag": [8, 16], "image_filepath": 16, "image_to_density_matrix": [12, 16], "immedi": 3, "implement": [8, 10, 12, 13, 21, 24, 31, 35, 40, 41], "import": [0, 1, 3, 41, 42], "inch": 8, "includ": 41, "incorpor": 4, "index": [1, 3, 8, 11, 13, 17, 23, 24, 27, 37, 42], "index_select": [13, 42], "indic": [3, 7, 8, 11, 13, 23, 30, 31, 32, 34, 35, 36, 37, 38, 41], "info": 41, "inform": [1, 3, 4, 7, 8, 11, 13, 31, 34, 35, 40, 41], "inher": 1, "init": 14, "init_st": 17, "initi": [0, 1, 3, 6, 8, 17], "initializer_typ": 8, "input": [0, 1, 3, 8, 11, 13, 14, 16, 17, 20, 26, 27, 30, 31, 34, 35, 36, 40, 41, 42], "input_dim": 41, "input_dtyp": 41, "insert": 1, "instal": [4, 8], "instanc": [3, 7, 8, 16, 30, 34, 41, 42], "instanti": 11, "int": [1, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41], "integ": [13, 16, 23, 41], "integr": 4, "interfac": [4, 26, 27, 34], "invers": [8, 38], "ion": 37, "ipykernel_70098": 3, "ipykernel_8428": 42, "iqp": 36, "iqpencod": [33, 36], "is_batch": 41, "is_choi": [4, 41], "is_density_matrix": [4, 41], "is_hermitian": [4, 41], "is_linear": [4, 41], "is_posit": [4, 41], "is_povm": [3, 13], "is_ppt": [4, 41], "is_projector": [4, 41], "is_real": [21, 42], "is_state_vector": [4, 41], "is_tensor_input": 41, "is_unitari": [4, 21, 41], "is_xxx": 13, "isaac": 3, "isdynam": 8, "ising_hamiltonian": [18, 19], "isotrop": [24, 42], "isotropic_st": [18, 24, 42], "item": [1, 11], "iter": [1, 6, 7, 8, 11, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41], "itr": 1, "its": [3, 4, 13, 21, 41, 42], "itself": 1, "izn": 24, "j": [0, 1, 3, 8, 13, 24, 41, 42], "jupyt": 4, "k": [19, 22, 31, 41], "keep": [0, 13], "keep_stat": [0, 3, 13, 27], "kei": 4, "ket": [13, 42], "keyword": 1, "khatri": 41, "known": 1, "krau": [0, 8, 13, 21, 22, 30, 31, 32, 41, 42], "kraus_channel": [0, 1, 8], "kraus_op": 8, "kraus_repr": [30, 32], "krausrepr": [29, 32], "kroneck": [16, 41], "kwarg": [34, 39, 40, 41], "l": [3, 31, 41], "lack": 3, "lam": 17, "lambda": [1, 8, 20, 37, 38], "langl": [3, 8, 13, 20, 24, 37, 42], "langle00": 24, "langle11": 24, "larger": [41, 42], "last": [3, 42], "latex": 8, "latex_nam": [1, 8], "layer": [4, 5, 6, 8, 35, 36, 37, 38], "ldot": 36, "le": 31, "learn": [1, 4, 42], "least": [16, 41], "left": 21, "legal": 41, "legitimaci": 11, "leiz": 3, "len": 0, "length": [20, 31, 42], "less": [3, 31], "librari": [4, 18, 19, 21, 24, 41], "like": 0, "linalg": [16, 41], "line": [3, 42], "linear": [7, 8, 13, 41], "linear_entangled_lay": [1, 8], "linear_map": 41, "linearentangledlay": [5, 7], "list": [0, 1, 6, 7, 8, 11, 13, 14, 15, 16, 17, 21, 22, 23, 24, 27, 30, 32, 34, 35, 37, 40, 41, 42], "list_depo": 0, "list_pvm": 3, "list_rho": 3, "list_x": 0, "local": [4, 42], "locat": 1, "log": 41, "logarithm": 41, "logarithmic_neg": [4, 41], "logic": [1, 31], "logm": [4, 41], "long": 8, "look": 42, "loss": [0, 1, 3, 4, 41], "loss_fcn": 1, "loss_funct": 41, "loss_list": 1, "lost": 42, "lr": 1, "lr_schedul": 1, "lt": [1, 3, 42], "lvert": 41, "m": [3, 8, 18, 20, 31, 33, 37, 41], "m_m": 3, "machan": 3, "machin": 4, "mai": [3, 8, 13, 41], "mainli": 3, "make": [3, 26, 27], "manipul": 1, "mann": 23, "mannmatrix": 20, "map": [20, 41], "mark": 41, "mat": 41, "match": [3, 41], "math": [21, 24], "mathbb": 23, "mathemat": 7, "mathit": [8, 20], "mathworld": 20, "matplotlib": [8, 34], "matric": [0, 4, 11, 20, 23, 41], "matrix": [1, 4, 7, 8, 11, 13, 14, 16, 17, 18, 21, 23, 24, 30, 32, 34, 37, 38, 41, 42], "matrix_a": 41, "matrix_b": 41, "matter": 30, "maxcut": 7, "mean": [1, 8, 10, 14, 16, 21, 27, 40, 41], "measur": [4, 8, 13, 25, 40], "measure_basi": [8, 27, 40], "measure_op": 27, "measured_op": 13, "memori": 13, "merg": 11, "messag": [13, 41], "method": 42, "mh": 0, "michael": 3, "microsecond": [8, 22, 31], "min": 1, "minimum": 4, "mix": [13, 14, 24, 42], "mixedst": [13, 14], "mixtur": 31, "mode": 30, "model": 1, "modern": 41, "modul": [0, 1, 3, 4, 5, 6, 10, 11, 12, 13, 25, 28, 29, 33, 42], "more": [1, 3, 4, 8, 13, 41, 42], "most": [3, 4, 42], "ms_gate": [18, 20], "multi": [1, 17, 37], "multi_qubit_g": [28, 33], "multipl": 3, "must": [8, 31, 37, 38, 41], "m\u00f8lmer": [8, 37], "n": [1, 3, 4, 13, 14, 15, 20, 21, 22, 23, 24, 31, 41], "n_qubit": 11, "n_term": 11, "name": [6, 8, 10, 13, 17], "nanosecond": [8, 22, 31], "natur": 41, "ndarrai": [8, 11, 13, 16, 17, 22, 41, 42], "need": [3, 7, 16, 30, 34, 41], "neg": [4, 41], "network": [0, 1, 4], "neumann": 41, "neural": [0, 1, 4], "new": [8, 13, 42], "new_stat": 42, "niel": 8, "nielsen": [3, 31, 41], "nkron": [4, 16, 41], "nn": 6, "node": 7, "nois": 1, "noisi": [30, 42], "non": [3, 41], "none": [3, 7, 8, 10, 11, 13, 14, 15, 16, 17, 20, 21, 22, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41], "norm": 41, "normal": [8, 13], "note": [1, 3, 36, 42], "notebook": 4, "notimpl": 40, "notimplementederror": [8, 21, 24, 26, 27, 30, 40, 41, 42], "now": 0, "np": [1, 17], "num_acted_param": [0, 34, 35], "num_acted_qubit": [30, 34], "num_block_qubit": 41, "num_itr": 1, "num_qubit": [0, 1, 3, 7, 8, 13, 20, 21, 22, 23, 24, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42], "num_repeat": 36, "num_system": [13, 42], "number": [0, 1, 7, 8, 11, 13, 17, 20, 21, 22, 23, 24, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42], "numel": [13, 42], "numpi": [10, 13, 16, 41, 42], "o": [1, 8, 21], "object": [1, 42], "observ": [0, 3, 11, 13, 21, 23, 27, 41], "obtain": [3, 16, 40], "occupi": 34, "occur": 3, "occurr": 3, "of_gat": [18, 20], "often": 3, "omega_n": 20, "omit": 8, "one": [0, 1, 3, 8, 24, 36, 40, 41, 42], "one_st": [18, 24], "ones_lik": [0, 1], "onli": [1, 3, 7, 8, 13, 16, 21, 23, 30, 36, 42], "op": [0, 3, 6, 13, 41], "oper": [4, 6, 8, 9, 10, 11, 13, 20, 22, 23, 41], "oper_histori": 6, "operatorlist": [5, 6], "oplu": 20, "opt": 1, "optim": [1, 26, 27], "option": [3, 13, 41], "oracl": [0, 1, 8, 20, 33, 35], "order": [6, 13, 14, 15, 41], "org": [7, 8, 31], "orthogon": [3, 21], "other": [8, 13, 16, 24, 40, 41], "otherwis": 41, "otim": [8, 20, 21, 37, 41], "out": [4, 13, 30], "outcom": 3, "output": [0, 1, 3, 8, 22, 30, 39, 41, 42], "output_st": [0, 1], "overload": 34, "p": [3, 8, 18, 20, 22, 24, 31, 33, 37, 38, 41], "p_": 24, "p_gate": [18, 20], "p_norm": [4, 41], "paddl": 4, "paddlepaddl": 4, "pair": 6, "paper": 7, "param": [0, 1, 8, 20, 34, 35, 37, 38], "param_shar": [8, 34, 35, 37, 38], "paramet": [0, 1, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41], "parameter": [0, 34, 35], "parametr": 1, "paramg": [33, 34], "paramoracl": [33, 35], "part": [1, 3], "partial": [13, 40, 41], "partial_trac": [4, 41], "partial_trace_discontigu": [4, 41], "partial_transpos": [4, 41], "partial_transpose_2": [4, 41], "partialst": [28, 40], "particular": [1, 3], "pass": [0, 6], "patch": 8, "path": [8, 16], "pauli": [0, 3, 8, 11, 22, 23, 31, 41], "pauli_basi": [18, 23], "pauli_channel": 8, "pauli_decomposit": [4, 41], "pauli_krau": [18, 22], "pauli_str": [0, 11, 23], "pauli_str_basi": [18, 23], "pauli_str_convertor": [4, 41], "pauli_str_povm": [3, 18, 23], "pauli_word": 11, "pauli_words_matrix": 11, "pauli_words_r": 11, "paulichannel": [29, 31], "pdf": 7, "per": [8, 13], "perform": 41, "perm": 41, "perm_list": 41, "permut": [41, 42], "permute_system": [4, 41], "ph": 21, "phase": [1, 8, 18, 20, 22, 23, 31, 41], "phase_damp": 8, "phase_damping_krau": [18, 22], "phase_flip": 8, "phase_flip_krau": [18, 22], "phase_g": [18, 20], "phase_space_point": [18, 23], "phasedamp": [29, 31], "phaseflip": [29, 31], "phi": [8, 17, 20, 24, 37, 38], "phi_": 24, "physic": 3, "pi": [7, 8, 20, 23, 37, 38], "pictur": 17, "pip": 4, "place": [34, 35], "plane": 17, "platform": [2, 4, 42], "pleas": [31, 42], "plot": [1, 8, 17, 34, 35], "plot_density_matrix_graph": [9, 17], "plot_multi_qubits_state_in_bloch_spher": [9, 17], "plot_rotation_in_bloch_spher": [9, 17], "plot_state_in_bloch_spher": [9, 17], "plot_width": 8, "plt": 8, "point": 23, "pop": 1, "posit": [1, 23, 34, 41], "post": 3, "postul": 3, "potenti": 3, "povm": [3, 13, 23], "pp": 41, "ppt": 41, "practic": 3, "pre": 25, "predecessor": 4, "predefin": 1, "preprint": 41, "preserv": 0, "preserve_qubit": 41, "press": [3, 31], "principl": 41, "print": [0, 1, 3, 8, 40, 42], "print_exc": [3, 42], "prob": [0, 3, 8, 22, 24, 31, 42], "prob_sampl": [3, 4, 41], "probabl": [1, 3, 8, 13, 22, 27, 31, 41], "problem": 7, "process": [8, 22, 31, 42], "product": [16, 41], "program": 41, "project": [0, 3, 4, 27], "projector": [3, 21, 41], "properli": 8, "properti": [6, 7, 8, 11, 13, 14, 15, 30, 34, 42], "proport": [3, 8, 41], "provid": [4, 25, 30, 34, 41], "psd": 41, "psi": [3, 24, 41], "psi_j": 42, "pure": [3, 13, 15, 24, 42], "purest": [13, 15], "puriti": [4, 41], "pvm": [0, 3, 27], "py": [3, 42], "python": [1, 4], "pytorch": 1, "q": [22, 31, 41], "qaoa": 7, "qaoalay": [5, 7], "qaoalayerweight": [5, 7], "qft": [1, 20, 23], "qft_basi": [18, 23], "qft_matrix": [1, 18, 20], "qinfo": [1, 3, 4, 13], "qkit": [0, 3], "qnn": 1, "quair": [2, 4, 42], "quantum": [4, 7, 8, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41], "quantumcomput": 8, "qubit": [0, 1, 3, 7, 8, 11, 13, 16, 17, 20, 21, 22, 23, 24, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42], "qubit_histori": 8, "qubit_num": 11, "qubits_idx": [0, 1, 3, 7, 8, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40], "qudit": [20, 23, 41], "quleaf": 27, "qutrit": [13, 16, 42], "r": [1, 24, 30, 31], "r_": [8, 20], "r_state": [18, 24], "r_x": [8, 20], "r_y": [8, 20], "r_z": [8, 20], "rais": [3, 8, 10, 13, 17, 21, 24, 26, 27, 30, 34, 37, 38, 40, 41, 42], "rand": [0, 1], "random": [1, 4, 8, 10, 18, 34, 35, 41, 42], "random_channel": [0, 18, 21, 42], "random_density_matrix": [18, 21, 41, 42], "random_hamiltonian_gener": [0, 1, 18, 21], "random_hermitian": [18, 21], "random_orthogonal_project": [18, 21], "random_pauli_str_gener": [18, 21], "random_st": [0, 1, 3, 18, 21, 42], "random_unitari": [0, 1, 18, 21, 42], "random_unitary_hermitian": [18, 21], "random_unitary_with_hermitian_block": [18, 21], "randomize_param": 8, "randomli": [1, 8, 21, 40], "rang": [0, 1, 8, 30, 31, 34, 35, 42], "rangl": [3, 8, 13, 20, 22, 24, 31, 36, 37, 41, 42], "rangle_": 24, "rank": [3, 13, 21, 30, 42], "rapid": 4, "ratio": 8, "readi": 6, "real": [4, 7, 21, 42], "real_block_lay": [1, 8], "real_entangled_lay": [1, 8], "realblocklay": [5, 7], "realentangledlay": [5, 7], "recent": [3, 42], "recogn": 3, "recommend": [0, 4], "record": 41, "red": 17, "reducelronplateau": 1, "refer": [8, 13, 20, 21, 31, 41], "referenc": 21, "rel": 41, "relat": [1, 4], "relative_entropi": [4, 41], "relax": [8, 22, 31], "remain": 41, "remov": [1, 41], "replac": [1, 8, 22, 31], "replacement_choi": [1, 18, 22], "replacementchannel": [29, 31], "repr_typ": [13, 42], "repres": [0, 1, 23, 32, 41, 42], "represent": [0, 1, 4, 7, 8, 13, 14, 15, 16, 18, 21, 30, 32, 41, 42], "requir": [8, 17, 34, 35, 37, 41], "research": 4, "reset": [1, 8, 13, 22, 31, 39, 40, 42], "reset_channel": 8, "reset_circuit_plot_param": [33, 39], "reset_krau": [1, 18, 22], "reset_sequ": 13, "resetchannel": [29, 31], "resetst": [28, 40], "reshap": 41, "resolut": 8, "resourc": 4, "respect": [1, 3, 8, 11, 13, 17, 23, 27, 41], "result": [3, 8, 13, 27, 40, 41], "retain": 3, "retriev": 42, "return": [0, 3, 6, 7, 8, 10, 11, 13, 16, 19, 20, 21, 22, 23, 24, 26, 27, 30, 34, 39, 40, 41], "return_glob": 41, "rho": [0, 3, 31, 41], "rho_test": 41, "rho_test_1": 41, "rho_test_2": 41, "rho_test_3": 41, "root": 41, "rotat": [7, 8, 17, 20, 37, 38, 41], "rotating_angl": 17, "rule": [1, 3, 13], "run": [1, 13, 30], "runtimeerror": 41, "runtimewarn": 41, "rx": [0, 1, 8, 18, 20, 33, 36, 37, 38], "rx_gate": [18, 20], "rxx": [8, 18, 20, 33, 37], "rxx_gate": [18, 20], "ry": [0, 1, 7, 8, 18, 20, 33, 36, 37, 38], "ry_gat": [18, 20], "ryi": [8, 18, 20, 33, 37], "ryy_gat": [18, 20], "rz": [0, 1, 7, 8, 18, 20, 33, 36, 37, 38], "rz_gate": [1, 18, 20], "rzz": [8, 18, 20, 33, 37], "rzz_gate": [18, 20], "s_gate": [18, 20], "s_state": [18, 24], "same": [3, 8, 13, 34, 35, 37, 38, 41], "sampl": [21, 27, 41], "satisfi": [3, 31], "save": [8, 10, 13], "save_gif": 17, "save_p": 17, "save_path": 8, "scalar": 39, "scale": [8, 39], "scale_circuit_plot_param": [33, 39], "schatten": 41, "schedul": 1, "schmidt": 41, "schmidt_decompos": [4, 41], "scienc": 4, "scratch": 1, "sdg": [8, 18, 20, 33, 38], "sdg_gate": [18, 20], "second": [0, 3, 16, 17, 41, 42], "see": [8, 13, 31, 42], "seed": 10, "select": [0, 1, 41], "self": 34, "semant": 1, "semi": 41, "semidefinit": 41, "sent": 42, "sequenc": [0, 1, 3, 8, 13, 42], "sequenti": [6, 8], "seri": 41, "set": [0, 1, 3, 4, 8, 10, 16, 17, 18, 34, 35, 39, 41], "set_backend": [9, 10], "set_circuit_plot_param": [33, 39], "set_color": 17, "set_devic": [9, 10], "set_dtyp": [0, 3, 9, 10], "set_gate_info": 34, "set_se": [9, 10], "setup": [1, 16], "sever": 42, "shape": [0, 3, 14, 15, 19, 20, 23, 30, 41, 42], "share": [8, 34, 35, 37, 38], "shift": [18, 20], "shift_gat": [18, 20], "shot": [3, 13, 41], "should": [0, 3, 8, 10, 21, 24, 30, 31, 36, 41], "show": [0, 8, 17], "show_arrow": 17, "shown": [3, 41], "sigma": [1, 22, 31, 41], "sigma_k": [22, 31], "sigx_p": 11, "sigy_p": 11, "sigz_p": 11, "similar": 1, "similarli": 0, "simpl": 3, "simpli": 11, "simplifi": 11, "simul": [4, 31], "sin": [8, 20, 37, 38], "sinc": [3, 13], "singl": [1, 3, 7, 8, 16, 34, 35, 37, 38, 41, 42], "single_qubit_g": [28, 33], "site": 11, "size": [0, 3, 11, 13, 17, 21, 41, 42], "so": 3, "some": 8, "soon": 40, "sourc": [4, 6, 7, 8, 14, 15, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41], "space": [3, 23, 41], "span": 23, "spars": 11, "special": [4, 28], "specif": 13, "specifi": [1, 3, 13, 16, 17, 27, 30, 34, 41], "sphere": 17, "spin": 11, "spinop": [9, 11], "sqrt": [3, 8, 20, 22, 24, 31, 37, 38, 41, 42], "sqrtm": [4, 41], "squar": 41, "squeezebackward1": 1, "st": 20, "stabl": 8, "stack": [0, 41, 42], "stackexchang": 8, "standard": 23, "start": [0, 17, 34, 42], "start_tim": [1, 3], "state": [0, 4, 8, 9, 17, 18, 21, 22, 23, 26, 27, 31, 36, 40, 41], "state_a": 16, "state_b": 16, "state_backend": [13, 16], "state_fidel": [4, 41], "state_vector": [0, 1, 3, 12, 13, 16, 24, 42], "statefidel": [25, 26], "statevector": 13, "static": 13, "std_basi": [18, 23], "step": 1, "stinespr": [8, 21, 30, 32, 41], "stinespring_channel": 8, "stinespring_mat": 32, "stinespring_repr": [8, 30], "stinespringrepr": [29, 32], "stop_gradi": 8, "store": [0, 3, 14, 15, 17], "str": [6, 7, 8, 10, 11, 13, 16, 17, 21, 22, 23, 27, 30, 31, 36, 37, 38, 40, 41], "string": [3, 11, 23, 27], "strongli": [7, 8], "style": 36, "sub": 41, "sub_system": 41, "subclass": 1, "sublay": 6, "subsystem": [13, 41, 42], "sum": [0, 31, 41], "sum_": [19, 24], "sum_ic_i": 41, "sum_m": 3, "sumeet": 41, "summar": 3, "superconduct": 31, "superposition_lay": 8, "superpositionlay": [5, 7], "support": [0, 1, 3, 8, 13, 26, 27, 40, 41, 42], "suppos": 1, "swap": [1, 8, 18, 20, 33, 37], "swap_gat": [18, 20], "sys_a": 41, "sys_dim": [13, 14, 15, 16, 41], "sys_idx": [13, 42], "system": [0, 1, 3, 8, 11, 13, 14, 15, 16, 23, 41, 42], "system_dim": 13, "system_seq": [13, 14, 15, 42], "s\u00f8rensen": [8, 37], "t": [8, 18, 20, 23, 33, 38], "t_1": [8, 22, 31], "t_2": [8, 22, 31], "t_a": 41, "t_gate": [18, 20], "tabl": [0, 1, 3, 16, 17, 42], "take": 41, "taken": 41, "target": [0, 13, 21, 26, 41, 42], "target_st": 26, "taylor": 41, "tdg": [8, 18, 20, 33, 38], "tdg_gate": [18, 20], "temp": 42, "templat": [4, 7], "tensor": [0, 1, 3, 6, 8, 10, 11, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42], "tensor_st": [12, 16], "term": [0, 11, 13, 21, 27], "test": 41, "tex": 8, "tex_demo": 8, "text": [1, 20, 22, 30, 31, 41], "text_labels_and_annot": 8, "textrm": 13, "th": [8, 24], "than": [3, 17, 31, 41, 42], "thei": [23, 42], "them": 1, "theoret": 4, "theori": 41, "thermal": [8, 22, 31], "thermal_relax": 8, "thermal_relaxation_krau": [18, 22], "thermalrelax": [29, 31], "theta": [8, 17, 20, 37, 38], "theta2": [8, 20, 37, 38], "thi": [0, 1, 3, 4, 6, 7, 8, 13, 14, 15, 16, 20, 21, 22, 26, 27, 30, 31, 32, 34, 35, 41, 42], "third": 42, "three": [0, 1, 3, 8, 20, 22, 31, 37], "thu": 1, "time": [1, 3, 4, 8, 21, 22, 23, 31, 41], "time_list": 1, "tmp": 3, "to_stat": [12, 16, 42], "todo": [8, 37], "toffoli": [8, 18, 20, 33, 37], "toffoli_g": [18, 20], "tol": 41, "toler": 41, "too": 8, "tool": [4, 17, 41], "torch": [0, 1, 3, 8, 10, 13, 16, 17, 20, 27, 37, 38, 41, 42], "total": [1, 7, 30, 31, 32, 34, 35, 36, 37, 38, 40], "tr": [0, 31, 41], "trace": [0, 4, 13, 17, 26, 41, 42], "trace_dist": [4, 41], "trace_norm": [4, 41], "traceback": [3, 42], "tracedist": [25, 26], "trainabl": 1, "transfer_stat": 8, "transform": [3, 13, 23, 41, 42], "transpos": [20, 41], "trap": 37, "true": [0, 3, 8, 11, 13, 17, 27, 30, 34, 41, 42], "try": [3, 42], "tupl": [7, 8, 11, 13, 17, 27, 41], "tutori": [0, 1, 2, 3, 4, 21, 42], "two": [1, 3, 8, 11, 16, 20, 22, 31, 37, 41, 42], "type": [8, 10, 11, 13, 16, 19, 20, 21, 22, 23, 24, 26, 27, 30, 34, 36, 39, 40, 41], "type_repr": 30, "typeerror": [8, 17, 30, 41], "u": [19, 20, 41], "u3": [1, 8, 18, 20, 33, 38], "u3_gat": [18, 20], "u_3": [8, 20], "uf": [18, 20], "uf_gat": [18, 20], "unabl": 8, "under": 3, "understand": 42, "unexpect": 30, "uniform": 8, "uniqu": 3, "unitari": [0, 1, 7, 8, 13, 20, 21, 34, 35, 41, 42], "unitary_matrix": [1, 8], "univers": [0, 1, 3, 8, 20, 31, 37], "universal2": [18, 20], "universal2_g": [18, 20], "universal3": [18, 20], "universal3_g": [18, 20], "universal_qudit": [8, 18, 20], "universal_three_qubit": [1, 8], "universal_two_qubit": [0, 1, 8], "universalqudit": [33, 37], "universalthreequbit": [33, 37], "universaltwoqubit": [33, 37], "unsqueez": 0, "unsupport": [30, 41], "updat": [1, 31, 39], "update_param": [1, 8], "upper": 21, "us": [0, 1, 3, 4, 7, 8, 10, 11, 14, 16, 20, 26, 27, 36, 41, 42], "use_spars": 11, "user": [11, 34, 42], "userwarn": 13, "usual": [0, 3, 41], "uv": [19, 41], "v": [19, 41], "valid": [13, 41], "valu": [0, 1, 8, 10, 13, 26, 27, 31, 41, 42], "valueerror": [3, 8, 10, 17, 30, 34, 37, 38, 41], "var": 41, "variabl": 41, "variat": 5, "variou": 13, "vec": [13, 41, 42], "vector": [13, 15, 17, 21, 23, 36, 41, 42], "verif": 4, "verifi": 41, "version": 31, "vertic": 19, "via": 3, "view": 17, "view_angl": 17, "view_dist": 17, "viewbackward0": 1, "visual": [4, 9, 28, 33], "vol": 3, "von": 41, "von_neumann_entropi": [4, 41], "w": 24, "w_state": [18, 24], "wai": [3, 4, 42], "want": [8, 40], "watrou": 41, "we": [0, 1, 3, 4, 8, 13, 42], "weak_superposition_lay": 8, "weakli": [7, 8], "weaksuperpositionlay": [5, 7], "weight": 7, "were": 20, "weyl": 23, "when": [1, 3, 8, 13, 14, 16, 23, 34, 37, 40, 42], "where": [0, 1, 3, 13, 19, 22, 23, 30, 31], "whether": [8, 11, 13, 17, 21, 27, 30, 34, 35, 37, 38, 40, 41], "which": [1, 7, 8, 10, 11, 13, 14, 17, 21, 26, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 41, 42], "which_qubit": 17, "whose": [24, 41], "width": [8, 17, 34], "wild": 41, "within": 41, "without": [1, 41], "wolfram": 20, "word": 11, "work": [0, 7], "world": 4, "worth": 1, "would": 42, "wrong": [21, 24, 26, 27], "x": [0, 1, 3, 8, 11, 17, 18, 20, 22, 23, 27, 31, 33, 34, 37, 38, 41], "x0": 21, "x1": [0, 41], "x3": 11, "x_gate": [18, 20], "x_i": 11, "x_k": 19, "x_u": 19, "x_v": 19, "xx": [8, 20], "xxx": 13, "xy": 19, "xy_hamiltonian": [18, 19], "y": [3, 8, 17, 18, 20, 22, 23, 27, 31, 33, 37, 38, 41], "y0": 21, "y1": 0, "y_gate": [18, 20], "y_i": 11, "y_u": 19, "y_v": 19, "yet": [1, 3], "you": [0, 1, 3, 8, 20, 26, 27, 40, 42], "your": 8, "yy": [8, 20], "z": [1, 3, 8, 11, 17, 18, 20, 21, 22, 23, 27, 31, 33, 37, 38, 40, 41], "z0": [11, 41], "z1": [0, 11, 41], "z2": 21, "z_gate": [18, 20], "z_i": 11, "z_u": 19, "z_v": 19, "zero": [1, 24, 41], "zero_grad": 1, "zero_st": [18, 24, 42], "ziz": 11, "zxzz": 11, "zz": [8, 20], "zzix": 11, "zzx": 11}, "titles": ["Batch Computation in QuAIRKit", "Constructing Quantum Circuits in QuAIRKit", "Welcome to QuAIRKit\u2019s documentation!", "Measuring quantum states in QuAIRKit", "quairkit", "quairkit.ansatz", "quairkit.ansatz.container", "quairkit.ansatz.layer", "quairkit.circuit", "quairkit.core", "quairkit.core.base", "quairkit.core.hamiltonian", "quairkit.core.state", "quairkit.core.state.backend", "quairkit.core.state.backend.density_matrix", "quairkit.core.state.backend.state_vector", "quairkit.core.state.state", "quairkit.core.visual", "quairkit.database", "quairkit.database.hamiltonian", "quairkit.database.matrix", "quairkit.database.random", "quairkit.database.representation", "quairkit.database.set", "quairkit.database.state", "quairkit.loss", "quairkit.loss.distance", "quairkit.loss.measure", "quairkit.operator", "quairkit.operator.channel", "quairkit.operator.channel.base", "quairkit.operator.channel.common", "quairkit.operator.channel.custom", "quairkit.operator.gate", "quairkit.operator.gate.base", "quairkit.operator.gate.custom", "quairkit.operator.gate.encoding", "quairkit.operator.gate.multi_qubit_gate", "quairkit.operator.gate.single_qubit_gate", "quairkit.operator.gate.visual", "quairkit.operator.special", "quairkit.qinfo", "Manipulation of Quantum States in QuAIRKit", "tutorials"], "titleterms": {"": 2, "add": 1, "ansatz": [5, 6, 7], "backend": [13, 14, 15], "base": [10, 30, 34], "batch": [0, 3], "channel": [29, 30, 31, 32], "circuit": [0, 1, 8], "common": 31, "comput": 0, "construct": 1, "contain": 6, "core": [9, 10, 11, 12, 13, 14, 15, 16, 17], "creation": 42, "custom": [32, 35], "databas": [18, 19, 20, 21, 22, 23, 24], "density_matrix": 14, "distanc": 26, "document": 2, "encod": 36, "environ": 42, "exampl": 0, "execut": 1, "extract": 42, "gate": [1, 33, 34, 35, 36, 37, 38, 39], "ground": 1, "hamiltonian": [11, 19], "inform": 42, "interact": 42, "layer": 7, "loss": [25, 26, 27], "manag": 1, "manipul": 42, "matrix": 20, "measur": [0, 3, 27], "multi_qubit_g": 37, "noisi": 1, "note": [6, 7, 8, 10, 11, 13, 14, 15, 16, 27, 30, 31, 34, 40, 41], "oper": [1, 3, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "other": 1, "perform": 3, "posit": 3, "prepar": 1, "properti": 1, "qinfo": 41, "quairkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "quantum": [0, 1, 3, 42], "random": 21, "refer": 3, "represent": 22, "sampl": 3, "set": 23, "single_qubit_g": 38, "special": 40, "state": [1, 3, 12, 13, 14, 15, 16, 24, 42], "state_vector": 15, "templat": 1, "train": 1, "tutori": 43, "valu": 3, "visual": [17, 39], "warn": 41, "welcom": 2}})