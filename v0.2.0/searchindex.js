Search.setIndex({"alltitles": {"Add circuit templates": [[49, "Add-circuit-templates"]], "Add custom gates": [[49, "Add-custom-gates"]], "Add custom quantum channels": [[49, "Add-custom-quantum-channels"]], "Add operations": [[49, "Add-operations"]], "Add quantum channels": [[49, "Add-quantum-channels"]], "Adding custom channels": [[47, "Adding-custom-channels"]], "Adding custom gates": [[47, "Adding-custom-gates"]], "Amplitude damping channel": [[51, "Amplitude-damping-channel"]], "Applying quantum channels to states": [[51, "Applying-quantum-channels-to-states"]], "Applying quantum gates to states": [[51, "Applying-quantum-gates-to-states"]], "Batch Computation": [[45, null]], "Batch computation in measurement": [[45, "Batch-computation-in-measurement"]], "Batch computation in quantum circuit": [[45, "Batch-computation-in-quantum-circuit"]], "Batch measurement": [[50, "Batch-measurement"]], "Bit flip channel": [[51, "Bit-flip-channel"]], "Bit-phase flip channel": [[51, "Bit-phase-flip-channel"]], "Choi representation": [[51, "Choi-representation"]], "Circuit execution": [[49, "Circuit-execution"]], "Compatibility with different data formats": [[52, "Compatibility-with-different-data-formats"]], "Constructing Quantum Circuits in QuAIRKit": [[49, null]], "Constructing quantum circuits": [[49, "Constructing-quantum-circuits"]], "Construction of Hamiltonian": [[48, "Construction-of-Hamiltonian"]], "Conversion among three representations": [[51, "Conversion-among-three-representations"]], "Depolarizing channel": [[51, "Depolarizing-channel"]], "Examples of quantum channels": [[51, "Examples-of-quantum-channels"]], "Expection value of the Hamiltonian": [[48, "Expection-value-of-the-Hamiltonian"]], "Functions in quantum computation": [[52, "Functions-in-quantum-computation"]], "Functions in quantum information": [[52, "Functions-in-quantum-information"]], "Hamiltonian in QuAIRKit": [[48, null]], "Information of a State instance": [[53, "Information-of-a-State-instance"]], "Interaction with environments": [[53, "Interaction-with-environments"]], "Introduction to Hamiltonian": [[48, "Introduction-to-Hamiltonian"]], "Introduction to Neural Networks": [[54, "Introduction-to-Neural-Networks"]], "Introduction to qudit quantum computing": [[47, null]], "Kraus representation": [[51, "Kraus-representation"]], "Manipulation of Quantum States in QuAIRKit": [[53, null]], "Manipulation of states": [[53, "Manipulation-of-states"]], "Measurement": [[47, "Measurement"]], "Measuring quantum states in QuAIRKit": [[50, null]], "Neural Networks in PyTorch": [[54, "Neural-Networks-in-PyTorch"]], "Neural network setup customization": [[46, null]], "Note": [[4, null], [5, null], [5, null], [5, null], [5, null], [5, null], [5, null], [6, null], [6, null], [6, null], [6, null], [6, null], [8, null], [9, null], [12, null], [13, null], [14, null], [14, null], [18, null], [18, null], [18, null], [18, null], [25, null], [28, null], [29, null], [29, null], [29, null], [29, null], [32, null], [32, null], [37, null], [39, null], [40, null], [40, null], [40, null], [40, null], [41, null], [41, null], [41, null]], "Operations in qudit circuits": [[47, "Operations-in-qudit-circuits"]], "Operator management": [[49, "Operator-management"]], "Other properties": [[49, "Other-properties"]], "Parameterized quantum circuits (PQCs)": [[54, "Parameterized-quantum-circuits-(PQCs)"]], "Perform measurement": [[50, "Perform-measurement"]], "Phase flip channel": [[51, "Phase-flip-channel"]], "Positive operator-valued measurement": [[50, "Positive-operator-valued-measurement"]], "Preparation of states": [[53, "Preparation-of-states"]], "Quantum Gates and Quantum Channels": [[51, null]], "Quantum channels": [[51, "Quantum-channels"]], "Quantum gates": [[51, "Quantum-gates"]], "Quantum information tools": [[52, null]], "Quantum measurement": [[50, "Quantum-measurement"]], "References": [[48, "References"], [49, "References"], [50, "References"], [51, "References"], [54, "References"]], "Review on qubit case": [[47, "Review-on-qubit-case"]], "Sampled measurements": [[50, "Sampled-measurements"]], "Setup for general cases": [[47, "Setup-for-general-cases"]], "Setup for qutrit case": [[47, "Setup-for-qutrit-case"]], "Setup via quairkit.Circuit": [[46, "Setup-via-quairkit.Circuit"]], "Setup via torch.nn.Module": [[46, "Setup-via-torch.nn.Module"]], "Single-qubit gates": [[51, "Single-qubit-gates"]], "Stinespring representation": [[51, "Stinespring-representation"]], "The Hamiltonian class": [[48, "The-Hamiltonian-class"]], "Training parameterized quantum circuits": [[54, null]], "Two-qubit gates": [[51, "Two-qubit-gates"]], "Validation functions": [[52, "Validation-functions"]], "Variational quantum eigensolvers (VQEs)": [[54, "Variational-quantum-eigensolvers-(VQEs)"]], "Warning": [[41, null]], "Welcome to QuAIRKit\u2019s documentation!": [[0, null]], "quairkit": [[1, null]], "quairkit.ansatz": [[2, null]], "quairkit.ansatz.comb": [[3, null]], "quairkit.ansatz.container": [[4, null]], "quairkit.ansatz.layer": [[5, null]], "quairkit.circuit": [[6, null]], "quairkit.core": [[7, null]], "quairkit.core.base": [[8, null]], "quairkit.core.hamiltonian": [[9, null]], "quairkit.core.state": [[10, null]], "quairkit.core.state.backend": [[11, null]], "quairkit.core.state.backend.density_matrix": [[12, null]], "quairkit.core.state.backend.state_vector": [[13, null]], "quairkit.core.state.state": [[14, null]], "quairkit.core.visual": [[15, null]], "quairkit.database": [[16, null]], "quairkit.database.hamiltonian": [[17, null]], "quairkit.database.matrix": [[18, null]], "quairkit.database.random": [[19, null]], "quairkit.database.representation": [[20, null]], "quairkit.database.set": [[21, null]], "quairkit.database.state": [[22, null]], "quairkit.loss": [[23, null]], "quairkit.loss.distance": [[24, null]], "quairkit.loss.measure": [[25, null]], "quairkit.operator": [[26, null]], "quairkit.operator.channel": [[27, null]], "quairkit.operator.channel.base": [[28, null]], "quairkit.operator.channel.common": [[29, null]], "quairkit.operator.channel.custom": [[30, null]], "quairkit.operator.gate": [[31, null]], "quairkit.operator.gate.base": [[32, null]], "quairkit.operator.gate.custom": [[33, null]], "quairkit.operator.gate.multi_qubit_gate": [[34, null]], "quairkit.operator.gate.single_qubit_gate": [[35, null]], "quairkit.operator.gate.visual": [[36, null]], "quairkit.operator.special": [[37, null]], "quairkit.qinfo": [[38, null]], "quairkit.qinfo.check": [[39, null]], "quairkit.qinfo.linalg": [[40, null]], "quairkit.qinfo.qinfo": [[41, null]], "tutorials": [[42, null]], "tutorials.feature": [[43, null]], "tutorials.introduction": [[44, null]]}, "docurls": ["index.html", "quairkit.html", "quairkit.ansatz.html", "quairkit.ansatz.comb.html", "quairkit.ansatz.container.html", "quairkit.ansatz.layer.html", "quairkit.circuit.html", "quairkit.core.html", "quairkit.core.base.html", "quairkit.core.hamiltonian.html", "quairkit.core.state.html", "quairkit.core.state.backend.html", "quairkit.core.state.backend.density_matrix.html", "quairkit.core.state.backend.state_vector.html", "quairkit.core.state.state.html", "quairkit.core.visual.html", "quairkit.database.html", "quairkit.database.hamiltonian.html", "quairkit.database.matrix.html", "quairkit.database.random.html", "quairkit.database.representation.html", "quairkit.database.set.html", "quairkit.database.state.html", "quairkit.loss.html", "quairkit.loss.distance.html", "quairkit.loss.measure.html", "quairkit.operator.html", "quairkit.operator.channel.html", "quairkit.operator.channel.base.html", "quairkit.operator.channel.common.html", "quairkit.operator.channel.custom.html", "quairkit.operator.gate.html", "quairkit.operator.gate.base.html", "quairkit.operator.gate.custom.html", "quairkit.operator.gate.multi_qubit_gate.html", "quairkit.operator.gate.single_qubit_gate.html", "quairkit.operator.gate.visual.html", "quairkit.operator.special.html", "quairkit.qinfo.html", "quairkit.qinfo.check.html", "quairkit.qinfo.linalg.html", "quairkit.qinfo.qinfo.html", "tutorials.html", "tutorials.feature.html", "tutorials.introduction.html", "tutorials/feature/batch.html", "tutorials/feature/custom.html", "tutorials/feature/qudit.html", "tutorials/introduction/Hamiltonian.html", "tutorials/introduction/circuit.html", "tutorials/introduction/measure.html", "tutorials/introduction/operator.html", "tutorials/introduction/qinfo.html", "tutorials/introduction/state.html", "tutorials/introduction/training.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "indexentries": {"abs_norm() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.abs_norm", false]], "amplitude_damping() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.amplitude_damping", false]], "amplitude_damping_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.amplitude_damping_kraus", false]], "amplitudedamping (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.AmplitudeDamping", false]], "append() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.append", false]], "backend (class in quairkit.core.base)": [[8, "quairkit.core.base.Backend", false]], "bell_basis() (in module quairkit.database.set)": [[21, "quairkit.database.set.bell_basis", false]], "bell_diagonal_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.bell_diagonal_state", false]], "bell_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.bell_state", false]], "bit_flip() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.bit_flip", false]], "bit_flip_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.bit_flip_kraus", false]], "bit_phase_flip() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.bit_phase_flip", false]], "bit_phase_flip_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.bit_phase_flip_kraus", false]], "bitflip (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.BitFlip", false]], "bitphaseflip (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.BitPhaseFlip", false]], "block_enc_herm() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.block_enc_herm", false]], "ccx (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CCX", false]], "ccx() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.ccx", false]], "channel (class in quairkit.operator.channel.base)": [[28, "quairkit.operator.channel.base.Channel", false]], "channel_repr_convert() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.channel_repr_convert", false]], "choi_channel() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.choi_channel", false]], "choi_repr (quairkit.operator.channel.base.channel property)": [[28, "quairkit.operator.channel.base.Channel.choi_repr", false]], "choirepr (class in quairkit.operator.channel.custom)": [[30, "quairkit.operator.channel.custom.ChoiRepr", false]], "circuit (class in quairkit.circuit)": [[6, "quairkit.circuit.Circuit", false]], "cnot (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CNOT", false]], "cnot() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cnot", false]], "cnot() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cnot", false]], "cnot_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cnot_gate", false]], "coefficients (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.coefficients", false]], "collapse (class in quairkit.operator.special)": [[37, "quairkit.operator.special.Collapse", false]], "completely_mixed_computational() (in module quairkit.database.state)": [[22, "quairkit.database.state.completely_mixed_computational", false]], "complex_block_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.complex_block_layer", false]], "complex_entangled_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.complex_entangled_layer", false]], "complexblocklayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.ComplexBlockLayer", false]], "complexentangledlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.ComplexEntangledLayer", false]], "computational_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.computational_state", false]], "construct_h_matrix() (quairkit.core.hamiltonian.hamiltonian method)": [[9, "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix", false]], "control_oracle() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.control_oracle", false]], "controloracle (class in quairkit.operator.gate.custom)": [[33, "quairkit.operator.gate.custom.ControlOracle", false]], "cp (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CP", false]], "cp() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cp", false]], "cp() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cp", false]], "cp_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cp_gate", false]], "create_choi_repr() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.create_choi_repr", false]], "create_matrix() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.create_matrix", false]], "crx (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CRX", false]], "crx() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.crx", false]], "crx() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.crx", false]], "crx_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.crx_gate", false]], "cry (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CRY", false]], "cry() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cry", false]], "cry() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cry", false]], "cry_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cry_gate", false]], "crz (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CRZ", false]], "crz() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.crz", false]], "crz() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.crz", false]], "crz_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.crz_gate", false]], "cswap (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CSWAP", false]], "cswap() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cswap", false]], "cswap() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cswap", false]], "cswap_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cswap_gate", false]], "cu (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CU", false]], "cu() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cu", false]], "cu() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cu", false]], "cu_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cu_gate", false]], "cx (in module quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CX", false]], "cy (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CY", false]], "cy() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cy", false]], "cy() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cy", false]], "cy_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cy_gate", false]], "cz (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CZ", false]], "cz() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cz", false]], "cz() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.cz", false]], "cz_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.cz_gate", false]], "dagger() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.dagger", false]], "decomp_1qubit() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.decomp_1qubit", false]], "decomp_ctrl_1qubit() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.decomp_ctrl_1qubit", false]], "decompose_pauli_words() (quairkit.core.hamiltonian.hamiltonian method)": [[9, "quairkit.core.hamiltonian.Hamiltonian.decompose_pauli_words", false]], "decompose_with_sites() (quairkit.core.hamiltonian.hamiltonian method)": [[9, "quairkit.core.hamiltonian.Hamiltonian.decompose_with_sites", false]], "depolarizing (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.Depolarizing", false]], "depolarizing() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.depolarizing", false]], "depolarizing_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.depolarizing_kraus", false]], "depth (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.depth", false]], "diamond_norm() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.diamond_norm", false]], "dim (quairkit.operator.channel.base.channel property)": [[28, "quairkit.operator.channel.base.Channel.dim", false]], "direct_sum() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.direct_sum", false]], "display_in_circuit() (quairkit.operator.gate.base.gate method)": [[32, "quairkit.operator.gate.base.Gate.display_in_circuit", false]], "display_in_circuit() (quairkit.operator.gate.base.paramgate method)": [[32, "quairkit.operator.gate.base.ParamGate.display_in_circuit", false]], "expecval (class in quairkit.loss.measure)": [[25, "quairkit.loss.measure.ExpecVal", false]], "extend() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.extend", false]], "extend() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.extend", false]], "extract_highest_fidelity() (quairkit.ansatz.comb.pqcombnet method)": [[3, "quairkit.ansatz.comb.PQCombNet.extract_highest_fidelity", false]], "eye() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.eye", false]], "eye_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.eye_gate", false]], "forward() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.forward", false]], "forward() (quairkit.loss.distance.statefidelity method)": [[24, "quairkit.loss.distance.StateFidelity.forward", false]], "forward() (quairkit.loss.distance.tracedistance method)": [[24, "quairkit.loss.distance.TraceDistance.forward", false]], "forward() (quairkit.loss.measure.expecval method)": [[25, "quairkit.loss.measure.ExpecVal.forward", false]], "forward() (quairkit.loss.measure.measure method)": [[25, "quairkit.loss.measure.Measure.forward", false]], "forward() (quairkit.operator.special.collapse method)": [[37, "quairkit.operator.special.Collapse.forward", false]], "forward() (quairkit.operator.special.onewaylocc method)": [[37, "quairkit.operator.special.OneWayLOCC.forward", false]], "forward() (quairkit.operator.special.quasioperation method)": [[37, "quairkit.operator.special.QuasiOperation.forward", false]], "forward() (quairkit.operator.special.resetstate method)": [[37, "quairkit.operator.special.ResetState.forward", false]], "gate (class in quairkit.operator.gate.base)": [[32, "quairkit.operator.gate.base.Gate", false]], "gate_fidelity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.gate_fidelity", false]], "gate_history (quairkit.ansatz.layer.layer property)": [[5, "quairkit.ansatz.layer.Layer.gate_history", false]], "gate_history (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.gate_history", false]], "gate_history_generation() (quairkit.operator.gate.base.gate method)": [[32, "quairkit.operator.gate.base.Gate.gate_history_generation", false]], "gate_history_generation() (quairkit.operator.gate.base.paramgate method)": [[32, "quairkit.operator.gate.base.ParamGate.gate_history_generation", false]], "gell_mann() (in module quairkit.database.set)": [[21, "quairkit.database.set.gell_mann", false]], "general_state_fidelity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.general_state_fidelity", false]], "generalized_amplitude_damping() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.generalized_amplitude_damping", false]], "generalized_amplitude_damping_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.generalized_amplitude_damping_kraus", false]], "generalized_depolarizing() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.generalized_depolarizing", false]], "generalized_depolarizing_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.generalized_depolarizing_kraus", false]], "generalizedamplitudedamping (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.GeneralizedAmplitudeDamping", false]], "generalizeddepolarizing (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.GeneralizedDepolarizing", false]], "get_backend() (in module quairkit.core.base)": [[8, "quairkit.core.base.get_backend", false]], "get_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.get_circuit_plot_param", false]], "get_device() (in module quairkit.core.base)": [[8, "quairkit.core.base.get_device", false]], "get_dtype() (in module quairkit.core.base)": [[8, "quairkit.core.base.get_dtype", false]], "get_float_dtype() (in module quairkit.core.base)": [[8, "quairkit.core.base.get_float_dtype", false]], "get_seed() (in module quairkit.core.base)": [[8, "quairkit.core.base.get_seed", false]], "ghz_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.ghz_state", false]], "grad (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.grad", false]], "gradient() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.gradient", false]], "grover_matrix() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.grover_matrix", false]], "h (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.H", false]], "h() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.h", false]], "h() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.h", false]], "h_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.h_gate", false]], "haar_density_operator() (in module quairkit.database.random)": [[19, "quairkit.database.random.haar_density_operator", false]], "haar_orthogonal() (in module quairkit.database.random)": [[19, "quairkit.database.random.haar_orthogonal", false]], "haar_state_vector() (in module quairkit.database.random)": [[19, "quairkit.database.random.haar_state_vector", false]], "haar_unitary() (in module quairkit.database.random)": [[19, "quairkit.database.random.haar_unitary", false]], "hamiltonian (class in quairkit.core.hamiltonian)": [[9, "quairkit.core.hamiltonian.Hamiltonian", false]], "heisenberg_hamiltonian() (in module quairkit.database.hamiltonian)": [[17, "quairkit.database.hamiltonian.heisenberg_hamiltonian", false]], "heisenberg_weyl() (in module quairkit.database.set)": [[21, "quairkit.database.set.heisenberg_weyl", false]], "herm_transform() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.herm_transform", false]], "hessian() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.hessian", false]], "image_to_density_matrix() (in module quairkit.core.state.state)": [[14, "quairkit.core.state.state.image_to_density_matrix", false]], "is_choi() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_choi", false]], "is_density_matrix() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_density_matrix", false]], "is_hermitian() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_hermitian", false]], "is_linear() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_linear", false]], "is_positive() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_positive", false]], "is_povm() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_povm", false]], "is_ppt() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_ppt", false]], "is_projector() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_projector", false]], "is_pvm() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_pvm", false]], "is_state_vector() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_state_vector", false]], "is_unitary() (in module quairkit.qinfo.check)": [[39, "quairkit.qinfo.check.is_unitary", false]], "isdynamic (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.isdynamic", false]], "ising_hamiltonian() (in module quairkit.database.hamiltonian)": [[17, "quairkit.database.hamiltonian.ising_hamiltonian", false]], "isotropic_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.isotropic_state", false]], "kraus_channel() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.kraus_channel", false]], "kraus_repr (quairkit.operator.channel.base.channel property)": [[28, "quairkit.operator.channel.base.Channel.kraus_repr", false]], "krausrepr (class in quairkit.operator.channel.custom)": [[30, "quairkit.operator.channel.custom.KrausRepr", false]], "kron_power() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.kron_power", false]], "layer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.Layer", false]], "linear_entangled_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.linear_entangled_layer", false]], "linearentangledlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.LinearEntangledLayer", false]], "link() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.link", false]], "locc() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.locc", false]], "logarithmic_negativity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.logarithmic_negativity", false]], "logm() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.logm", false]], "mana() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.mana", false]], "matrix (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.matrix", false]], "matrix (quairkit.operator.gate.base.gate property)": [[32, "quairkit.operator.gate.base.Gate.matrix", false]], "measure (class in quairkit.loss.measure)": [[25, "quairkit.loss.measure.Measure", false]], "measure() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.measure", false]], "mixedstate (class in quairkit.core.state.backend.density_matrix)": [[12, "quairkit.core.state.backend.density_matrix.MixedState", false]], "module": [[3, "module-quairkit.ansatz.comb", false], [4, "module-quairkit.ansatz.container", false], [5, "module-quairkit.ansatz.layer", false], [6, "module-quairkit.circuit", false], [8, "module-quairkit.core.base", false], [9, "module-quairkit.core.hamiltonian", false], [12, "module-quairkit.core.state.backend.density_matrix", false], [13, "module-quairkit.core.state.backend.state_vector", false], [14, "module-quairkit.core.state.state", false], [15, "module-quairkit.core.visual", false], [17, "module-quairkit.database.hamiltonian", false], [18, "module-quairkit.database.matrix", false], [19, "module-quairkit.database.random", false], [20, "module-quairkit.database.representation", false], [21, "module-quairkit.database.set", false], [22, "module-quairkit.database.state", false], [24, "module-quairkit.loss.distance", false], [25, "module-quairkit.loss.measure", false], [28, "module-quairkit.operator.channel.base", false], [29, "module-quairkit.operator.channel.common", false], [30, "module-quairkit.operator.channel.custom", false], [32, "module-quairkit.operator.gate.base", false], [33, "module-quairkit.operator.gate.custom", false], [34, "module-quairkit.operator.gate.multi_qubit_gate", false], [35, "module-quairkit.operator.gate.single_qubit_gate", false], [36, "module-quairkit.operator.gate.visual", false], [37, "module-quairkit.operator.special", false], [39, "module-quairkit.qinfo.check", false], [40, "module-quairkit.qinfo.linalg", false], [41, "module-quairkit.qinfo.qinfo", false]], "ms (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.MS", false]], "ms() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.ms", false]], "ms() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.ms", false]], "ms_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.ms_gate", false]], "mutual_information() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.mutual_information", false]], "n_qubits (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.n_qubits", false]], "n_terms (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.n_terms", false]], "negativity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.negativity", false]], "nkron() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.NKron", false], [40, "quairkit.qinfo.linalg.nkron", false]], "num_qubits (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.num_qubits", false]], "num_qutrits (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.num_qutrits", false]], "num_systems (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.num_systems", false]], "of() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.Of", false]], "of_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.Of_gate", false]], "one_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.one_state", false]], "onewaylocc (class in quairkit.operator.special)": [[37, "quairkit.operator.special.OneWayLOCC", false]], "oper_history (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.oper_history", false]], "operator (class in quairkit.core.base)": [[8, "quairkit.core.base.Operator", false]], "operatorlist (class in quairkit.ansatz.container)": [[4, "quairkit.ansatz.container.OperatorList", false]], "oracle (class in quairkit.operator.gate.custom)": [[33, "quairkit.operator.gate.custom.Oracle", false]], "oracle() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.oracle", false]], "p (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.P", false]], "p() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.p", false]], "p() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.p", false]], "p_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.p_gate", false]], "p_norm() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.p_norm", false]], "param (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.param", false]], "param_oracle() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.param_oracle", false]], "paramgate (class in quairkit.operator.gate.base)": [[32, "quairkit.operator.gate.base.ParamGate", false]], "paramoracle (class in quairkit.operator.gate.custom)": [[33, "quairkit.operator.gate.custom.ParamOracle", false]], "partial_trace() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.partial_trace", false]], "partial_trace_discontiguous() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.partial_trace_discontiguous", false]], "partial_transpose() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.partial_transpose", false]], "pauli_basis() (in module quairkit.database.set)": [[21, "quairkit.database.set.pauli_basis", false]], "pauli_channel() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.pauli_channel", false]], "pauli_decomposition() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.pauli_decomposition", false]], "pauli_group() (in module quairkit.database.set)": [[21, "quairkit.database.set.pauli_group", false]], "pauli_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.pauli_kraus", false]], "pauli_str (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.pauli_str", false]], "pauli_str_basis() (in module quairkit.database.set)": [[21, "quairkit.database.set.pauli_str_basis", false]], "pauli_str_convertor() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.pauli_str_convertor", false]], "pauli_str_povm() (in module quairkit.database.set)": [[21, "quairkit.database.set.pauli_str_povm", false]], "pauli_words (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.pauli_words", false]], "pauli_words_matrix (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_matrix", false]], "pauli_words_r (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_r", false]], "paulichannel (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.PauliChannel", false]], "permute_systems() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.permute_systems", false]], "phase() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.phase", false]], "phase_damping() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.phase_damping", false]], "phase_damping_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.phase_damping_kraus", false]], "phase_flip() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.phase_flip", false]], "phase_flip_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.phase_flip_kraus", false]], "phase_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.phase_gate", false]], "phase_space_point() (in module quairkit.database.set)": [[21, "quairkit.database.set.phase_space_point", false]], "phasedamping (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.PhaseDamping", false]], "phaseflip (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.PhaseFlip", false]], "plot() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.plot", false]], "plot_density_matrix_graph() (in module quairkit.core.visual)": [[15, "quairkit.core.visual.plot_density_matrix_graph", false]], "plot_multi_qubits_state_in_bloch_sphere() (in module quairkit.core.visual)": [[15, "quairkit.core.visual.plot_multi_qubits_state_in_bloch_sphere", false]], "plot_rotation_in_bloch_sphere() (in module quairkit.core.visual)": [[15, "quairkit.core.visual.plot_rotation_in_bloch_sphere", false]], "plot_state_in_bloch_sphere() (in module quairkit.core.visual)": [[15, "quairkit.core.visual.plot_state_in_bloch_sphere", false]], "pqcombnet (class in quairkit.ansatz.comb)": [[3, "quairkit.ansatz.comb.PQCombNet", false]], "prob_sample() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.prob_sample", false]], "purestate (class in quairkit.core.state.backend.state_vector)": [[13, "quairkit.core.state.backend.state_vector.PureState", false]], "purity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.purity", false]], "qaoalayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.QAOALayer", false]], "qaoalayerweighted (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.QAOALayerWeighted", false]], "qft_basis() (in module quairkit.database.set)": [[21, "quairkit.database.set.qft_basis", false]], "qft_matrix() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.qft_matrix", false]], "quairkit.ansatz.comb": [[3, "module-quairkit.ansatz.comb", false]], "quairkit.ansatz.container": [[4, "module-quairkit.ansatz.container", false]], "quairkit.ansatz.layer": [[5, "module-quairkit.ansatz.layer", false]], "quairkit.circuit": [[6, "module-quairkit.circuit", false]], "quairkit.core.base": [[8, "module-quairkit.core.base", false]], "quairkit.core.hamiltonian": [[9, "module-quairkit.core.hamiltonian", false]], "quairkit.core.state.backend.density_matrix": [[12, "module-quairkit.core.state.backend.density_matrix", false]], "quairkit.core.state.backend.state_vector": [[13, "module-quairkit.core.state.backend.state_vector", false]], "quairkit.core.state.state": [[14, "module-quairkit.core.state.state", false]], "quairkit.core.visual": [[15, "module-quairkit.core.visual", false]], "quairkit.database.hamiltonian": [[17, "module-quairkit.database.hamiltonian", false]], "quairkit.database.matrix": [[18, "module-quairkit.database.matrix", false]], "quairkit.database.random": [[19, "module-quairkit.database.random", false]], "quairkit.database.representation": [[20, "module-quairkit.database.representation", false]], "quairkit.database.set": [[21, "module-quairkit.database.set", false]], "quairkit.database.state": [[22, "module-quairkit.database.state", false]], "quairkit.loss.distance": [[24, "module-quairkit.loss.distance", false]], "quairkit.loss.measure": [[25, "module-quairkit.loss.measure", false]], "quairkit.operator.channel.base": [[28, "module-quairkit.operator.channel.base", false]], "quairkit.operator.channel.common": [[29, "module-quairkit.operator.channel.common", false]], "quairkit.operator.channel.custom": [[30, "module-quairkit.operator.channel.custom", false]], "quairkit.operator.gate.base": [[32, "module-quairkit.operator.gate.base", false]], "quairkit.operator.gate.custom": [[33, "module-quairkit.operator.gate.custom", false]], "quairkit.operator.gate.multi_qubit_gate": [[34, "module-quairkit.operator.gate.multi_qubit_gate", false]], "quairkit.operator.gate.single_qubit_gate": [[35, "module-quairkit.operator.gate.single_qubit_gate", false]], "quairkit.operator.gate.visual": [[36, "module-quairkit.operator.gate.visual", false]], "quairkit.operator.special": [[37, "module-quairkit.operator.special", false]], "quairkit.qinfo.check": [[39, "module-quairkit.qinfo.check", false]], "quairkit.qinfo.linalg": [[40, "module-quairkit.qinfo.linalg", false]], "quairkit.qinfo.qinfo": [[41, "module-quairkit.qinfo.qinfo", false]], "quasioperation (class in quairkit.operator.special)": [[37, "quairkit.operator.special.QuasiOperation", false]], "r_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.r_state", false]], "random_channel() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_channel", false]], "random_clifford() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_clifford", false]], "random_density_matrix() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_density_matrix", false]], "random_hamiltonian_generator() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_hamiltonian_generator", false]], "random_hermitian() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_hermitian", false]], "random_orthogonal_projection() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_orthogonal_projection", false]], "random_pauli_str_generator() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_pauli_str_generator", false]], "random_projector() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_projector", false]], "random_state() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_state", false]], "random_unitary() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_unitary", false]], "random_unitary_hermitian() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_unitary_hermitian", false]], "random_unitary_with_hermitian_block() (in module quairkit.database.random)": [[19, "quairkit.database.random.random_unitary_with_hermitian_block", false]], "randomize_param() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.randomize_param", false]], "real_block_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.real_block_layer", false]], "real_entangled_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.real_entangled_layer", false]], "realblocklayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.RealBlockLayer", false]], "realentangledlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.RealEntangledLayer", false]], "relative_entropy() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.relative_entropy", false]], "replacement_choi() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.replacement_choi", false]], "replacementchannel (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.ReplacementChannel", false]], "reset_channel() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.reset_channel", false]], "reset_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.reset_circuit_plot_param", false]], "reset_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.reset_kraus", false]], "resetchannel (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.ResetChannel", false]], "resetstate (class in quairkit.operator.special)": [[37, "quairkit.operator.special.ResetState", false]], "rx (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.RX", false]], "rx() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rx", false]], "rx() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.rx", false]], "rx_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rx_gate", false]], "rxx (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.RXX", false]], "rxx() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rxx", false]], "rxx() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.rxx", false]], "rxx_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rxx_gate", false]], "ry (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.RY", false]], "ry() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.ry", false]], "ry() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.ry", false]], "ry_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.ry_gate", false]], "ryy (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.RYY", false]], "ryy() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.ryy", false]], "ryy() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.ryy", false]], "ryy_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.ryy_gate", false]], "rz (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.RZ", false]], "rz() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rz", false]], "rz() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.rz", false]], "rz_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rz_gate", false]], "rzz (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.RZZ", false]], "rzz() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rzz", false]], "rzz() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.rzz", false]], "rzz_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.rzz_gate", false]], "s (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.S", false]], "s() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.s", false]], "s() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.s", false]], "s_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.s_gate", false]], "s_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.s_state", false]], "scale_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.scale_circuit_plot_param", false]], "schmidt_decompose() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.schmidt_decompose", false]], "sdg (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Sdg", false]], "sdg() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.sdg", false]], "sdg() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.sdg", false]], "sdg_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.sdg_gate", false]], "set_backend() (in module quairkit.core.base)": [[8, "quairkit.core.base.set_backend", false]], "set_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.set_circuit_plot_param", false]], "set_device() (in module quairkit.core.base)": [[8, "quairkit.core.base.set_device", false]], "set_dtype() (in module quairkit.core.base)": [[8, "quairkit.core.base.set_dtype", false]], "set_gate_info() (quairkit.operator.gate.base.gate method)": [[32, "quairkit.operator.gate.base.Gate.set_gate_info", false]], "set_seed() (in module quairkit.core.base)": [[8, "quairkit.core.base.set_seed", false]], "shift() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.shift", false]], "shift_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.shift_gate", false]], "sigx_p (quairkit.core.hamiltonian.spinops property)": [[9, "quairkit.core.hamiltonian.SpinOps.sigx_p", false]], "sigy_p (quairkit.core.hamiltonian.spinops property)": [[9, "quairkit.core.hamiltonian.SpinOps.sigy_p", false]], "sigz_p (quairkit.core.hamiltonian.spinops property)": [[9, "quairkit.core.hamiltonian.SpinOps.sigz_p", false]], "sites (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.sites", false]], "spinops (class in quairkit.core.hamiltonian)": [[9, "quairkit.core.hamiltonian.SpinOps", false]], "sqrtm() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.sqrtm", false]], "stab_nullity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.stab_nullity", false]], "stab_renyi() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.stab_renyi", false]], "state_fidelity() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.state_fidelity", false]], "statefidelity (class in quairkit.loss.distance)": [[24, "quairkit.loss.distance.StateFidelity", false]], "std_basis() (in module quairkit.database.set)": [[21, "quairkit.database.set.std_basis", false]], "stinespring_channel() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.stinespring_channel", false]], "stinespring_repr (quairkit.operator.channel.base.channel property)": [[28, "quairkit.operator.channel.base.Channel.stinespring_repr", false]], "stinespringrepr (class in quairkit.operator.channel.custom)": [[30, "quairkit.operator.channel.custom.StinespringRepr", false]], "superposition_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.superposition_layer", false]], "superpositionlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.SuperpositionLayer", false]], "swap (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.SWAP", false]], "swap() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.swap", false]], "swap() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.swap", false]], "swap_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.swap_gate", false]], "system_dim (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.system_dim", false]], "system_history (quairkit.circuit.circuit property)": [[6, "quairkit.circuit.Circuit.system_history", false]], "system_seq (quairkit.core.state.backend.density_matrix.mixedstate property)": [[12, "quairkit.core.state.backend.density_matrix.MixedState.system_seq", false]], "system_seq (quairkit.core.state.backend.state_vector.purestate property)": [[13, "quairkit.core.state.backend.state_vector.PureState.system_seq", false]], "t (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.T", false]], "t() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.t", false]], "t() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.t", false]], "t_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.t_gate", false]], "tdg (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Tdg", false]], "tdg() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.tdg", false]], "tdg() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.tdg", false]], "tdg_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.tdg_gate", false]], "tensor_state() (in module quairkit.core.state.state)": [[14, "quairkit.core.state.state.tensor_state", false]], "terms (quairkit.core.hamiltonian.hamiltonian property)": [[9, "quairkit.core.hamiltonian.Hamiltonian.terms", false]], "thermal_relaxation() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.thermal_relaxation", false]], "thermal_relaxation_kraus() (in module quairkit.database.representation)": [[20, "quairkit.database.representation.thermal_relaxation_kraus", false]], "thermalrelaxation (class in quairkit.operator.channel.common)": [[29, "quairkit.operator.channel.common.ThermalRelaxation", false]], "to_state() (in module quairkit.core.state.state)": [[14, "quairkit.core.state.state.to_state", false]], "toffoli (in module quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.Toffoli", false]], "toffoli() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.toffoli", false]], "toffoli_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.toffoli_gate", false]], "trace() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.trace", false]], "trace_distance() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.trace_distance", false]], "trace_norm() (in module quairkit.qinfo.linalg)": [[40, "quairkit.qinfo.linalg.trace_norm", false]], "tracedistance (class in quairkit.loss.distance)": [[24, "quairkit.loss.distance.TraceDistance", false]], "train() (quairkit.ansatz.comb.pqcombnet method)": [[3, "quairkit.ansatz.comb.PQCombNet.train", false]], "transfer_static() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.transfer_static", false]], "u3 (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.U3", false]], "u3() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.u3", false]], "u3() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.u3", false]], "u3_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.u3_gate", false]], "uf() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.Uf", false]], "uf_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.Uf_gate", false]], "unitary_matrix() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.unitary_matrix", false]], "universal2() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.universal2", false]], "universal2_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.universal2_gate", false]], "universal3() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.universal3", false]], "universal3_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.universal3_gate", false]], "universal_qudit() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.universal_qudit", false]], "universal_qudits() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.universal_qudits", false]], "universal_three_qubits() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.universal_three_qubits", false]], "universal_two_qubits() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.universal_two_qubits", false]], "universalqudits (class in quairkit.operator.gate.custom)": [[33, "quairkit.operator.gate.custom.UniversalQudits", false]], "universalthreequbits (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.UniversalThreeQubits", false]], "universaltwoqubits (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.UniversalTwoQubits", false]], "update_param() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.update_param", false]], "update_v_circuit() (quairkit.ansatz.comb.pqcombnet method)": [[3, "quairkit.ansatz.comb.PQCombNet.update_V_circuit", false]], "von_neumann_entropy() (in module quairkit.qinfo.qinfo)": [[41, "quairkit.qinfo.qinfo.von_neumann_entropy", false]], "w_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.w_state", false]], "weak_superposition_layer() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.weak_superposition_layer", false]], "weaksuperpositionlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.WeakSuperpositionLayer", false]], "x (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.X", false]], "x() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.x", false]], "x() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.x", false]], "x_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.x_gate", false]], "xy_hamiltonian() (in module quairkit.database.hamiltonian)": [[17, "quairkit.database.hamiltonian.xy_hamiltonian", false]], "y (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Y", false]], "y() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.y", false]], "y() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.y", false]], "y_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.y_gate", false]], "z (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Z", false]], "z() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.z", false]], "z() (quairkit.circuit.circuit method)": [[6, "quairkit.circuit.Circuit.z", false]], "z_gate() (in module quairkit.database.matrix)": [[18, "quairkit.database.matrix.z_gate", false]], "zero_state() (in module quairkit.database.state)": [[22, "quairkit.database.state.zero_state", false]]}, "objects": {"quairkit": [[6, 0, 0, 1, "circuit", ""]], "quairkit.ansatz": [[3, 0, 0, 1, "comb", ""], [4, 0, 0, 1, "container", ""], [5, 0, 0, 1, "layer", ""]], "quairkit.ansatz.comb": [[3, 1, 1, 0, "PQCombNet", "Parameterized Quantum Comb Net."]], "quairkit.ansatz.comb.PQCombNet": [[3, 3, 1, 0, "extract_highest_fidelity", "Call the _extract_highest_fidelity function to generate the fidelity tables. If the file does not exist, prompt the user to set is_save_data to True."], [3, 3, 1, 0, "train", "Train the PQCombNet model."], [3, 3, 1, 0, "update_V_circuit", "Update the V circuit at the specified index with a new circuit."]], "quairkit.ansatz.comb.PQCombNet.__init__": [[3, 2, 2, 0, "LR", "Learning rate for the optimization algorithm."], [3, 2, 2, 0, "NUM_ITR", "Number of iterations to run the training."], [3, 2, 2, 0, "is_auto_stop", "Flag to enable stopping the training process automatically based on certain criteria."], [3, 2, 2, 0, "is_ctrl_U", "Flag to indicate if a controlled-U operation is used in the training process."], [3, 2, 2, 0, "is_save_data", "Flag to determine if data should be saved during training."], [3, 2, 2, 0, "name_task", "Optional name for the task, useful for data logging and storage."], [3, 2, 2, 0, "num_aux_qubits", "The parameter 'num_aux_qubits' also used in the quantum computation context."], [3, 2, 2, 0, "num_qubits_U", "The number of qubits of the unitaries to be queried."], [3, 2, 2, 0, "num_slots", "The parameter 'num_slots' used in the specific quantum computation context."], [3, 2, 2, 0, "seed", "Optional seed for random number generation, enhancing reproducibility."], [3, 2, 2, 0, "target_function", "The function to apply to each tensor in the dataset."], [3, 2, 2, 0, "test_unitary_info", "Information for generating or providing testing unitaries, similar to train_unitary_info."], [3, 2, 2, 0, "train_mode", "The mode to use for training, default is 'choi'."], [3, 2, 2, 0, "train_unitary_info", "Information for generating or providing training unitaries, either as an integer or a tensor."]], "quairkit.ansatz.comb.PQCombNet.update_V_circuit": [[3, 2, 2, 0, "index", "The index of the V circuit to update."], [3, 2, 2, 0, "new_V", "The new V circuit, which can be a ParamOracle, Circuit, torch.Tensor or Tuple[torch.Tensor, List[int]]."]], "quairkit.ansatz.container": [[4, 1, 1, 0, "OperatorList", "Sequential container."]], "quairkit.ansatz.container.OperatorList": [[4, 3, 1, 0, "append", "Appends an given operator to the end."], [4, 3, 1, 0, "extend", "Appends an given operator to the end."], [4, 4, 1, 0, "grad", "Gradients with respect to the flattened parameters."], [4, 4, 1, 0, "oper_history", "Return the operator history of this Sequential"], [4, 4, 1, 0, "param", "Flattened parameters in this list."], [4, 3, 1, 0, "randomize_param", "Randomize parameters of the list based on the initializer. Current we only support Uniform and Normal initializer."], [4, 3, 1, 0, "transfer_static", "set stop_gradient of all parameters of the list as True"], [4, 3, 1, 0, "update_param", "Replace parameters of all/one layer(s) by theta."]], "quairkit.ansatz.container.OperatorList.__init__": [[4, 2, 2, 0, "operators", "initial operators ready to be a sequential"]], "quairkit.ansatz.container.OperatorList.append": [[4, 2, 2, 0, "op", "module to append"]], "quairkit.ansatz.container.OperatorList.extend": [[4, 2, 2, 0, "sequential", "module to append"]], "quairkit.ansatz.container.OperatorList.randomize_param": [[4, 2, 2, 0, "arg0", "first argument of the initializer."], [4, 2, 2, 0, "arg1", "first argument of the initializer."], [4, 2, 2, 0, "method", "The sampling method."]], "quairkit.ansatz.container.OperatorList.update_param": [[4, 2, 2, 0, "idx", "Index of replacement."], [4, 2, 2, 0, "theta", "New parameters"]], "quairkit.ansatz.layer": [[5, 1, 1, 0, "ComplexBlockLayer", "Weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [5, 1, 1, 0, "ComplexEntangledLayer", "Strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [5, 1, 1, 0, "Layer", "Base class for Layers."], [5, 1, 1, 0, "LinearEntangledLayer", "Linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [5, 1, 1, 0, "QAOALayer", "QAOA driving layers"], [5, 1, 1, 0, "QAOALayerWeighted", "QAOA driving layers with weights"], [5, 1, 1, 0, "RealBlockLayer", "Weakly entangled layers consisting of Ry gates and CNOT gates."], [5, 1, 1, 0, "RealEntangledLayer", "Strongly entangled layers consisting of Ry gates and CNOT gates."], [5, 1, 1, 0, "SuperpositionLayer", "Layers of Hadamard gates."], [5, 1, 1, 0, "WeakSuperpositionLayer", "Layers of Ry gates with a rotation angle \\pi/4."]], "quairkit.ansatz.layer.ComplexBlockLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.ansatz.layer.ComplexEntangledLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.ansatz.layer.Layer": [[5, 4, 1, 0, "gate_history", "list of gates information of this layer"]], "quairkit.ansatz.layer.Layer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this layer is applied."]], "quairkit.ansatz.layer.LinearEntangledLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.ansatz.layer.QAOALayer.__init__": [[5, 2, 2, 0, "depth", "depth of layer"], [5, 2, 2, 0, "edges", "edges of the graph"], [5, 2, 2, 0, "nodes", "nodes of the graph"]], "quairkit.ansatz.layer.QAOALayerWeighted.__init__": [[5, 2, 2, 0, "depth", "depth of layer"], [5, 2, 2, 0, "edges", "edges of the graph with weights"], [5, 2, 2, 0, "nodes", "nodes of the graph with weights"]], "quairkit.ansatz.layer.RealBlockLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.ansatz.layer.RealEntangledLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.ansatz.layer.SuperpositionLayer.__init__": [[5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.ansatz.layer.WeakSuperpositionLayer.__init__": [[5, 2, 2, 0, "num_qubits", "Total number of qubits."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied. Defaults to None i.e."]], "quairkit.circuit": [[6, 1, 1, 0, "Circuit", "Quantum circuit."]], "quairkit.circuit.Circuit": [[6, 3, 1, 0, "amplitude_damping", "Add amplitude damping channels."], [6, 3, 1, 0, "bit_flip", "Add bit flip channels."], [6, 3, 1, 0, "bit_phase_flip", "Add bit phase flip channels."], [6, 3, 1, 0, "ccx", "Add CCX (Toffoli) gates."], [6, 3, 1, 0, "choi_channel", "Add custom channels in the Choi representation."], [6, 3, 1, 0, "cnot", "Add CNOT gates."], [6, 3, 1, 0, "complex_block_layer", "Add weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [6, 3, 1, 0, "complex_entangled_layer", "Add strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [6, 3, 1, 0, "control_oracle", "Add a controlled oracle gate."], [6, 3, 1, 0, "cp", "Add controlled P gates."], [6, 3, 1, 0, "crx", "Add controlled rotation gates about the x-axis."], [6, 3, 1, 0, "cry", "Add controlled rotation gates about the y-axis."], [6, 3, 1, 0, "crz", "Add controlled rotation gates about the z-axis."], [6, 3, 1, 0, "cswap", "Add CSWAP (Fredkin) gates."], [6, 3, 1, 0, "cu", "Add controlled single-qubit rotation gates."], [6, 3, 1, 0, "cy", "Add controlled Y gates."], [6, 3, 1, 0, "cz", "Add controlled Z gates."], [6, 3, 1, 0, "depolarizing", "Add depolarizing channels."], [6, 4, 1, 0, "depth", "Depth of gate sequences."], [6, 3, 1, 0, "extend", "extend for quantum circuit"], [6, 3, 1, 0, "forward", "forward the input"], [6, 4, 1, 0, "gate_history", "List of gates information of circuit"], [6, 3, 1, 0, "generalized_amplitude_damping", "Add generalized amplitude damping channels."], [6, 3, 1, 0, "generalized_depolarizing", "Add a general depolarizing channel."], [6, 3, 1, 0, "h", "Add single-qubit Hadamard gates."], [6, 4, 1, 0, "isdynamic", "Whether the circuit is dynamic"], [6, 3, 1, 0, "kraus_channel", "Add custom channels in the Kraus representation."], [6, 3, 1, 0, "linear_entangled_layer", "Add linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [6, 3, 1, 0, "locc", "Add a one-way local operation and classical communication (LOCC) protocol comprised of unitary operations."], [6, 3, 1, 0, "measure", "list of systems to be measured. Defaults to all qubits."], [6, 3, 1, 0, "ms", "Add M\u00f8lmer-S\u00f8rensen (MS) gates."], [6, 4, 1, 0, "num_qubits", "Number of qubits."], [6, 4, 1, 0, "num_qutrits", "Number of qutrits."], [6, 4, 1, 0, "num_systems", "Number of systems."], [6, 3, 1, 0, "oracle", "Add an oracle gate."], [6, 3, 1, 0, "p", "Add single-qubit P gates."], [6, 3, 1, 0, "param_oracle", "Add a parameterized oracle gate."], [6, 3, 1, 0, "pauli_channel", "Add Pauli channels."], [6, 3, 1, 0, "phase_damping", "Add phase damping channels."], [6, 3, 1, 0, "phase_flip", "Add phase flip channels."], [6, 3, 1, 0, "plot", "display the circuit using matplotlib"], [6, 3, 1, 0, "real_block_layer", "Add weakly entangled layers consisting of Ry gates and CNOT gates."], [6, 3, 1, 0, "real_entangled_layer", "Add strongly entangled layers consisting of Ry gates and CNOT gates."], [6, 3, 1, 0, "reset_channel", "Add reset channels."], [6, 3, 1, 0, "rx", "Add single-qubit rotation gates about the x-axis."], [6, 3, 1, 0, "rxx", "Add RXX gates."], [6, 3, 1, 0, "ry", "Add single-qubit rotation gates about the y-axis."], [6, 3, 1, 0, "ryy", "Add RYY gates."], [6, 3, 1, 0, "rz", "Add single-qubit rotation gates about the z-axis."], [6, 3, 1, 0, "rzz", "Add RZZ gates."], [6, 3, 1, 0, "s", "Add single-qubit S gates."], [6, 3, 1, 0, "sdg", "Add single-qubit S dagger (S inverse) gates."], [6, 3, 1, 0, "stinespring_channel", "Add custom channels in the Stinespring representation."], [6, 3, 1, 0, "superposition_layer", "Add layers of Hadamard gates."], [6, 3, 1, 0, "swap", "Add SWAP gates."], [6, 4, 1, 0, "system_dim", "Dimension of systems."], [6, 4, 1, 0, "system_history", "gate information on each system"], [6, 3, 1, 0, "t", "Add single-qubit T gates."], [6, 3, 1, 0, "tdg", "Add single-qubit T dagger (T inverse) gates."], [6, 3, 1, 0, "thermal_relaxation", "Add thermal relaxation channels."], [6, 3, 1, 0, "u3", "Add single-qubit rotation gates."], [6, 3, 1, 0, "unitary_matrix", "Get the unitary matrix form of the circuit."], [6, 3, 1, 0, "universal_qudits", "Add universal qudit gates. One of such a gate requires d^2 - 1 parameters, where d is the gate dimension."], [6, 3, 1, 0, "universal_three_qubits", "Add universal three-qubit gates. One of such a gate requires 81 parameters."], [6, 3, 1, 0, "universal_two_qubits", "Add universal two-qubit gates. One of such a gate requires 15 parameters."], [6, 3, 1, 0, "weak_superposition_layer", "Add layers of Ry gates with a rotation angle \\pi/4."], [6, 3, 1, 0, "x", "Add single-qubit X gates."], [6, 3, 1, 0, "y", "Add single-qubit Y gates."], [6, 3, 1, 0, "z", "Add single-qubit Z gates."]], "quairkit.circuit.Circuit.__init__": [[6, 2, 2, 0, "num_systems", "number of systems in the circuit."], [6, 2, 2, 0, "system_dim", "dimension of systems of this circuit."]], "quairkit.circuit.Circuit.amplitude_damping": [[6, 2, 2, 0, "gamma", "Damping probability."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.bit_flip": [[6, 2, 2, 0, "prob", "Probability of a bit flip."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.bit_phase_flip": [[6, 2, 2, 0, "prob", "Probability of a bit phase flip."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.ccx": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.choi_channel": [[6, 2, 2, 0, "choi_repr", "Choi representation of this channel."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the channels are applied."]], "quairkit.circuit.Circuit.cnot": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.complex_block_layer": [[6, 2, 2, 0, "depth", "Number of layers."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.complex_entangled_layer": [[6, 2, 2, 0, "depth", "Number of layers."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.control_oracle": [[6, 2, 2, 0, "gate_name", "name of this oracle."], [6, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [6, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [6, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [6, 2, 2, 0, "proj", "Projector matrix for the control qubit."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.cp": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crx": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cry": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crz": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cswap": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cu": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cy": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cz": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.depolarizing": [[6, 2, 2, 0, "prob", "Parameter of the depolarizing channel."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.extend": [[6, 2, 2, 0, "cir", "a Circuit or a OperatorList"]], "quairkit.circuit.Circuit.forward": [[6, 2, 2, 0, "state", "initial state"]], "quairkit.circuit.Circuit.generalized_amplitude_damping": [[6, 2, 2, 0, "gamma", "Damping probability."], [6, 2, 2, 0, "prob", "Excitation probability."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.generalized_depolarizing": [[6, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli basis."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channel is applied."]], "quairkit.circuit.Circuit.h": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.kraus_channel": [[6, 2, 2, 0, "kraus_oper", "Kraus representation of this channel."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the channels are applied."]], "quairkit.circuit.Circuit.linear_entangled_layer": [[6, 2, 2, 0, "depth", "Number of layers."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.locc": [[6, 2, 2, "quairkit.circuit.Circuit.locc", "local_unitary", "Add a one-way local operation and classical communication (LOCC) protocol comprised of unitary operations."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the protocol is applied."]], "quairkit.circuit.Circuit.measure": [[6, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [6, 2, 2, 0, "measure_basis", "The basis of the measurement."], [6, 2, 2, 0, "post_selection", "the post selection result after measurement."], [6, 2, 2, 0, "system_idx", "list of systems to be measured."]], "quairkit.circuit.Circuit.ms": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.oracle": [[6, 2, 2, 0, "gate_name", "name of this oracle."], [6, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [6, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [6, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.p": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.param_oracle": [[6, 2, 2, 0, "gate_name", "name of this oracle."], [6, 2, 2, 0, "generator", "function that generates the oracle."], [6, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [6, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [6, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [6, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [6, 2, 2, 0, "system_idx", "indices of the system on which this gate acts on."]], "quairkit.circuit.Circuit.pauli_channel": [[6, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.phase_damping": [[6, 2, 2, 0, "gamma", "Parameter of the phase damping channel."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.phase_flip": [[6, 2, 2, 0, "prob", "Probability of a phase flip."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.plot": [[6, 2, 2, 0, "dpi", "dots per inches, here is resolution ratio"], [6, 2, 2, 0, "output", "whether return the matplotlib.figure.Figure instance"], [6, 2, 2, 0, "save_path", "the save path of image"], [6, 2, 2, 0, "scale", "scale coefficient of figure, default to 1.0"], [6, 2, 2, 0, "show", "whether execute plt.show()"], [6, 2, 2, 0, "tex", "a bool flag which controls latex fonts of gate display, default to False."]], "quairkit.circuit.Circuit.real_block_layer": [[6, 2, 2, 0, "depth", "Number of layers."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.real_entangled_layer": [[6, 2, 2, 0, "depth", "Number of layers."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.reset_channel": [[6, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.rx": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rxx": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ry": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ryy": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rz": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rzz": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.s": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.sdg": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.stinespring_channel": [[6, 2, 2, 0, "stinespring_repr", "Stinespring representation of this channel."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the channels are applied."]], "quairkit.circuit.Circuit.superposition_layer": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.swap": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.t": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.tdg": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.thermal_relaxation": [[6, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [6, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.u3": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_qudits": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.universal_three_qubits": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_two_qubits": [[6, 2, 2, 0, "param", "Parameters of the gates."], [6, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.weak_superposition_layer": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.x": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.y": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.z": [[6, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.core": [[8, 0, 0, 1, "base", ""], [9, 0, 0, 1, "hamiltonian", ""], [15, 0, 0, 1, "visual", ""]], "quairkit.core.base": [[8, 1, 1, 0, "Backend", "Backend classifier in the QuAIRKit."], [8, 1, 1, 0, "Operator", "The basic class to implement the operation in QuAIRKit."], [8, 5, 1, 0, "get_backend", "Get the current backend of QuAIRKit."], [8, 5, 1, 0, "get_device", "Get the current device to save the tensor."], [8, 5, 1, 0, "get_dtype", "Return currently used data type."], [8, 5, 1, 0, "get_float_dtype", "Return currently used float data type."], [8, 5, 1, 0, "get_seed", "Get the currently used seed of QuAIRKit."], [8, 5, 1, 0, "set_backend", "Set the backend implementation of QuAIRKit."], [8, 5, 1, 0, "set_device", "Set the device to save the tensor."], [8, 5, 1, 0, "set_dtype", "Set the data type ."], [8, 5, 1, 0, "set_seed", "Set the global seed of QuAIRKit."]], "quairkit.core.base.Backend.__init__": [[8, 2, 2, "quairkit.core.base.Backend", "*values", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "boundary=None", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "module=None", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "names=&lt;not given&gt;", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "qualname=None", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "start=1", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "type=None", "Backend classifier in the QuAIRKit."], [8, 2, 2, "quairkit.core.base.Backend", "value", "Backend classifier in the QuAIRKit."]], "quairkit.core.base.Operator.__init__": [[8, 2, 2, 0, "backend", "The backend implementation of the operator. Defaults to None, which means to use the default backend implementation."], [8, 2, 2, 0, "dtype", "The data type of the operator. Defaults to None, which means to use the default data type."]], "quairkit.core.base.set_backend": [[8, 2, 2, 0, "backend", "The name of the backend."]], "quairkit.core.base.set_device": [[8, 2, 2, 0, "device", "The name of the device."]], "quairkit.core.base.set_dtype": [[8, 2, 2, 0, "dtype", "The dtype can be complex64 and complex128."]], "quairkit.core.base.set_seed": [[8, 2, 2, 0, "seed", "the random seed used in QuAIRKit."]], "quairkit.core.hamiltonian": [[9, 1, 1, 0, "Hamiltonian", "Hamiltonian class in QuAIRKit."], [9, 1, 1, 0, "SpinOps", "The spin operators in matrix forms, could be used to construct Hamiltonian matrix or spin observables."]], "quairkit.core.hamiltonian.Hamiltonian": [[9, 4, 1, 0, "coefficients", "The coefficient of each term in the Hamiltonian, i.e. [1.0, 2.0]."], [9, 3, 1, 0, "construct_h_matrix", "Construct a matrix form of the Hamiltonian in Z-basis."], [9, 3, 1, 0, "decompose_pauli_words", "Decompose pauli_str into coefficients and Pauli strings."], [9, 3, 1, 0, "decompose_with_sites", "Decompose pauli_str into coefficients, a simplified form of Pauli strings, and the indices of qubits on which the Pauli operators act on."], [9, 4, 1, 0, "matrix", "The matrix form of the Hamiltonian."], [9, 4, 1, 0, "n_qubits", "Number of qubits."], [9, 4, 1, 0, "n_terms", "Number of terms of the hamiltonian."], [9, 4, 1, 0, "pauli_str", "The Pauli string corresponding to the hamiltonian."], [9, 4, 1, 0, "pauli_words", "The Pauli word of each term, i.e. ['ZIZ', 'IIX']."], [9, 4, 1, 0, "pauli_words_matrix", "The list of matrices with respect to simplied Pauli words."], [9, 4, 1, 0, "pauli_words_r", "A list of Pauli word (exclude I), i.e. ['ZXZZ', 'Z', 'X']."], [9, 4, 1, 0, "sites", "A list of qubits index corresponding to the hamiltonian."], [9, 4, 1, 0, "terms", "All items in hamiltonian, i.e. [['Z0, Z1'], ['I']]."]], "quairkit.core.hamiltonian.Hamiltonian.__init__": [[9, 2, 2, 0, "compress", "Determines whether the input list will be automatically merged (e.g."], [9, 2, 2, 0, "pauli_str", "A list of Hamiltonian information, e.g."]], "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix": [[9, 2, 2, 0, "qubit_num", "The number of qubits."]], "quairkit.core.hamiltonian.SpinOps": [[9, 4, 1, 0, "sigx_p", "A list of S^x_i operators, different elements correspond to different indices i."], [9, 4, 1, 0, "sigy_p", "A list of S^y_i operators, different elements correspond to different indices i."], [9, 4, 1, 0, "sigz_p", "A list of S^z_i operators, different elements correspond to different indices i."]], "quairkit.core.hamiltonian.SpinOps.__init__": [[9, 2, 2, 0, "size", "Size of the system (number of qubits)."], [9, 2, 2, 0, "use_sparse", "Decide whether to use the sparse matrix to calculate."]], "quairkit.core.state": [[14, 0, 0, 1, "state", ""]], "quairkit.core.state.backend": [[12, 0, 0, 1, "density_matrix", ""], [13, 0, 0, 1, "state_vector", ""]], "quairkit.core.state.backend.density_matrix": [[12, 1, 1, 0, "MixedState", "The mixed state class."]], "quairkit.core.state.backend.density_matrix.MixedState": [[12, 4, 1, 0, "system_seq", "The system order of this state"]], "quairkit.core.state.backend.density_matrix.MixedState.__init__": [[12, 2, 2, 0, "data", "tensor array (in density matrix representation) for quantum mixed state(s)."], [12, 2, 2, 0, "probability", "list of state probability distributions."], [12, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [12, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.backend.state_vector": [[13, 1, 1, 0, "PureState", "The pure state class."]], "quairkit.core.state.backend.state_vector.PureState": [[13, 4, 1, 0, "system_seq", "The system order of this state"]], "quairkit.core.state.backend.state_vector.PureState.__init__": [[13, 2, 2, 0, "data", "tensor array in vector representation for quantum pure state(s)."], [13, 2, 2, 0, "probability", "tensor array for state distributions."], [13, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [13, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.state": [[14, 5, 1, 0, "image_to_density_matrix", "Encode image to density matrix"], [14, 5, 1, 0, "tensor_state", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [14, 5, 1, 0, "to_state", "The function to generate a specified state instance."]], "quairkit.core.state.state.image_to_density_matrix": [[14, 2, 2, 0, "image_filepath", "Path to the image file."]], "quairkit.core.state.state.tensor_state": [[14, 2, 2, 0, "args", "other states"], [14, 2, 2, "quairkit.core.state.state.tensor_state", "state_1st", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"]], "quairkit.core.state.state.to_state": [[14, 2, 2, 0, "data", "a representation of the quantum state in allowable backend, or an instance of the State class."], [14, 2, 2, 0, "dtype", "Used to specify the data dtype of the data."], [14, 2, 2, 0, "eps", "The tolerance for checking the validity of the input state."], [14, 2, 2, 0, "prob", "The (list of) probability distribution of the state."], [14, 2, 2, 0, "state_backend", "The backend of the state."], [14, 2, 2, 0, "system_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer. For example, system_dim = 2 means the systems are qubits (default setup); system_dim = [2, 3] means the first system is a qubit and the second is a qutrit."]], "quairkit.core.visual": [[15, 5, 1, 0, "plot_density_matrix_graph", "Density matrix visualization tools"], [15, 5, 1, 0, "plot_multi_qubits_state_in_bloch_sphere", "Displaying the quantum state on the Bloch sphere which has multi qubits."], [15, 5, 1, 0, "plot_rotation_in_bloch_sphere", "Plot the rotation starting from the initial quantum state on the Bloch sphere."], [15, 5, 1, 0, "plot_state_in_bloch_sphere", "Plot the input quantum state on the Bloch sphere."]], "quairkit.core.visual.plot_density_matrix_graph": [[15, 2, 2, 0, "density_matrix", "The state vector or density matrix of quantum state with multi qubits, requiring the number of qubits greater than 1"], [15, 2, 2, 0, "size", "Bar width, between 0 and 1, default is 0.3."]], "quairkit.core.visual.plot_multi_qubits_state_in_bloch_sphere": [[15, 2, 2, 0, "filename", "The name of the picture to be stored."], [15, 2, 2, 0, "save_gif", "Whether to store the gif."], [15, 2, 2, 0, "save_pic", "Whether to store the picture."], [15, 2, 2, 0, "set_color", "To set the specified color, consult the cmap table."], [15, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [15, 2, 2, 0, "state", "List of the input quantum states in the state vector form or the density matrix form."], [15, 2, 2, 0, "view_angle", "View angle."], [15, 2, 2, 0, "view_dist", "View distance."], [15, 2, 2, 0, "which_qubits", "Index of qubits to display, default to be fully displayed."]], "quairkit.core.visual.plot_rotation_in_bloch_sphere": [[15, 2, 2, 0, "color_scheme", "initial color, trace color, and end color, respectively."], [15, 2, 2, 0, "filename", "The name of the gif file to be stored."], [15, 2, 2, 0, "init_state", "Initial quantum state in the state vector form or the density matrix form."], [15, 2, 2, 0, "rotating_angle", "Rotation angle [theta, phi, lam]."], [15, 2, 2, 0, "save_gif", "Whether to store the gif."], [15, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [15, 2, 2, 0, "view_angle", "The first element is the angle [0-360] to the x-y plane, and the second element is the angle [0-360] to the x-z plane."], [15, 2, 2, 0, "view_dist", "View distance."]], "quairkit.core.visual.plot_state_in_bloch_sphere": [[15, 2, 2, 0, "filename", "The name of the gif file to be stored."], [15, 2, 2, 0, "save_gif", "Whether to store the gif."], [15, 2, 2, 0, "set_color", "To set the specified color, consult the cmap table."], [15, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [15, 2, 2, 0, "state", "List of the input quantum states in the state vector form or the density matrix form."], [15, 2, 2, 0, "view_angle", "View angle."], [15, 2, 2, 0, "view_dist", "View distance."]], "quairkit.database": [[17, 0, 0, 1, "hamiltonian", ""], [18, 0, 0, 1, "matrix", ""], [19, 0, 0, 1, "random", ""], [20, 0, 0, 1, "representation", ""], [21, 0, 0, 1, "set", ""], [22, 0, 0, 1, "state", ""]], "quairkit.database.hamiltonian": [[17, 5, 1, 0, "heisenberg_hamiltonian", "Compute the Heisenberg Hamiltonian"], [17, 5, 1, 0, "ising_hamiltonian", "Compute the Ising Hamiltonian"], [17, 5, 1, 0, "xy_hamiltonian", "Compute the Ising Hamiltonian"]], "quairkit.database.hamiltonian.heisenberg_hamiltonian": [[17, 2, 2, 0, "edges", "A tensor E shape=[3, V, V], where E[0][u][v] is alpha_{uv}, E[1][u][v] is beta_{uv} and E[2][u][v] is gamma_{uv}."]], "quairkit.database.hamiltonian.ising_hamiltonian": [[17, 2, 2, 0, "edges", "A tensor E shape=[V, V], where E[u][v] is gamma_{uv}."], [17, 2, 2, 0, "vertices", "A tensor E shape=[V], where V[k] is beta_{k}."]], "quairkit.database.hamiltonian.xy_hamiltonian": [[17, 2, 2, 0, "edges", "A tensor E shape=[2, V, V], where E[0][u][v] is alpha_{uv} and E[1][u][v] is beta_{uv}."]], "quairkit.database.matrix": [[18, 5, 1, 0, "Of", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [18, 5, 1, 0, "Of_gate", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [18, 5, 1, 0, "Uf", "Construct the unitary matrix maps |x\\rangle|y\\rangle to |x\\rangle|y\\oplus f(x)\\rangle based on a boolean function f."], [18, 5, 1, 0, "Uf_gate", "Construct the unitary matrix maps |x\\rangle|y\\rangle to |x\\rangle|y\\oplus f(x)\\rangle based on a boolean function f."], [18, 5, 1, 0, "cnot", "Generate the matrix"], [18, 5, 1, 0, "cnot_gate", "Generate the matrix"], [18, 5, 1, 0, "cp", "Generate the matrix"], [18, 5, 1, 0, "cp_gate", "Generate the matrix"], [18, 5, 1, 0, "crx", "Generate the matrix"], [18, 5, 1, 0, "crx_gate", "Generate the matrix"], [18, 5, 1, 0, "cry", "Generate the matrix"], [18, 5, 1, 0, "cry_gate", "Generate the matrix"], [18, 5, 1, 0, "crz", "Generate the matrix"], [18, 5, 1, 0, "crz_gate", "Generate the matrix"], [18, 5, 1, 0, "cswap", "Generate the matrix"], [18, 5, 1, 0, "cswap_gate", "Generate the matrix"], [18, 5, 1, 0, "cu", "Generate the matrix"], [18, 5, 1, 0, "cu_gate", "Generate the matrix"], [18, 5, 1, 0, "cy", "Generate the matrix"], [18, 5, 1, 0, "cy_gate", "Generate the matrix"], [18, 5, 1, 0, "cz", "Generate the matrix"], [18, 5, 1, 0, "cz_gate", "Generate the matrix"], [18, 5, 1, 0, "eye", "Generate the matrix (when dim = 2)"], [18, 5, 1, 0, "eye_gate", "Generate the matrix (when dim = 2)"], [18, 5, 1, 0, "grover_matrix", "Construct the Grover operator based on oracle."], [18, 5, 1, 0, "h", "Generate the matrix"], [18, 5, 1, 0, "h_gate", "Generate the matrix"], [18, 5, 1, 0, "ms", "Generate the matrix"], [18, 5, 1, 0, "ms_gate", "Generate the matrix"], [18, 5, 1, 0, "p", "Generate the matrix"], [18, 5, 1, 0, "p_gate", "Generate the matrix"], [18, 5, 1, 0, "phase", "Generate phase operator for qudit"], [18, 5, 1, 0, "phase_gate", "Generate phase operator for qudit"], [18, 5, 1, 0, "qft_matrix", "Construct the quantum fourier transpose (QFT) gate."], [18, 5, 1, 0, "rx", "Generate the matrix"], [18, 5, 1, 0, "rx_gate", "Generate the matrix"], [18, 5, 1, 0, "rxx", "Generate the matrix"], [18, 5, 1, 0, "rxx_gate", "Generate the matrix"], [18, 5, 1, 0, "ry", "Generate the matrix"], [18, 5, 1, 0, "ry_gate", "Generate the matrix"], [18, 5, 1, 0, "ryy", "Generate the matrix"], [18, 5, 1, 0, "ryy_gate", "Generate the matrix"], [18, 5, 1, 0, "rz", "Generate the matrix"], [18, 5, 1, 0, "rz_gate", "Generate the matrix"], [18, 5, 1, 0, "rzz", "Generate the matrix"], [18, 5, 1, 0, "rzz_gate", "Generate the matrix"], [18, 5, 1, 0, "s", "Generate the matrix"], [18, 5, 1, 0, "s_gate", "Generate the matrix"], [18, 5, 1, 0, "sdg", "Generate the matrix"], [18, 5, 1, 0, "sdg_gate", "Generate the matrix"], [18, 5, 1, 0, "shift", "Generate shift operator for qudit"], [18, 5, 1, 0, "shift_gate", "Generate shift operator for qudit"], [18, 5, 1, 0, "swap", "Generate the matrix"], [18, 5, 1, 0, "swap_gate", "Generate the matrix"], [18, 5, 1, 0, "t", "Generate the matrix"], [18, 5, 1, 0, "t_gate", "Generate the matrix"], [18, 5, 1, 0, "tdg", "Generate the matrix"], [18, 5, 1, 0, "tdg_gate", "Generate the matrix"], [18, 5, 1, 0, "toffoli", "Generate the matrix"], [18, 5, 1, 0, "toffoli_gate", "Generate the matrix"], [18, 5, 1, 0, "u3", "Generate the matrix"], [18, 5, 1, 0, "u3_gate", "Generate the matrix"], [18, 5, 1, 0, "universal2", "Generate the matrix"], [18, 5, 1, 0, "universal2_gate", "Generate the matrix"], [18, 5, 1, 0, "universal3", "Generate the matrix"], [18, 5, 1, 0, "universal3_gate", "Generate the matrix"], [18, 5, 1, 0, "universal_qudit", "Generalized GellMann matrix basis were used to construct the universal gate for qudits"], [18, 5, 1, 0, "x", "Generate the matrix"], [18, 5, 1, 0, "x_gate", "Generate the matrix"], [18, 5, 1, 0, "y", "Generate the matrix"], [18, 5, 1, 0, "y_gate", "Generate the matrix"], [18, 5, 1, 0, "z", "Generate the matrix"], [18, 5, 1, 0, "z_gate", "Generate the matrix"]], "quairkit.database.matrix.Of": [[18, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [18, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Of_gate": [[18, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [18, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Uf": [[18, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [18, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Uf_gate": [[18, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [18, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.cp": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cp_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crx": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crx_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cry": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cry_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crz": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crz_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cu": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cu_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.eye": [[18, 2, 2, 0, "dim", "the dimension of the identity matrix."]], "quairkit.database.matrix.eye_gate": [[18, 2, 2, 0, "dim", "the dimension of the identity matrix."]], "quairkit.database.matrix.grover_matrix": [[18, 2, 2, "quairkit.database.matrix.grover_matrix", "dtype", "Construct the Grover operator based on oracle."], [18, 2, 2, 0, "oracle", "the input oracle A to be rotated."]], "quairkit.database.matrix.p": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.p_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.phase": [[18, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.phase_gate": [[18, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.qft_matrix": [[18, 2, 2, 0, "num_qubits", "number of qubits n st."]], "quairkit.database.matrix.rx": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rx_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rxx": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rxx_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ry": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ry_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ryy": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ryy_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rz": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rz_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rzz": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rzz_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.shift": [[18, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.shift_gate": [[18, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.u3": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.u3_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal2": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal2_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal3": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal3_gate": [[18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal_qudit": [[18, 2, 2, 0, "dimension", "the dimension of the qudit"], [18, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.random": [[19, 5, 1, 0, "haar_density_operator", "randomly generate a density matrix following Haar random"], [19, 5, 1, 0, "haar_orthogonal", "randomly generate an orthogonal matrix following Haar random, referenced by arXiv:math-ph/0609050v2"], [19, 5, 1, 0, "haar_state_vector", "randomly generate a state vector following Haar random"], [19, 5, 1, 0, "haar_unitary", "randomly generate a unitary following Haar random, referenced by arXiv:math-ph/0609050v2"], [19, 5, 1, 0, "random_channel", "Generate a random channel from its Stinespring representation"], [19, 5, 1, 0, "random_clifford", "Generate a random Clifford unitary."], [19, 5, 1, 0, "random_density_matrix", "randomly generate an num_qubits-qubit state in density matrix form"], [19, 5, 1, 0, "random_hamiltonian_generator", "Generate a random Hamiltonian."], [19, 5, 1, 0, "random_hermitian", "randomly generate a normalized 2^n \\times 2^n hermitian matrix"], [19, 5, 1, 0, "random_orthogonal_projection", "randomly generate a d \\times d rank-1 orthogonal projector"], [19, 5, 1, 0, "random_pauli_str_generator", "Generate a random observable in list form."], [19, 5, 1, 0, "random_projector", "randomly generate a d \\times d rank-1 orthogonal projector"], [19, 5, 1, 0, "random_state", "Generate a random quantum state."], [19, 5, 1, 0, "random_unitary", "randomly generate a d \\times d unitary"], [19, 5, 1, 0, "random_unitary_hermitian", "randomly generate a 2^n \\times 2^n hermitian unitary"], [19, 5, 1, 0, "random_unitary_with_hermitian_block", "randomly generate a unitary 2^n \\times 2^n matrix that is a block encoding of a 2^{n/2} \\times 2^{n/2} Hermitian matrix"]], "quairkit.database.random.haar_density_operator": [[19, 2, 2, 0, "dim", "dimension of density matrix"], [19, 2, 2, 0, "is_real", "whether the density matrix is real, default to be False"], [19, 2, 2, 0, "rank", "rank of density matrix, default to be None refering to full ranks"]], "quairkit.database.random.haar_orthogonal": [[19, 2, 2, 0, "dim", "dimension of orthogonal matrix"]], "quairkit.database.random.haar_state_vector": [[19, 2, 2, 0, "dim", "dimension of density matrix"], [19, 2, 2, 0, "is_real", "whether the vector is real, default to be False"]], "quairkit.database.random.haar_unitary": [[19, 2, 2, 0, "dim", "dimension of unitary"]], "quairkit.database.random.random_channel": [[19, 2, 2, 0, "num_systems", "number of systems"], [19, 2, 2, 0, "rank", "rank of this Channel."], [19, 2, 2, 0, "size", "batch size."], [19, 2, 2, 0, "system_dim", "dimension of systems."], [19, 2, 2, 0, "target", "target representation, should be 'choi', 'kraus' or 'stinespring'"]], "quairkit.database.random.random_clifford": [[19, 2, 2, 0, "num_qubits", "The number of qubits (n)."]], "quairkit.database.random.random_density_matrix": [[19, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_hamiltonian_generator": [[19, 2, 2, 0, "num_qubits", "Number of qubits."], [19, 2, 2, 0, "terms", "Number of terms in the Hamiltonian."]], "quairkit.database.random.random_hermitian": [[19, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_orthogonal_projection": [[19, 2, 2, 0, "num_systems", "number of systems"], [19, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.random.random_pauli_str_generator": [[19, 2, 2, 0, "num_qubits", "Number of qubits."], [19, 2, 2, 0, "terms", "Number of terms in the observable."]], "quairkit.database.random.random_projector": [[19, 2, 2, 0, "num_systems", "number of systems"], [19, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.random.random_state": [[19, 2, 2, 0, "is_real", "If the quantum state only contains the real number."], [19, 2, 2, 0, "num_systems", "The number of qubits contained in the quantum state."], [19, 2, 2, 0, "rank", "The rank of the density matrix."], [19, 2, 2, 0, "size", "Batch size."], [19, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.random.random_unitary": [[19, 2, 2, 0, "num_systems", "number of systems in this unitary."], [19, 2, 2, 0, "size", "batch size."], [19, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.random.random_unitary_hermitian": [[19, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_unitary_with_hermitian_block": [[19, 2, 2, 0, "is_unitary", "whether the hermitian block is a unitary divided by 2 (for tutorial only)"], [19, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.representation": [[20, 5, 1, 0, "amplitude_damping_kraus", "Kraus representation of an amplitude damping channel with form"], [20, 5, 1, 0, "bit_flip_kraus", "Kraus representation of a bit flip channel with form"], [20, 5, 1, 0, "bit_phase_flip_kraus", "Kraus representation of a bit-phase flip channel with form"], [20, 5, 1, 0, "depolarizing_kraus", "Kraus representation of a depolarizing channel with form"], [20, 5, 1, 0, "generalized_amplitude_damping_kraus", "Kraus representation of a generalized amplitude damping channel with form"], [20, 5, 1, 0, "generalized_depolarizing_kraus", "Kraus representation of a generalized depolarizing channel with form"], [20, 5, 1, 0, "pauli_kraus", "Kraus representation of a pauli channel"], [20, 5, 1, 0, "phase_damping_kraus", "Kraus representation of a phase damping channel with form"], [20, 5, 1, 0, "phase_flip_kraus", "Kraus representation of a phase flip channel with form"], [20, 5, 1, 0, "replacement_choi", "Choi representation of a replacement channel"], [20, 5, 1, 0, "reset_kraus", "Kraus representation of a reset channel with form"], [20, 5, 1, 0, "thermal_relaxation_kraus", "Kraus representation of a thermal relaxation channel"]], "quairkit.database.representation.amplitude_damping_kraus": [[20, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.bit_flip_kraus": [[20, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.bit_phase_flip_kraus": [[20, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.depolarizing_kraus": [[20, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_amplitude_damping_kraus": [[20, 2, 2, 0, "gamma", "coefficient \\gamma."], [20, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_depolarizing_kraus": [[20, 2, 2, 0, "dtype", "data type."], [20, 2, 2, 0, "num_qubits", "number of qubits n of this channel."], [20, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.pauli_kraus": [[20, 2, 2, 0, "prob", "a list of three probabilities corresponding to X, Y, Z gate p."]], "quairkit.database.representation.phase_damping_kraus": [[20, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.phase_flip_kraus": [[20, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.replacement_choi": [[20, 2, 2, 0, "sigma", "output state of this channel."]], "quairkit.database.representation.reset_kraus": [[20, 2, 2, 0, "prob", "list of two probabilities of resetting to state |0\\rangle and |1\\rangle."]], "quairkit.database.representation.thermal_relaxation_kraus": [[20, 2, 2, 0, "const_t", "list of T_1 and T_2 relaxation time in microseconds."], [20, 2, 2, 0, "exec_time", "quantum gate execution time in the process of relaxation in nanoseconds."]], "quairkit.database.set": [[21, 5, 1, 0, "bell_basis", "Generate the Bell basis for a 2-qubit system, with each basis state accessible along the first dimension of a tensor."], [21, 5, 1, 0, "gell_mann", "Generate a set of Gell-Mann matrices for a given dimension. These matrices span the entire space dim-by-dim matrices, and they generalize the Pauli operators when dim = 2 and the Gell-Mann operators when dim = 3."], [21, 5, 1, 0, "heisenberg_weyl", "The Heisenberg-Weyl operators are defined as T(a,b) = e^{-(d+1) \\pi i a b/ d}Z^a X^b."], [21, 5, 1, 0, "pauli_basis", "Generate a Pauli basis."], [21, 5, 1, 0, "pauli_group", "Generate a Pauli group i.e., an unnormalized Pauli basis."], [21, 5, 1, 0, "pauli_str_basis", "Get the state basis with respect to the Pauli string"], [21, 5, 1, 0, "pauli_str_povm", "Get the povm with respect to the Pauli string"], [21, 5, 1, 0, "phase_space_point", "Generate phase space point operator for qudit"], [21, 5, 1, 0, "qft_basis", "Compute the eigenvectors (eigenbasis) of the Quantum Fourier Transform (QFT) matrix."], [21, 5, 1, 0, "std_basis", "Generate all standard basis states for a given number of qubits."]], "quairkit.database.set.gell_mann": [[21, 2, 2, 0, "dim", "a positive integer indicating the dimension."]], "quairkit.database.set.heisenberg_weyl": [[21, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.pauli_basis": [[21, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_group": [[21, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_str_basis": [[21, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.pauli_str_povm": [[21, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.phase_space_point": [[21, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.qft_basis": [[21, 2, 2, 0, "num_qubits", "Number of qubits n such that N = 2^n."]], "quairkit.database.set.std_basis": [[21, 2, 2, 0, "num_systems", "number of systems in this state."], [21, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.state": [[22, 5, 1, 0, "bell_diagonal_state", "Generate a bell diagonal state."], [22, 5, 1, 0, "bell_state", "Generate a bell state."], [22, 5, 1, 0, "completely_mixed_computational", "Generate the density matrix of the completely mixed state."], [22, 5, 1, 0, "computational_state", "Generate a computational state |e_{i}\\rangle , whose i-th element is 1 and all the other elements are 0."], [22, 5, 1, 0, "ghz_state", "Generate a GHZ-state."], [22, 5, 1, 0, "isotropic_state", "Generate the isotropic state."], [22, 5, 1, 0, "one_state", "The function to generate a one state."], [22, 5, 1, 0, "r_state", "Generate an R-state."], [22, 5, 1, 0, "s_state", "Generate the S-state."], [22, 5, 1, 0, "w_state", "Generate a W-state."], [22, 5, 1, 0, "zero_state", "The function to generate a zero state."]], "quairkit.database.state.bell_diagonal_state": [[22, 2, 2, 0, "prob", "The prob of each bell state."]], "quairkit.database.state.bell_state": [[22, 2, 2, 0, "num_systems", "number of systems in this state."], [22, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.state.completely_mixed_computational": [[22, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.computational_state": [[22, 2, 2, 0, "index", "Index i of the computational basis state |e_{i}rangle ."], [22, 2, 2, 0, "num_systems", "number of systems in this state."], [22, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.state.ghz_state": [[22, 2, 2, 0, "num_qubits", "The number of qubits contained izn the quantum state."]], "quairkit.database.state.isotropic_state": [[22, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."], [22, 2, 2, 0, "prob", "The parameter of the isotropic state to be generated."]], "quairkit.database.state.one_state": [[22, 2, 2, 0, "num_systems", "number of systems in this state."], [22, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.state.r_state": [[22, 2, 2, 0, "prob", "The parameter of the R-state to be generated."]], "quairkit.database.state.s_state": [[22, 2, 2, 0, "prob", "The parameter of the S-state to be generated."]], "quairkit.database.state.w_state": [[22, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.zero_state": [[22, 2, 2, 0, "num_systems", "number of systems in this state."], [22, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.loss": [[24, 0, 0, 1, "distance", ""], [25, 0, 0, 1, "measure", ""]], "quairkit.loss.distance": [[24, 1, 1, 0, "StateFidelity", "The class of the loss function to compute the state fidelity."], [24, 1, 1, 0, "TraceDistance", "The class of the loss function to compute the trace distance."]], "quairkit.loss.distance.StateFidelity": [[24, 3, 1, 0, "forward", "Compute the state fidelity between the input state and the target state."]], "quairkit.loss.distance.StateFidelity.__init__": [[24, 2, 2, 0, "target_state", "The target state to be used to compute the state fidelity."]], "quairkit.loss.distance.StateFidelity.forward": [[24, 2, 2, 0, "state", "The input state which will be used to compute the state fidelity with the target state."]], "quairkit.loss.distance.TraceDistance": [[24, 3, 1, 0, "forward", "Compute the trace distance between the input state and the target state."]], "quairkit.loss.distance.TraceDistance.__init__": [[24, 2, 2, 0, "target_state", "The target state to be used to compute the trace distance."]], "quairkit.loss.distance.TraceDistance.forward": [[24, 2, 2, 0, "state", "The input state which will be used to compute the trace distance with the target state."]], "quairkit.loss.measure": [[25, 1, 1, 0, "ExpecVal", "The class of the loss function to compute the expectation value for the observable."], [25, 1, 1, 0, "Measure", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.ExpecVal": [[25, 3, 1, 0, "forward", "Compute the expectation value of the observable with respect to the input state."]], "quairkit.loss.measure.ExpecVal.__init__": [[25, 2, 2, 0, "hamiltonian", "The input observable."]], "quairkit.loss.measure.ExpecVal.forward": [[25, 2, 2, 0, "decompose", "Defaults to False."], [25, 2, 2, 0, "state", "The input state which will be used to compute the expectation value."]], "quairkit.loss.measure.Measure": [[25, 3, 1, 0, "forward", "Compute the probability of measurement to the input state."]], "quairkit.loss.measure.Measure.__init__": [[25, 2, 2, 0, "measure_op", "Specify the basis of the measurement."]], "quairkit.loss.measure.Measure.forward": [[25, 2, 2, 0, "desired_result", "Specify the results of the measurement to return."], [25, 2, 2, 0, "keep_state", "Whether return the measured state."], [25, 2, 2, 0, "state", "The quantum state to be measured."], [25, 2, 2, 0, "system_idx", "The index of the systems to be measured."]], "quairkit.operator": [[37, 0, 0, 1, "special", ""]], "quairkit.operator.channel": [[28, 0, 0, 1, "base", ""], [29, 0, 0, 1, "common", ""], [30, 0, 0, 1, "custom", ""]], "quairkit.operator.channel.base": [[28, 1, 1, 0, "Channel", "Basic class for quantum channels."]], "quairkit.operator.channel.base.Channel": [[28, 4, 1, 0, "choi_repr", "Choi representation of a channel"], [28, 4, 1, 0, "dim", "Dimension of the input/output system of this channel"], [28, 4, 1, 0, "kraus_repr", "Kraus representation of a channel"], [28, 4, 1, 0, "stinespring_repr", "Stinespring representation of a channel"]], "quairkit.operator.channel.base.Channel.__init__": [[28, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [28, 2, 2, 0, "check_legality", "whether check the completeness of the representation if provided."], [28, 2, 2, 0, "representation", "the representation of this channel."], [28, 2, 2, 0, "system_idx", "indices of the system on which this channel acts on."], [28, 2, 2, 0, "type_repr", "type of a representation, should be 'choi', 'kraus', 'stinespring' or 'gate'."]], "quairkit.operator.channel.common": [[29, 1, 1, 0, "AmplitudeDamping", "A collection of amplitude damping channels."], [29, 1, 1, 0, "BitFlip", "A collection of bit flip channels."], [29, 1, 1, 0, "BitPhaseFlip", "A collection of bit phase flip channels."], [29, 1, 1, 0, "Depolarizing", "A collection of depolarizing channels."], [29, 1, 1, 0, "GeneralizedAmplitudeDamping", "A collection of generalized amplitude damping channels."], [29, 1, 1, 0, "GeneralizedDepolarizing", "A generalized depolarizing channel."], [29, 1, 1, 0, "PauliChannel", "A collection of Pauli channels."], [29, 1, 1, 0, "PhaseDamping", "A collection of phase damping channels."], [29, 1, 1, 0, "PhaseFlip", "A collection of phase flip channels."], [29, 1, 1, 0, "ReplacementChannel", "A collection of quantum replacement channels."], [29, 1, 1, 0, "ResetChannel", "A collection of reset channels."], [29, 1, 1, 0, "ThermalRelaxation", "A collection of thermal relaxation channels."]], "quairkit.operator.channel.common.AmplitudeDamping.__init__": [[29, 2, 2, 0, "gamma", "Damping probability."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitFlip.__init__": [[29, 2, 2, 0, "prob", "Probability of a bit flip."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitPhaseFlip.__init__": [[29, 2, 2, 0, "prob", "Probability of a bit phase flip."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.Depolarizing.__init__": [[29, 2, 2, 0, "prob", "Parameter of the depolarizing channels."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedAmplitudeDamping.__init__": [[29, 2, 2, 0, "gamma", "Damping probability."], [29, 2, 2, 0, "prob", "Excitation probability."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedDepolarizing.__init__": [[29, 2, 2, 0, "num_qubits", "Total number of qubits."], [29, 2, 2, 0, "prob", "probability p."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."]], "quairkit.operator.channel.common.PauliChannel.__init__": [[29, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseDamping.__init__": [[29, 2, 2, 0, "gamma", "Parameter of the phase damping channels."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseFlip.__init__": [[29, 2, 2, 0, "prob", "Probability of a phase flip."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ReplacementChannel.__init__": [[29, 2, 2, 0, "sigma", "The state to be replaced."], [29, 2, 2, 0, "system_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to list(range(# of acted qubits))."]], "quairkit.operator.channel.common.ResetChannel.__init__": [[29, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ThermalRelaxation.__init__": [[29, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [29, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.custom": [[30, 1, 1, 0, "ChoiRepr", "A custom channel in Choi representation."], [30, 1, 1, 0, "KrausRepr", "A custom channel in Kraus representation."], [30, 1, 1, 0, "StinespringRepr", "A custom channel in Stinespring representation."]], "quairkit.operator.channel.custom.ChoiRepr.__init__": [[30, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [30, 2, 2, 0, "choi_repr", "Choi operator of this channel."], [30, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.channel.custom.KrausRepr.__init__": [[30, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [30, 2, 2, 0, "kraus_repr", "list of Kraus operators of this channel."], [30, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.channel.custom.StinespringRepr.__init__": [[30, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [30, 2, 2, 0, "stinespring_mat", "Stinespring matrix that represents this channel."], [30, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.gate": [[32, 0, 0, 1, "base", ""], [33, 0, 0, 1, "custom", ""], [34, 0, 0, 1, "multi_qubit_gate", ""], [35, 0, 0, 1, "single_qubit_gate", ""], [36, 0, 0, 1, "visual", ""]], "quairkit.operator.gate.base": [[32, 1, 1, 0, "Gate", "Base class for quantum gates."], [32, 1, 1, 0, "ParamGate", "Base class for quantum parameterized gates."]], "quairkit.operator.gate.base.Gate": [[32, 3, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [32, 3, 1, 0, "gate_history_generation", "determine self.gate_history"], [32, 4, 1, 0, "matrix", "Unitary matrix of this gate"], [32, 3, 1, 0, "set_gate_info", "the interface to set self.gate_info"]], "quairkit.operator.gate.base.Gate.__init__": [[32, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [32, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [32, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [32, 2, 2, 0, "matrix", "the matrix of this gate."], [32, 2, 2, 0, "system_idx", "indices of the systems that this gate acts on."]], "quairkit.operator.gate.base.Gate.display_in_circuit": [[32, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [32, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.base.Gate.set_gate_info": [[32, 2, 2, 0, "kwargs", "parameters to set self.gate_info"]], "quairkit.operator.gate.base.ParamGate": [[32, 3, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [32, 3, 1, 0, "gate_history_generation", "determine self.gate_history when gate is parameterized"]], "quairkit.operator.gate.base.ParamGate.__init__": [[32, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [32, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [32, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [32, 2, 2, 0, "generator", "function that generates the unitary matrix of this gate."], [32, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [32, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [32, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [32, 2, 2, "quairkit.operator.gate.base.ParamGate", "system_idx", "Base class for quantum parameterized gates."]], "quairkit.operator.gate.base.ParamGate.display_in_circuit": [[32, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [32, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.custom": [[33, 1, 1, 0, "ControlOracle", "A controlled oracle as a gate."], [33, 1, 1, 0, "Oracle", "An oracle as a gate."], [33, 1, 1, 0, "ParamOracle", "An parameterized oracle as a gate"], [33, 1, 1, 0, "UniversalQudits", "A collection of universal qudit gates. One of such a gate requires d^2 - 1 parameters."]], "quairkit.operator.gate.custom.ControlOracle.__init__": [[33, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "acted_system_dim", "A controlled oracle as a gate."], [33, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "gate_info", "A controlled oracle as a gate."], [33, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "oracle", "A controlled oracle as a gate."], [33, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "proj", "A controlled oracle as a gate."], [33, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "system_idx", "A controlled oracle as a gate."]], "quairkit.operator.gate.custom.Oracle.__init__": [[33, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [33, 2, 2, "quairkit.operator.gate.custom.Oracle", "gate_info", "An oracle as a gate."], [33, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [33, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.ParamOracle.__init__": [[33, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [33, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [33, 2, 2, 0, "generator", "function that generates the oracle."], [33, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [33, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [33, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [33, 2, 2, 0, "system_idx", "indices of the system on which this gate acts on."]], "quairkit.operator.gate.custom.UniversalQudits.__init__": [[33, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "system_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate": [[34, 1, 1, 0, "CCX", "A collection of CCX (Toffoli) gates."], [34, 1, 1, 0, "CNOT", "A collection of CNOT gates."], [34, 1, 1, 0, "CP", "A collection of controlled P gates."], [34, 1, 1, 0, "CRX", "A collection of controlled rotation gates about the x-axis."], [34, 1, 1, 0, "CRY", "A collection of controlled rotation gates about the y-axis."], [34, 1, 1, 0, "CRZ", "A collection of controlled rotation gates about the z-axis."], [34, 1, 1, 0, "CSWAP", "A collection of CSWAP (Fredkin) gates."], [34, 1, 1, 0, "CU", "A collection of controlled single-qubit rotation gates."], [34, 6, 1, 0, "CX", "alias of CNOT"], [34, 1, 1, 0, "CY", "A collection of controlled Y gates."], [34, 1, 1, 0, "CZ", "A collection of controlled Z gates."], [34, 1, 1, 0, "MS", "A collection of M\u00f8lmer-S\u00f8rensen (MS) gates for trapped ion devices."], [34, 1, 1, 0, "RXX", "A collection of RXX gates."], [34, 1, 1, 0, "RYY", "A collection of RYY gates."], [34, 1, 1, 0, "RZZ", "A collection of RZZ gates."], [34, 1, 1, 0, "SWAP", "A collection of SWAP gates."], [34, 6, 1, 0, "Toffoli", "alias of CCX"], [34, 1, 1, 0, "UniversalThreeQubits", "A collection of universal three-qubit gates. One of such a gate requires 81 parameters."], [34, 1, 1, 0, "UniversalTwoQubits", "A collection of universal two-qubit gates. One of such a gate requires 15 parameters."]], "quairkit.operator.gate.multi_qubit_gate.CCX.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CNOT.__init__": [[34, 2, 2, 0, "cnot_idx", "CNOT gate index."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CP.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRX.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRY.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRZ.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CSWAP.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CU.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CY.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CZ.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.MS.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RXX.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RYY.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RZZ.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.SWAP.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.UniversalThreeQubits.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.UniversalTwoQubits.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate": [[35, 1, 1, 0, "H", "A collection of single-qubit Hadamard gates."], [35, 1, 1, 0, "P", "A collection of single-qubit P gates."], [35, 1, 1, 0, "RX", "A collection of single-qubit rotation gates about the x-axis."], [35, 1, 1, 0, "RY", "A collection of single-qubit rotation gates about the y-axis."], [35, 1, 1, 0, "RZ", "A collection of single-qubit rotation gates about the z-axis."], [35, 1, 1, 0, "S", "A collection of single-qubit S gates."], [35, 1, 1, 0, "Sdg", "A collection of single-qubit S dagger (S inverse) gates."], [35, 1, 1, 0, "T", "A collection of single-qubit T gates."], [35, 1, 1, 0, "Tdg", "A collection of single-qubit T dagger (T inverse) gates."], [35, 1, 1, 0, "U3", "A collection of single-qubit rotation gates."], [35, 1, 1, 0, "X", "A collection of single-qubit X gates."], [35, 1, 1, 0, "Y", "A collection of single-qubit Y gates."], [35, 1, 1, 0, "Z", "A collection of single-qubit Z gates."]], "quairkit.operator.gate.single_qubit_gate.H.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.P.__init__": [[35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RX.__init__": [[35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RY.__init__": [[35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RZ.__init__": [[35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.S.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Sdg.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.T.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Tdg.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.U3.__init__": [[35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.X.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Y.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Z.__init__": [[35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.visual": [[36, 5, 1, 0, "get_circuit_plot_param", "The output function of __CIRCUIT_PLOT_PARAM dictionary"], [36, 5, 1, 0, "reset_circuit_plot_param", "The reset function of __CIRCUIT_PLOT_PARAM dictionary"], [36, 5, 1, 0, "scale_circuit_plot_param", "The scale function of __CIRCUIT_PLOT_PARAM dictionary"], [36, 5, 1, 0, "set_circuit_plot_param", "The set function of __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.gate.visual.scale_circuit_plot_param": [[36, 2, 2, 0, "scale", "the scalar for scaling the elements in the figure"]], "quairkit.operator.gate.visual.set_circuit_plot_param": [[36, 2, 2, 0, "kwargs", "parameters to update the __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.special": [[37, 1, 1, 0, "Collapse", "The class to compute the collapse of the quantum state."], [37, 1, 1, 0, "OneWayLOCC", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [37, 1, 1, 0, "QuasiOperation", "A quantum protocol containing quasi-operations."], [37, 1, 1, 0, "ResetState", "The class to reset the quantum state. It will be implemented soon."]], "quairkit.operator.special.Collapse": [[37, 3, 1, 0, "forward", "Compute the collapse of the input state."]], "quairkit.operator.special.Collapse.__init__": [[37, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [37, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [37, 2, 2, 0, "measure_basis", "The basis of the measurement."], [37, 2, 2, 0, "system_idx", "list of systems to be collapsed."]], "quairkit.operator.special.Collapse.forward": [[37, 2, 2, 0, "state", "The input state, which will be collapsed"]], "quairkit.operator.special.OneWayLOCC": [[37, 3, 1, 0, "forward", "Compute the input state passing through the LOCC protocol."]], "quairkit.operator.special.OneWayLOCC.__init__": [[37, 2, 2, 0, "acted_system_dim", "dimension of systems that unitary channels act on."], [37, 2, 2, 0, "list_unitary", "a batched tensor that represents all unitaries."], [37, 2, 2, 0, "measure_basis", "The basis of the measurement."], [37, 2, 2, 0, "system_idx", "Indices of the systems on which the protocol is applied."]], "quairkit.operator.special.OneWayLOCC.forward": [[37, 2, 2, 0, "state", "The input state."]], "quairkit.operator.special.QuasiOperation": [[37, 3, 1, 0, "forward", "Compute the input state passing through the quasi-operation."]], "quairkit.operator.special.QuasiOperation.__init__": [[37, 2, 2, 0, "acted_system_dim", "dimension of systems that these channels act on."], [37, 2, 2, 0, "list_channels", "a batched tensor that represents all unitaries."], [37, 2, 2, 0, "quasi_prob", "the quasi-probability distribution for this quasi-operation."], [37, 2, 2, 0, "system_idx", "indices of the systems on which the protocol is applied."], [37, 2, 2, 0, "type_repr", "one of 'choi', 'kraus', 'stinespring' or 'gate'."]], "quairkit.operator.special.QuasiOperation.forward": [[37, 2, 2, 0, "state", "The input state."]], "quairkit.operator.special.ResetState": [[37, 3, 1, 0, "forward", "The forward function."]], "quairkit.operator.special.ResetState.forward": [[37, 2, 2, "quairkit.operator.special.ResetState.forward", "inputs", "The forward function."], [37, 2, 2, "quairkit.operator.special.ResetState.forward", "kwargs", "The forward function."]], "quairkit.qinfo": [[39, 0, 0, 1, "check", ""], [40, 0, 0, 1, "linalg", ""], [41, 0, 0, 1, "qinfo", ""]], "quairkit.qinfo.check": [[39, 5, 1, 0, "is_choi", "Support batch input."], [39, 5, 1, 0, "is_density_matrix", "Support batch input"], [39, 5, 1, 0, "is_hermitian", "Support batch input."], [39, 5, 1, 0, "is_linear", "Check if the provided function 'func' is linear."], [39, 5, 1, 0, "is_positive", "Support batch input."], [39, 5, 1, 0, "is_povm", "Check if a set of operators forms a positive operator-valued measure (POVM)."], [39, 5, 1, 0, "is_ppt", "Support batch input."], [39, 5, 1, 0, "is_projector", "Support batch input."], [39, 5, 1, 0, "is_pvm", "Check if a set of operators forms a projection-valued measure (PVM)."], [39, 5, 1, 0, "is_state_vector", "Support batch input."], [39, 5, 1, 0, "is_unitary", "Support batch input."]], "quairkit.qinfo.check.is_choi": [[39, 2, 2, 0, "op", "matrix form of the linear operation."]], "quairkit.qinfo.check.is_density_matrix": [[39, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [39, 2, 2, 0, "rho", "density matrix candidate"]], "quairkit.qinfo.check.is_hermitian": [[39, 2, 2, 0, "eps", "tolerance of error"], [39, 2, 2, 0, "mat", "hermitian candidate P"]], "quairkit.qinfo.check.is_linear": [[39, 2, 2, 0, "eps", "An optional tolerance value used to determine if the function's behavior is close enough to linear."], [39, 2, 2, 0, "func", "A callable function to be tested."], [39, 2, 2, 0, "info", "A parameter specifying the shape of the input for 'func'."], [39, 2, 2, "quairkit.qinfo.check.is_linear", "input_dtype", "Check if the provided function 'func' is linear."]], "quairkit.qinfo.check.is_positive": [[39, 2, 2, 0, "eps", "tolerance of error"], [39, 2, 2, 0, "mat", "positive operator candidate P"]], "quairkit.qinfo.check.is_povm": [[39, 2, 2, 0, "eps", "An optional tolerance value."], [39, 2, 2, 0, "set_op", "A set of operators indexed by the first dimension"]], "quairkit.qinfo.check.is_ppt": [[39, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.check.is_projector": [[39, 2, 2, 0, "eps", "tolerance of error"], [39, 2, 2, 0, "mat", "projector candidate P"]], "quairkit.qinfo.check.is_pvm": [[39, 2, 2, 0, "eps", "An optional tolerance value."], [39, 2, 2, 0, "set_op", "A set of operators indexed by the first dimension"]], "quairkit.qinfo.check.is_state_vector": [[39, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [39, 2, 2, 0, "vec", "state vector candidate x"]], "quairkit.qinfo.check.is_unitary": [[39, 2, 2, 0, "eps", "tolerance of error"], [39, 2, 2, 0, "mat", "unitary candidate P"]], "quairkit.qinfo.linalg": [[40, 5, 1, 0, "NKron", "calculate Kronecker product of matirces"], [40, 5, 1, 0, "abs_norm", "tool for calculation of matrix norm"], [40, 5, 1, 0, "block_enc_herm", "generate a (qubitized) block encoding of hermitian mat"], [40, 5, 1, 0, "create_matrix", "Create a matrix representation of a linear map without needing to specify the output dimension."], [40, 5, 1, 0, "dagger", "tool for calculation of matrix dagger"], [40, 5, 1, 0, "direct_sum", "calculate the direct sum of A and B"], [40, 5, 1, 0, "gradient", "Computes the gradient of a given loss function with respect to its input variable."], [40, 5, 1, 0, "herm_transform", "function transformation for Hermitian matrix"], [40, 5, 1, 0, "hessian", "Computes the Hessian matrix of a given loss function with respect to its input variables."], [40, 5, 1, 0, "kron_power", "Calculate Kronecker product of identical matirces"], [40, 5, 1, 0, "logm", "Calculate log of a matrix"], [40, 5, 1, 0, "nkron", "calculate Kronecker product of matirces"], [40, 5, 1, 0, "p_norm", "tool for calculation of Schatten p-norm"], [40, 5, 1, 0, "partial_trace", "Calculate the partial trace of the quantum state"], [40, 5, 1, 0, "partial_trace_discontiguous", "Calculate the partial trace of the quantum state with arbitrarily selected subsystem"], [40, 5, 1, 0, "partial_transpose", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [40, 5, 1, 0, "pauli_decomposition", "Decompose the matrix by the Pauli basis."], [40, 5, 1, 0, "permute_systems", "Permute quantum system based on a permute list"], [40, 5, 1, 0, "prob_sample", "Sample from a probability distribution."], [40, 5, 1, 0, "schmidt_decompose", "Calculate the Schmidt decomposition of a quantum state \\lvert\\psi\\rangle=\\sum_ic_i\\lvert i_A\\rangle\\otimes\\lvert i_B \\rangle."], [40, 5, 1, 0, "sqrtm", "Calculate square root of a matrix"], [40, 5, 1, 0, "trace", "Return the sum along diagonals of the tensor."], [40, 5, 1, 0, "trace_norm", "tool for calculation of trace norm"]], "quairkit.qinfo.linalg.NKron": [[40, 2, 2, 0, "args", "other matrices"], [40, 2, 2, "quairkit.qinfo.linalg.NKron", "matrix_1st", "calculate Kronecker product of matirces"]], "quairkit.qinfo.linalg.abs_norm": [[40, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.linalg.block_enc_herm": [[40, 2, 2, 0, "mat", "matrix to be block encoded"], [40, 2, 2, 0, "num_block_qubits", "ancilla qubits used in block encoding"]], "quairkit.qinfo.linalg.create_matrix": [[40, 2, 2, 0, "input_dim", "The dimension of the input space."], [40, 2, 2, 0, "input_dtype", "The dtype of the input."], [40, 2, 2, 0, "linear_map", "A function representing the linear map, which takes an input_dim-dimensional vector and returns a vector."]], "quairkit.qinfo.linalg.dagger": [[40, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.linalg.direct_sum": [[40, 2, 2, 0, "A", "m \\times n matrix"], [40, 2, 2, 0, "B", "p \\times q matrix"]], "quairkit.qinfo.linalg.gradient": [[40, 2, 2, 0, "loss_function", "A loss function to compute the gradient."], [40, 2, 2, 0, "n", "The number of iterations for gradient computation."], [40, 2, 2, 0, "var", "A vector of shape (m,1) as the input variables for the loss function."]], "quairkit.qinfo.linalg.herm_transform": [[40, 2, 2, 0, "fcn", "function f that can be expanded by Taylor series"], [40, 2, 2, 0, "ignore_zero", "whether ignore eigenspaces with zero eigenvalue, defaults to be False"], [40, 2, 2, 0, "mat", "hermitian matrix H"]], "quairkit.qinfo.linalg.hessian": [[40, 2, 2, 0, "loss_function", "The loss function to compute the Hessian."], [40, 2, 2, 0, "var", "A matrix of shape (n, m) as input variables for the loss function."]], "quairkit.qinfo.linalg.kron_power": [[40, 2, 2, 0, "matrix", "the matrix to be powered"], [40, 2, 2, 0, "n", "the number of identical matrices"]], "quairkit.qinfo.linalg.logm": [[40, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.linalg.nkron": [[40, 2, 2, 0, "args", "other matrices"], [40, 2, 2, "quairkit.qinfo.linalg.nkron", "matrix_1st", "calculate Kronecker product of matirces"]], "quairkit.qinfo.linalg.p_norm": [[40, 2, 2, 0, "mat", "matrix"], [40, 2, 2, 0, "p", "p-norm parameter"]], "quairkit.qinfo.linalg.partial_trace": [[40, 2, 2, 0, "state", "Input quantum state."], [40, 2, 2, 0, "system_dim", "The dimension of all systems."], [40, 2, 2, 0, "trace_idx", "The system indices to be traced out."]], "quairkit.qinfo.linalg.partial_trace_discontiguous": [[40, 2, 2, 0, "preserve_qubits", "Remaining qubits, default is None, indicate all qubits remain."], [40, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.linalg.partial_transpose": [[40, 2, 2, 0, "state", "input quantum state."], [40, 2, 2, 0, "system_dim", "The dimension of all systems."], [40, 2, 2, 0, "transpose_idx", "The system indices to be transposed."]], "quairkit.qinfo.linalg.pauli_decomposition": [[40, 2, 2, 0, "mat", "the matrix to be decomposed"]], "quairkit.qinfo.linalg.permute_systems": [[40, 2, 2, 0, "perm_list", "The permute list."], [40, 2, 2, "quairkit.qinfo.linalg.permute_systems", "state", "Permute quantum system based on a permute list"], [40, 2, 2, 0, "system_dim", "A list of dimension sizes of each subsystem."]], "quairkit.qinfo.linalg.prob_sample": [[40, 2, 2, 0, "binary", "Whether the sampled result is recorded as binary."], [40, 2, 2, 0, "distribution", "The probability distribution."], [40, 2, 2, 0, "proportional", "Whether the counts are shown in proportion"], [40, 2, 2, 0, "shots", "The number of shots."]], "quairkit.qinfo.linalg.schmidt_decompose": [[40, 2, 2, 0, "psi", "State vector form of the quantum state, with shape (2**n)"], [40, 2, 2, 0, "sys_A", "Qubit indices to be included in subsystem A (other qubits are included in subsystem B), default are the first half qubits of \\lvert \\psi\\rangle"]], "quairkit.qinfo.linalg.sqrtm": [[40, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.linalg.trace": [[40, 2, 2, 0, "axis1", "The first axis of the 2-D sub-tensors along which the diagonals should be taken."], [40, 2, 2, 0, "axis2", "The second axis of the 2-D sub-tensors along which the diagonals should be taken."], [40, 2, 2, 0, "mat", "Input tensor, from which the diagonals are taken."]], "quairkit.qinfo.linalg.trace_norm": [[40, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.qinfo": [[41, 5, 1, 0, "channel_repr_convert", "convert the given representation of a channel to the target implementation"], [41, 5, 1, 0, "create_choi_repr", "Create the Choi representation of a linear map with input checks."], [41, 5, 1, 0, "decomp_1qubit", "Decompose a single-qubit unitary operator into Z-Y-Z rotation angles."], [41, 5, 1, 0, "decomp_ctrl_1qubit", "Decompose a controlled single-qubit unitary operator into its components."], [41, 5, 1, 0, "diamond_norm", "Calculate the diamond norm of input."], [41, 5, 1, 0, "gate_fidelity", "calculate the fidelity between gates"], [41, 5, 1, 0, "general_state_fidelity", "Calculate the fidelity measure of two general states."], [41, 5, 1, 0, "link", "Calculate the link product of two Choi matrices of quantum channels."], [41, 5, 1, 0, "logarithmic_negativity", "Calculate the Logarithmic Negativity E_N = ||\\rho^{T_A}|| of the input quantum state."], [41, 5, 1, 0, "mana", "Compute the mana of states or channels"], [41, 5, 1, 0, "mutual_information", "Compute the mutual information of a bipartite state."], [41, 5, 1, 0, "negativity", "Compute the Negativity N = ||\\frac{\\rho^{T_A}-1}{2}|| of the input quantum state."], [41, 5, 1, 0, "pauli_str_convertor", "Concatenate the input observable with coefficient 1."], [41, 5, 1, 0, "purity", "Calculate the purity of a quantum state."], [41, 5, 1, 0, "relative_entropy", "Calculate the relative entropy of two quantum states."], [41, 5, 1, 0, "stab_nullity", "Tool for calculation of unitary-stabilizer nullity."], [41, 5, 1, 0, "stab_renyi", "Tool for calculation of stabilizer renyi entropy."], [41, 5, 1, 0, "state_fidelity", "Calculate the fidelity of two quantum states, no extra square is taken."], [41, 5, 1, 0, "trace_distance", "Calculate the trace distance of two quantum states."], [41, 5, 1, 0, "von_neumann_entropy", "Calculate the von Neumann entropy of a quantum state."]], "quairkit.qinfo.qinfo.channel_repr_convert": [[41, 2, 2, 0, "representation", "input representation"], [41, 2, 2, 0, "source", "input form, should be 'choi', 'kraus' or 'stinespring'"], [41, 2, 2, 0, "target", "target form, should be 'choi', 'kraus' or 'stinespring'"], [41, 2, 2, 0, "tol", "error tolerance for the conversion from Choi, 10^{-6} by default"]], "quairkit.qinfo.qinfo.create_choi_repr": [[41, 2, 2, 0, "input_dim", "The dimension of the space in which the linear map operates."], [41, 2, 2, 0, "input_dtype", "The dtype of the input."], [41, 2, 2, 0, "linear_map", "A function representing the linear map, which takes and returns a square matrix."]], "quairkit.qinfo.qinfo.decomp_1qubit": [[41, 2, 2, 0, "return_global", "If set to True, the global phase angle alpha is also returned."], [41, 2, 2, 0, "unitary", "A batch of 2x2 unitary matrices representing single-qubit gates, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.qinfo.decomp_ctrl_1qubit": [[41, 2, 2, 0, "unitary", "A 2x2 unitary matrix representing the single-qubit gate, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.qinfo.diamond_norm": [[41, 2, 2, 0, "channel_repr", "A Channel or a torch.Tensor instance."], [41, 2, 2, 0, "dim_io", "The input and output dimensions."], [41, 2, 2, 0, "kwargs", "Parameters to set cvx."]], "quairkit.qinfo.qinfo.gate_fidelity": [[41, 2, 2, 0, "U", "quantum gate U  in matrix form"], [41, 2, 2, 0, "V", "quantum gate V  in matrix form"]], "quairkit.qinfo.qinfo.general_state_fidelity": [[41, 2, 2, 0, "rho", "a subnormalized quantum state."], [41, 2, 2, 0, "sigma", "a subnormalized quantum state."]], "quairkit.qinfo.qinfo.link": [[41, 2, 2, 0, "JE", "Tuple containing the Choi representation of channel E, its label, input dimensions, and output dimensions."], [41, 2, 2, 0, "JF", "Tuple containing the Choi representation of channel F, its label, input dimensions, and output dimensions."]], "quairkit.qinfo.qinfo.logarithmic_negativity": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.mana": [[41, 2, 2, 0, "input_str", "\"state\" or \"channel\""], [41, 2, 2, 0, "matrix", "quantum state or channel, when \"channel\", it should be the choi matrix of channel."], [41, 2, 2, 0, "out_dim", "output system dimension, only need to compute mana of channel."]], "quairkit.qinfo.qinfo.mutual_information": [[41, 2, 2, 0, "dim_A", "Dimension of system A."], [41, 2, 2, 0, "dim_B", "Dimension of system B."], [41, 2, 2, 0, "state", "input bipartite quantum state with system AB."]], "quairkit.qinfo.qinfo.negativity": [[41, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.pauli_str_convertor": [[41, 2, 2, 0, "observable", "The observable to be concatenated with coefficient 1."]], "quairkit.qinfo.qinfo.purity": [[41, 2, 2, 0, "rho", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.relative_entropy": [[41, 2, 2, 0, "base", "The base of logarithm."], [41, 2, 2, 0, "rho", "Density matrix form of the quantum state."], [41, 2, 2, 0, "sigma", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.stab_nullity": [[41, 2, 2, 0, "unitary", "A batch of unitary matrices."]], "quairkit.qinfo.qinfo.stab_renyi": [[41, 2, 2, "quairkit.qinfo.qinfo.stab_renyi", "alpha", "Tool for calculation of stabilizer renyi entropy."], [41, 2, 2, 0, "density", "A batch of density matrices."]], "quairkit.qinfo.qinfo.state_fidelity": [[41, 2, 2, 0, "rho", "a quantum state."], [41, 2, 2, 0, "sigma", "a quantum state."]], "quairkit.qinfo.qinfo.trace_distance": [[41, 2, 2, 0, "rho", "a quantum state."], [41, 2, 2, 0, "sigma", "a quantum state."]], "quairkit.qinfo.qinfo.von_neumann_entropy": [[41, 2, 2, 0, "base", "The base of logarithm."], [41, 2, 2, 0, "rho", "Density matrix form of the quantum state."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:attribute"}, "terms": {"": [4, 6, 9, 12, 13, 14, 16, 18, 19, 22, 29, 31, 35, 39, 41, 46, 47, 48, 50, 51, 54], "0": [3, 4, 6, 9, 14, 15, 17, 18, 19, 20, 21, 22, 29, 34, 35, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "00": [18, 21, 22, 50, 53], "0000": [18, 19, 20, 21, 45, 48, 49, 51, 52, 53], "0000e": [18, 21, 51], "0000ff": 15, "0000j": [18, 19, 20, 21, 48, 51, 52, 53], "0001": [14, 39], "0007": 48, "0010e": 18, "0017402172": 50, "0017j": 51, "0027": 51, "00350509j": 53, "0035j": 53, "0041j": [18, 51], "0044j": 18, "0047": 45, "0057j": 18, "0060": 52, "00633": 5, "0069618225": 50, "0072": 19, "0073": 52, "0075": 52, "0078": 18, "0085j": 19, "009825415569497007": 47, "0099": 54, "00e": 54, "00j": [18, 21, 51], "01": [18, 19, 45, 47, 49, 50, 51], "0100": 18, "0104": [18, 54], "0105": 54, "0106": 54, "0108": 54, "0109": 54, "0111": 46, "0112j": 18, "0117": 54, "0119": 54, "0138": 52, "0141": 54, "0142e": 51, "0149j": 18, "015003": 54, "0159": 52, "0160j": 19, "0170": 18, "0180": 18, "0188": 18, "0193": 48, "0194j": [18, 52], "0199": 52, "01j": [19, 21, 45, 47, 49, 51], "02": [47, 49, 51, 54], "02109": 29, "0224": 19, "0230j": 18, "0232j": 18, "0237j": 52, "0246": 45, "0251": 18, "0253": 51, "0258": [20, 46], "0268": 52, "0270j": 18, "0271": 45, "0279j": 52, "0292": 45, "0293": 18, "0296": 19, "0299j": 18, "02j": [47, 49, 51], "03": [47, 49], "0303j": 18, "030503": 54, "0311": 52, "0311j": 52, "0316": 51, "0323j": 18, "0330": 18, "0332j": 18, "0340": 51, "0344j": 52, "0345": 51, "03517652": 54, "0357": 19, "0367j": 52, "0384e": 18, "0393j": 51, "0396j": 19, "03j": [19, 45, 47, 49, 51], "04": [45, 47, 49], "0408e": 51, "0410j": 52, "0415": 51, "0430": 19, "0440j": 19, "0442": 18, "0444": 48, "0447": 20, "0449": 18, "0455": 18, "0464j": 51, "04672": [41, 51], "0482j": 18, "0484": 48, "0486": 18, "0494j": 18, "0497": 54, "04j": [47, 49, 51], "05": [39, 47, 49, 51, 53, 54], "0501j": 52, "05130919865131176": 52, "0517": [46, 51], "0574": 45, "0578e": 19, "0590": 52, "0598": 48, "0598j": 18, "05j": [45, 49], "06": [39, 41, 47, 49, 51], "0609050v2": 19, "0630j": 18, "0638j": 51, "0642j": 53, "06443467586598006": 52, "0647": 45, "0651j": 18, "0660j": 51, "0667": 51, "0675": 18, "0678": 48, "06j": [45, 47, 49, 51], "07": [45, 47, 49, 51], "0701j": 18, "0709": 48, "0720": 18, "0727": 52, "0749j": 19, "0775": 51, "0790": 19, "0791j": 18, "07j": [47, 49], "08": [18, 19, 47, 49], "0825": 18, "0827": 18, "0834": 51, "0836": 52, "0853": 52, "0859": 48, "0866j": 18, "0871j": 52, "0874": 18, "0877e": 51, "0886j": 19, "0894": 18, "0894e": 19, "0894j": 18, "08j": [45, 51], "09": [19, 45, 47, 49, 51], "0905j": 52, "09066232223158144": 45, "0914": 18, "0918j": 18, "0923j": 51, "0929": 52, "0931j": 18, "0941j": 18, "0947j": 19, "0954j": 51, "0956j": 52, "0982j": 51, "09j": [19, 47, 50], "1": [3, 5, 6, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 29, 32, 33, 34, 35, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "10": [29, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "100": [6, 20, 46, 47, 48, 54], "1000": [3, 48, 53], "10000000149011612": 17, "1004": 52, "1008j": 18, "1017": 29, "102": 29, "1024": [40, 50], "1030": 18, "1038": 19, "1052j": 18, "1053": 18, "1065": 51, "1082": 51, "10856": 54, "10876": 5, "10915": 54, "1097": 48, "10f": 50, "10j": 19, "10th": [29, 41], "11": [22, 45, 46, 47, 49, 50, 51, 53], "1111j": 18, "1123": 18, "1123e": 19, "1123j": 51, "1128": 19, "1131": 51, "1135": 18, "1136": [48, 51], "1140": 18, "1148j": 18, "1149976j": 53, "1150j": 53, "1154j": 18, "1155": 18, "1163": [19, 51], "1172j": 52, "1173": 53, "1177": 18, "11801365595625102": 19, "1185j": 19, "119": 54, "1194j": 18, "11j": [19, 47, 53], "12": [19, 22, 46, 47, 49, 50, 51, 53], "120": 54, "1210j": 53, "1212": 52, "1215e": 19, "1221": 45, "1222": 18, "1232": 51, "1232e": 21, "1243j": 52, "1251": 52, "1272": [18, 51], "12777564473712655": 19, "128": 54, "1286j": 52, "1293j": 52, "1297": 52, "12j": [49, 53], "13": [45, 46, 47, 49, 50, 51, 53], "1333": 52, "1351j": 18, "1356": 19, "1362": 19, "1369": 51, "1373j": 52, "1387": 18, "13j": [19, 47], "14": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "140": 54, "1401": 18, "1404j": 19, "1406": 18, "1414": 20, "1431": 18, "1433j": 18, "1446j": 19, "1459": 18, "1473": 18, "1480j": 18, "1486j": 18, "14j": 45, "15": [6, 18, 34, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "1503": 50, "1503j": 18, "1504j": 19, "1522": 51, "1546": 18, "1551": 50, "1560": 52, "1569": 53, "1573j": 18, "1575j": 18, "1581": 20, "1581j": 20, "1583": 19, "15j": [47, 53], "16": [21, 47, 49, 51, 53], "160": [50, 54], "16234064": 54, "1624j": 19, "1631": 52, "1634j": 19, "1639": 51, "164": 50, "1646j": 19, "1647": 18, "1650": 50, "1652": 19, "1677j": 18, "1686": 18, "1690": 53, "1692": 19, "16j": [18, 19, 21, 51], "17": [21, 49, 51, 53], "1701": 52, "1704": 19, "1706j": 19, "1714": 18, "1744j": 18, "1748j": 18, "1760": 18, "1774j": 18, "1778j": 18, "1784j": 51, "1797587035": 54, "17j": [18, 21, 45, 51], "18": [45, 47, 49, 51, 53], "180": 54, "1804": 5, "1817j": 18, "1822": 52, "1841j": 18, "1847": 51, "1847j": 18, "1867": 51, "1873": 19, "1873j": 18, "1883j": 51, "1887": 51, "18j": [19, 47, 51], "19": [47, 49, 50, 51, 53, 54], "1903": 18, "1905": 5, "1909": 48, "1913j": 18, "1924": 53, "1931j": 19, "1940j": 18, "1943j": 18, "1954": 52, "1975": 51, "199": 54, "19j": [45, 47], "1e": [39, 41], "1j": [6, 34, 47, 49, 51], "1rangl": 6, "2": [4, 6, 9, 14, 17, 18, 19, 20, 21, 22, 28, 30, 32, 33, 34, 35, 37, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "20": [49, 51, 53, 54], "200": [3, 54], "2000": [20, 41], "20000000298023224": 17, "2001": [19, 48, 50], "2009": 41, "201": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "2010": [29, 49, 51], "2011": [41, 51], "2014": 54, "2018": [48, 54], "2018e": 19, "2019": 54, "2020": [41, 48, 51, 54], "2021": 19, "2022": 54, "2027j": 53, "2049j": 51, "2071": 18, "2080": 18, "2082": 53, "2099": 18, "21": [49, 51, 53], "2101": 29, "2102": 51, "2114": 52, "2120": 45, "2128": 51, "2138": 18, "2145": 52, "2146j": [19, 52], "2150j": 19, "2151": 18, "217": 41, "2180j": 18, "21j": 47, "22": [47, 49, 51, 53], "2218": 19, "2231j": 18, "2232j": 51, "2236": 20, "2236j": 20, "2238": 19, "2246e": [18, 21], "2298": 19, "22j": 45, "23": [47, 49, 51, 53], "230": 50, "2306": 18, "2322": 18, "2324": 18, "2336": 53, "2345": 18, "2353j": 51, "2361": 19, "2379": 46, "238": 41, "2388e": 18, "2391": 45, "23j": [45, 51], "24": [19, 47, 49, 51, 53], "2414j": 19, "24178998j": 53, "2418j": 53, "2424": [18, 52], "2431": [18, 52], "2439j": 52, "2444j": 52, "2458e": 51, "2459j": 19, "2460e": 19, "2485": 18, "2489e": 19, "2492e": 51, "24j": [45, 47, 50, 51, 53], "25": [22, 45, 49, 51], "2500": 51, "2516e": 19, "2541j": 51, "2568": 50, "2586": 50, "25880632j": 53, "2588j": 53, "2599": 52, "25j": 51, "26": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "26100": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "2612": 18, "2620": 19, "2635": 18, "2655j": 18, "26619734246961": 52, "2671688636": 50, "2671j": 19, "2677": 19, "2697j": 18, "26j": [47, 51, 53], "27": [45, 49, 53], "2703": 18, "271": 50, "2711j": 19, "2712": 18, "2717167j": 53, "2717j": 53, "2735": 18, "27j": 53, "28": [19, 47, 49, 51, 53], "2800": 19, "2804": 19, "2806j": 18, "2811j": 52, "2828": 20, "283185307179586": 4, "2846j": 18, "2850": 19, "2858": 18, "2869j": 18, "29": [19, 49], "2919": 51, "2926j": 18, "2963j": 18, "2977": 51, "2991j": 18, "29j": 45, "2e": 54, "2j": 51, "2nd": 40, "2x2": 41, "3": [9, 14, 15, 17, 18, 19, 20, 21, 22, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "30": [15, 20, 49], "300": 50, "30000001192092896": [17, 48], "3009j": 19, "3013920171748103e": 52, "3023j": 19, "3033j": 19, "3035": 52, "30402787550624577": 48, "3040j": 18, "3056j": 18, "3059j": 52, "3090j": 18, "31": 49, "3118": 18, "3141e": 18, "3152": 53, "3156": 18, "3162": 20, "3162j": 20, "31794474j": 53, "3179j": 53, "3182": 52, "3189": 19, "31j": [19, 51], "32": [49, 51], "3212j": 18, "3240": 19, "3242": 18, "3248j": 51, "3267": 19, "3280j": 19, "3289j": 18, "3294": 18, "32j": 53, "33": [19, 47, 49, 51], "3314j": 18, "3321j": 51, "3325": 53, "3360": 51, "3364j": 19, "3369j": 18, "3380": 19, "33j": [47, 51], "34": [45, 47, 49, 50, 51], "3414": 19, "343978055135579j": 52, "3444": 50, "3451j": 18, "3465j": 18, "35": [45, 49, 50, 53], "3500e": 19, "3504": 51, "3506": 50, "3533": 51, "3536": 51, "3536j": 51, "3538j": 18, "3539j": 18, "3587": 19, "36": [47, 49], "360": 15, "3601": 20, "3619j": 18, "3627": 19, "3635j": 18, "366": 50, "367": 50, "3671": 18, "37": [19, 49], "3710": 51, "3756": 53, "3775": 51, "37j": [19, 51], "38": [21, 22, 49, 51], "3801": 45, "3811": 19, "3819": 49, "3825": 18, "3827": 18, "3827j": 18, "3835": 18, "3836": 51, "3844j": 18, "3854j": 18, "3862": 19, "3868": 45, "3876": 53, "3878e": 51, "3887": 19, "3894": 51, "38j": 45, "39": [45, 47, 48, 49, 50, 52, 53], "3932": 53, "3944j": 19, "39468753": 53, "3947": 53, "3959j": 19, "396": 50, "3976j": 51, "3984j": 18, "3j": 51, "3p": [20, 29, 51], "3rd": [40, 48, 54], "3x": 19, "4": [5, 6, 17, 18, 19, 20, 21, 22, 29, 35, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "40": 54, "4000000059604645": 17, "4003": 18, "4019j": 19, "4033": 51, "4038e": 19, "40390968": 54, "41": 45, "4106j": 19, "4122": 50, "4124": 18, "4139": 51, "4142j": 19, "4166": 19, "4182": 53, "41849422": 53, "4185": 53, "4195j": 18, "41j": 51, "42": [51, 53], "4213": 54, "4229": 18, "4243": 20, "4251": 19, "4270": 46, "42j": [45, 51], "43": [19, 45], "4309": 18, "4328": 19, "4331": 18, "4385j": 18, "43j": 51, "44": 45, "44363024944835594": 48, "4444j": 53, "4451e": 19, "4472": 20, "4472j": 20, "44j": 51, "45": [15, 19, 45, 51], "45437813": 54, "4546": 19, "45629326": 53, "4563": [19, 53], "4578": 52, "4579": 19, "46": [45, 53], "4602": 18, "4619j": 18, "4647": 51, "4696": 51, "46j": 45, "4703": 52, "4751": 19, "4784": 19, "47j": 47, "48": 51, "4804": 46, "4855e": 19, "4864": 19, "4875": 19, "4886e": 51, "4886j": 19, "48992562": 54, "48j": [45, 51, 53], "49": 47, "4925j": 19, "49346781": 54, "49388337": 54, "49395490": 54, "49395800": 54, "49395871": 54, "4948": 45, "4954": 19, "4f": 54, "4j": [51, 53], "5": [17, 18, 19, 20, 21, 22, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "50": 20, "5000": [21, 50, 51], "5000j": 21, "5031j": 52, "5052": 45, "5077": 52, "5081": 52, "5083": 51, "5087j": 52, "5088j": 52, "51": 45, "5121": 19, "5136": 19, "5157j": 52, "5158": 18, "5167": 19, "5173j": 18, "5174": 19, "5193e": 19, "5196": 19, "52": 51, "5246": 52, "5253j": 19, "5277": 19, "5288": 19, "5296j": 19, "52j": 45, "53": 41, "5321": 19, "5337": 49, "5347j": 19, "5359": 18, "537": 51, "5372j": 19, "5374j": 18, "5391": 18, "53j": 51, "54": [45, 51], "5444j": 19, "5454": 18, "5460": 18, "5477": 20, "55": [45, 51, 52], "5509j": 51, "5514e": 19, "5524j": 52, "5525": 52, "5599j": 52, "55j": 19, "56": [45, 53], "5627j": 52, "5646j": 19, "56j": [47, 51, 53], "57": [19, 51], "5702j": 52, "5703j": 18, "5735": 51, "5760": 52, "5762j": 51, "5772": 6, "57j": 51, "5804": 18, "5809": 51, "5832": 52, "5852j": 19, "5859": 52, "5868": 49, "5878": 50, "59": [47, 51], "5930": 52, "5942": 19, "5967": 51, "5th": 49, "5y": 19, "6": [4, 18, 21, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "60": 54, "6003j": 19, "6019637631250563": 19, "6062": 18, "6068": 19, "6087798181466624": 48, "6088j": 48, "6095j": 19, "61": 51, "6113": 19, "6132": 45, "6178j": 19, "6194e": 18, "6199": 45, "62": 51, "6225": 51, "6235j": 19, "6244": 53, "6246e": 51, "6294": 19, "62j": [49, 51], "63": 19, "6310": 19, "6315": 19, "6316e": 19, "6325": 20, "633": 50, "6385j": 19, "64": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "6461j": 52, "6464j": 18, "6467": 51, "6481j": 18, "6494": 50, "65": 45, "6546j": 19, "6556": 50, "657": 50, "658": 50, "6596e": 18, "66": 45, "6603e": 19, "6620": 19, "6624": 49, "6638237762231716": 48, "6696j": 51, "67": [19, 49, 51], "6728e": 18, "6736e": 51, "6740j": 19, "6790j": 19, "6847e": 19, "6859": 19, "69": 45, "6996": 19, "699999988079071": 17, "7": [15, 17, 18, 19, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "7007e": 19, "7008e": 19, "7043j": 52, "7071": [18, 19, 20, 21, 49, 51], "7071j": [18, 19, 21, 51], "7090": 18, "71": [21, 22, 51, 53], "7121j": 19, "7125j": 52, "7190023895147757": 45, "7265": 46, "7277": 19, "7289": 19, "7298": 19, "72j": 19, "73": 45, "7333": 19, "74": 47, "7412": 49, "7414": 50, "7432": 50, "7456e": 19, "7492": 49, "7497j": 19, "75": 22, "7500": 51, "753": 50, "7649579970411409": 48, "7650j": 48, "7664": 53, "7681e": 51, "7755": 52, "78": 51, "7860": 19, "7873e": 19, "7906": 51, "79073524": 54, "7918": 53, "7931476010024183": 45, "8": [18, 19, 20, 29, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "80": 54, "8000": 20, "8001j": 18, "8084j": 19, "8098": 49, "81": [6, 18, 34], "8151": 18, "8156662": 53, "8157": 53, "8172e": 51, "8185e": 19, "82": [45, 53], "8219": 48, "8219269134530314": 48, "8296": 19, "82j": 45, "83": 19, "8310": 53, "8350": 50, "8367": 20, "8370e": 21, "8377j": 19, "84": 45, "8408": 19, "8449": 50, "8473": 53, "8473218": 53, "8485": 20, "8497": 50, "85": 53, "86": 51, "860": 50, "864": 50, "87": [45, 53], "8740804": 53, "8741": 53, "88": 19, "89": 51, "8916j": 19, "8944": 20, "8f": 54, "9": [18, 19, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "9013e": 19, "9029": 53, "9059897222160238": 19, "9134e": 18, "92": [21, 54], "9239": 18, "9239j": 18, "93": 45, "9394j": 52, "93j": 53, "9417j": 52, "9486": 18, "9487": 20, "95": [45, 47], "9501": 49, "9547": 51, "9547j": 51, "9618": 20, "9660": 51, "9704": 19, "9713": 46, "98": [45, 50], "986": 54, "9908": 19, "9986828156358498": 52, "9987": 20, "9997": 46, "9999999999999994": 52, "9999999999999998": 52, "A": [5, 9, 17, 18, 21, 22, 29, 30, 33, 34, 35, 37, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54], "And": 51, "As": [49, 50], "At": [51, 52], "But": 46, "By": [46, 47, 49, 54], "For": [6, 14, 29, 34, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "If": [3, 6, 9, 19, 22, 25, 37, 39, 40, 41, 46, 50, 51, 53, 54], "In": [46, 47, 48, 49, 50, 51, 53, 54], "Ising": [17, 48, 54], "It": [22, 37, 39, 49, 51, 54], "Its": [6, 22, 29, 41, 48, 51, 53], "NOT": [49, 51, 54], "No": 49, "Not": 51, "Of": [16, 18], "One": [6, 33, 34, 45, 46, 47, 49, 51, 53], "Or": 53, "Such": [19, 29, 46, 50], "The": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 44, 45, 46, 47, 49, 50, 51, 52, 53, 54], "Their": 54, "Then": [47, 51, 53, 54], "There": [48, 50, 51, 52], "These": [21, 46, 49, 50, 51, 54], "To": [15, 47], "With": 51, "_": [45, 48, 49, 51, 53], "_1": 45, "_2": 45, "_3": 45, "__circuit_plot_param": 36, "__init__": [46, 50, 54], "_a": [51, 53], "_extract_highest_fidel": 3, "_i": 54, "_n": 49, "_type_transform": 52, "aa": 51, "ab": [5, 29, 41, 51], "abil": 54, "abl": [48, 50, 54], "about": [6, 34, 35, 37, 45, 46], "abov": [40, 50, 51], "abs_norm": [38, 40], "accept": [39, 46, 50], "access": [21, 46, 49], "accord": [50, 54], "accur": 54, "achiev": [49, 51], "aco": 51, "across": [49, 50], "act": [6, 9, 28, 29, 30, 32, 33, 37, 45, 47, 49, 50, 51, 54], "acted_system_dim": [28, 30, 32, 33, 37], "action": 51, "activ": [37, 54], "actual": 54, "ad": [4, 43, 45, 49], "adam": 54, "adapt": 53, "add": [6, 45, 47, 51, 54], "addit": [46, 47], "addition": [49, 51, 52, 53], "adjust": [14, 46, 50, 54], "advanc": 49, "affect": 53, "after": [6, 41, 45, 46, 47, 49, 50, 51, 53, 54], "ag": 54, "aim": 54, "al": 54, "alberto": 54, "algorithm": [3, 49, 54], "alia": [6, 19, 21, 22, 34], "align": [6, 17, 18, 34, 35, 46, 54], "all": [4, 5, 6, 9, 19, 21, 22, 25, 28, 30, 32, 33, 37, 40, 46, 49, 50, 51, 54], "allclos": 45, "allow": [14, 25, 50, 53, 54], "along": [21, 40, 46, 49], "alpha": [41, 51, 54], "alpha_": 17, "alphabet": 53, "also": [3, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "altern": 51, "although": 54, "alwai": [50, 51], "amplitud": [6, 20, 29], "amplitude_damp": 6, "amplitude_damping_choi_repr": 51, "amplitude_damping_krau": [16, 20, 51], "amplitude_damping_kraus_repr": 51, "amplitude_damping_stin_repr": 51, "amplitudedamp": [27, 29], "an": [3, 4, 6, 14, 15, 18, 19, 20, 21, 22, 28, 30, 32, 33, 37, 39, 40, 41, 45, 46, 47, 50, 51, 52, 54], "anaconda3": 50, "analog": 54, "analysi": 46, "ancilla": 40, "angl": [5, 6, 15, 33, 41, 49, 52, 54], "ani": [32, 36, 46, 51, 54], "anniversari": 29, "anoth": [51, 53], "ansatz": [1, 36, 46, 49], "answer": 6, "api": 49, "apostroph": 41, "appdata": 50, "append": [4, 48, 49, 51, 54], "appli": [3, 5, 6, 33, 34, 35, 37, 39, 49, 50, 53, 54], "applic": [51, 52, 54], "approach": [41, 51, 54], "approxim": 54, "ar": [6, 14, 20, 21, 22, 25, 29, 32, 33, 34, 35, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "arang": 49, "arbitrarili": 40, "are_qubit": [47, 53], "are_qutrit": [47, 53], "area": 52, "arg": [14, 33, 40, 46, 54], "arg0": 4, "arg1": 4, "argument": [4, 49, 50], "armv8": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "around": 52, "arrai": [12, 13, 39, 40], "arrow": 15, "artifici": 54, "arxiv": [5, 19, 29, 41, 51], "assign": 47, "associ": [52, 54], "assum": [6, 28], "atom": 54, "attribut": [46, 47, 49, 50, 54], "automat": [3, 9, 14, 53], "avail": [49, 53], "averag": 47, "avg_tim": 54, "ax": [32, 40, 51, 52], "axi": [6, 34, 35, 40, 45, 49, 51], "axis1": 40, "axis2": 40, "b": [21, 22, 40, 41, 51, 52, 54], "backend": [7, 8, 10, 14, 19, 21, 22, 24, 25, 45, 47, 49, 50, 51, 53], "background": 54, "backpropag": 54, "backward": [46, 54], "bar": 15, "base": [1, 3, 4, 5, 7, 18, 26, 27, 31, 37, 40, 41, 50, 53, 54], "base_lin": 54, "basi": [6, 9, 18, 21, 22, 25, 37, 40, 45, 47, 50, 51, 53], "basic": [8, 28, 32, 51], "batch": [14, 19, 21, 37, 39, 41, 42, 43, 44, 46, 47, 48, 51, 53], "batch_channel": 19, "batch_cir": 45, "batch_siz": [45, 46, 47, 50, 51], "been": 29, "befor": 50, "begin": [6, 17, 18, 20, 29, 34, 35, 48, 49, 51], "behav": 39, "behavior": [39, 54], "being": 50, "bell": [21, 22, 53], "bell_basi": [16, 21], "bell_diagonal_st": [16, 22], "bell_stat": [16, 22, 53], "below": [18, 45, 46, 48, 51], "besid": 51, "best": 54, "beta": [41, 48, 51], "beta_": 17, "beta_k": 17, "better": [47, 48, 54], "between": [14, 15, 24, 41, 48, 51, 52, 54], "bias": 54, "bigotimes_": 48, "binari": [40, 50], "bipartit": 41, "bit": [6, 20, 29, 45, 46, 47, 48, 49, 50, 52, 53, 54], "bit_flip": 6, "bit_flip_choi_repr": 51, "bit_flip_krau": [16, 20, 51], "bit_flip_kraus_repr": 51, "bit_flip_stin_repr": 51, "bit_phase_flip": [6, 49], "bit_phase_flip_choi_repr": 51, "bit_phase_flip_krau": [16, 20, 51], "bit_phase_flip_kraus_repr": 51, "bit_phase_flip_stin_repr": 51, "bitflip": [27, 29], "bitphaseflip": [27, 29, 49], "black": 15, "bloch": 15, "block": [19, 40, 49, 51, 52], "block_enc_herm": [38, 40], "blue": 15, "bm": 46, "bmatrix": [6, 18, 20, 29, 34, 35, 49, 51], "bool": [3, 6, 9, 15, 19, 25, 28, 32, 33, 34, 35, 37, 39, 40, 41], "boolean": [18, 39], "both": [50, 51, 52], "bound": [41, 54], "boundari": 8, "bra": 53, "brain": 54, "bravyi": 19, "briefli": 51, "broadcast": [14, 50], "build": [46, 51], "built": [46, 51, 52], "c": [21, 40, 41, 50], "cabl": 49, "calcul": [9, 14, 37, 40, 41, 48, 51, 52, 53, 54], "call": [3, 32, 45, 49, 50, 51, 54], "callabl": [3, 6, 18, 32, 33, 39, 40, 41, 54], "cambridg": [29, 48, 49, 50, 51, 54], "can": [3, 4, 6, 8, 9, 14, 19, 21, 22, 24, 25, 28, 30, 32, 33, 37, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "candid": [39, 48], "cannot": [49, 50], "cao": 54, "capabl": 54, "care": [14, 46], "case": [6, 18, 19, 21, 22, 30, 32, 33, 37, 40, 41, 43, 49, 53], "categor": 52, "caus": [6, 41], "cbo9780511976667": 29, "ccu3": 46, "ccx": [6, 31, 34], "cd": 41, "cdot": [18, 47, 51, 54], "certain": [3, 52], "cfloat": 18, "chain": 48, "challeng": 54, "chang": [49, 50, 53], "channel": [1, 6, 19, 20, 26, 37, 41, 42, 43, 44, 45, 46, 53], "channel_choi": 19, "channel_krau": 19, "channel_repr": 41, "channel_repr_convert": [38, 41, 51], "channel_stinespr": 19, "character": [45, 54], "check": [1, 9, 14, 28, 32, 38, 41, 45, 47, 51, 52, 53], "check_leg": [28, 32], "chemic": 54, "chemistri": 54, "child": 46, "chio": 51, "choi": [3, 6, 19, 20, 28, 30, 37, 39, 41, 45, 47, 49, 53], "choi_channel": [6, 45, 47, 49], "choi_op": 49, "choi_oper": 20, "choi_repr": [6, 28, 30, 49, 51], "choirepr": [27, 30, 41, 49], "chuang": [29, 41, 48, 49, 50, 51], "cir": [6, 45, 46, 47, 49, 51, 54], "cir1": 46, "cir2": 46, "cir_1": 45, "cir_cho": 45, "cir_cho2": 45, "cir_kra": 45, "cir_kra2": 45, "cir_ora": 45, "cir_ora2": 45, "cir_stat": 49, "circuit": [1, 3, 5, 19, 32, 33, 34, 36, 42, 43, 44, 51], "clariti": [45, 47], "class": [3, 4, 5, 6, 8, 9, 12, 13, 14, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 44, 45, 46, 47, 49, 51, 52, 53, 54], "classic": [6, 46, 49, 51, 54], "classif": 54, "classifi": 8, "clifford": 19, "clifford_matrix": 19, "clone": 53, "close": 39, "closer": 54, "cloud": 50, "cmap": 15, "cnot": [5, 6, 16, 18, 31, 34, 46, 49, 51, 54], "cnot_gat": [16, 18], "cnot_idx": 34, "co": [6, 18, 34, 35, 51], "code": [40, 45, 46, 47, 48, 51], "coeffici": [6, 9, 20, 40, 41, 48], "collaps": [6, 26, 37, 45, 47, 50], "collapsed_st": 50, "collect": [29, 33, 34, 35, 50, 54], "color": [15, 54], "color_schem": 15, "com": [6, 18], "comb": [1, 2], "combin": [51, 52, 53], "come": 50, "common": [14, 17, 22, 26, 27, 46, 51, 54], "commonli": [51, 53], "commun": [6, 41, 51, 54], "compat": 44, "complet": [22, 28, 32, 41, 50, 51], "completely_mixed_comput": [16, 22], "complex": [5, 47, 49, 51, 54], "complex128": [8, 20, 21, 45, 47, 50, 51, 52, 53], "complex64": [8, 51, 53], "complex_block_lay": [6, 46, 49], "complex_entangled_lay": [6, 47, 49, 54], "complexblocklay": [2, 5], "complexentangledlay": [2, 5], "compon": [41, 54], "compos": [21, 25, 40, 47, 54], "composit": 49, "compound": 47, "compress": 9, "compris": 6, "comput": [3, 17, 21, 22, 24, 25, 29, 37, 40, 41, 42, 43, 44, 46, 48, 49, 50, 51, 53, 54], "computation": 54, "computational_st": [16, 22, 46], "concaten": [6, 41], "concept": 51, "conceptu": 54, "concret": [51, 53], "condens": 54, "condit": [48, 51, 52, 54], "configur": 47, "conjug": [50, 51, 52, 53], "connect": [46, 49, 54], "consid": [46, 48, 49, 51, 54], "consist": [5, 6, 49, 50, 52], "const_t": [6, 20, 29], "constant": 54, "construct": [9, 18, 40, 42, 44, 46, 47, 51, 54], "construct_cir": 54, "construct_h_matrix": 9, "constructor": 4, "consult": 15, "contain": [1, 2, 9, 19, 22, 37, 40, 41, 46], "content": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "context": [3, 54], "continu": 54, "control": [3, 6, 33, 34, 41, 46, 47, 49, 51, 54], "control_oracl": [6, 45, 47, 49], "controloracl": [31, 33, 49], "conveni": 46, "convent": [41, 45, 46, 48, 49, 50, 51, 53, 54], "converg": 54, "convers": 41, "convert": [41, 51, 53], "convex": 53, "copi": 36, "core": [1, 48, 50], "corespond": 48, "corollari": 41, "correct": 39, "correspond": [6, 9, 20, 29, 40, 47, 48, 50, 51, 54], "cost": 54, "could": [9, 32, 46, 53], "count": 40, "coupl": 48, "cover": 46, "cp": [6, 16, 18, 31, 34], "cp_gate": [16, 18], "cptp": 51, "cpu": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "cr_x": [6, 18], "cr_y": [6, 18], "cr_z": [6, 18], "creat": [9, 40, 41, 46, 47, 49, 54], "create_choi_repr": [38, 41], "create_cir": 46, "create_matrix": [38, 40], "creation": 46, "criteria": 3, "critic": 54, "cross": 54, "crucial": [51, 54], "crx": [6, 16, 18, 31, 34], "crx_gate": [16, 18], "cry": [6, 16, 18, 31, 34], "cry_gat": [16, 18], "crz": [6, 16, 18, 31, 34], "crz_gate": [16, 18], "cswap": [6, 16, 18, 31, 34], "cswap_gat": [16, 18], "cu": [6, 16, 18, 31, 34], "cu_gat": [16, 18], "cuda": [8, 53], "current": [4, 8, 29, 41], "custom": [6, 26, 27, 31, 32, 42, 43, 48], "custom_unitari": 49, "cvx": 41, "cx": [31, 34, 49, 51], "cy": [6, 16, 18, 31, 34, 49], "cy_gat": [16, 18], "cycl": [6, 49], "cz": [6, 16, 18, 31, 34, 51], "cz_gate": [16, 18], "d": [6, 12, 13, 14, 18, 19, 20, 21, 22, 29, 33, 40, 41, 47, 48, 51, 53, 54], "d1": [14, 53], "d_": [28, 47], "d_0": 47, "d_2": 47, "d_3": 47, "dagger": [6, 18, 35, 38, 39, 40, 41, 48, 49, 50, 51, 52, 54], "damp": [6, 20, 29], "darrel": [48, 54], "data": [3, 8, 12, 13, 14, 19, 20, 28, 39, 41, 44, 46, 53, 54], "databas": [1, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "dataset": 3, "datatyp": [14, 51], "david": [48, 54], "decai": 51, "decid": 9, "decim": [50, 51], "decomp_1qubit": [38, 41, 52], "decomp_ctrl_1qubit": [38, 41], "decompos": [9, 25, 40, 41, 45, 52], "decompose_pauli_word": 9, "decompose_with_sit": 9, "decomposit": [40, 41, 48, 50, 52], "def": [18, 46, 54], "default": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 46, 47, 49, 50, 51, 53, 54], "defin": [21, 29, 39, 46, 47, 48, 49, 50, 51, 53, 54], "definit": [39, 52, 53, 54], "delta": [41, 50], "delta_": 50, "demonstr": [46, 47, 50, 51], "denot": [14, 50, 54], "dens": 46, "densiti": [12, 14, 15, 19, 22, 28, 39, 41, 51, 52, 53], "density_matrix": [10, 11, 14, 15, 19, 22, 45, 46, 47, 49, 50, 51, 52, 53], "density_op": [39, 41], "density_op_random": 40, "depend": [6, 54], "depict": [45, 46, 47], "depolar": [6, 20, 27, 29, 49], "depolarizing_choi_repr": 51, "depolarizing_krau": [16, 20, 45, 51], "depolarizing_kraus_repr": 51, "depolarizing_stin_repr": 51, "depth": [5, 6, 49, 54], "descent": 54, "describ": [48, 50, 51, 53], "descript": [45, 46, 48, 49, 50, 51, 53, 54], "design": 54, "desir": [37, 53], "desired_result": [6, 25, 37, 47, 50], "despit": 54, "detail": [6, 47, 54], "determin": [3, 9, 14, 32, 39, 40, 50, 54], "devic": [8, 29, 34, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "diagon": [22, 40, 52], "diagram": [47, 49, 51], "diamond": 41, "diamond_norm": [38, 41], "dict": [4, 5, 6, 25, 32, 33, 36, 40], "dictionari": [36, 40, 50], "differ": [9, 41, 44, 49, 50, 53, 54], "dim": [18, 19, 21, 28, 51, 53], "dim0": 15, "dim1": 15, "dim_a": 41, "dim_b": 41, "dim_io": 41, "dimens": [6, 12, 13, 14, 18, 19, 21, 22, 28, 30, 32, 33, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 53], "dimension": [18, 40, 41, 45, 47, 54], "direct": [40, 51, 52, 53, 54], "direct_sum": [38, 40, 52], "directli": [46, 49, 50, 51, 54], "disabl": 14, "discrep": 54, "displai": [6, 15, 32, 36], "display_in_circuit": 32, "display_result": 54, "distanc": [1, 15, 23, 41, 52], "distinguish": 50, "distort": 6, "distribut": [12, 13, 14, 37, 40, 47, 50, 53, 54], "divid": 19, "dmitri": 19, "dn": [14, 53], "document": 49, "doe": [3, 37, 39, 41, 46, 50, 51, 53], "doi": 29, "done": 49, "dot": [6, 49], "doubl": 49, "dpi": 6, "draw": 54, "drive": 5, "dtype": [8, 14, 18, 20, 21, 40, 41, 51, 52, 53], "dure": [3, 54], "dynam": [6, 49, 54], "e": [5, 6, 9, 17, 18, 21, 25, 28, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 51], "e_": 22, "e_0": [20, 29], "e_1": [20, 29], "e_2": [20, 29], "e_3": [20, 29], "e_4": [20, 29], "e_k": [20, 29], "e_n": 41, "each": [3, 6, 9, 12, 13, 15, 21, 22, 25, 29, 40, 41, 45, 47, 48, 50, 51, 54], "easi": 54, "easili": [51, 53], "ed": [48, 54], "edg": [5, 17, 54], "edit": [29, 41], "effect": [46, 50, 54], "effici": [46, 50, 54], "eigenbasi": [21, 50], "eigensolv": 44, "eigenspac": 40, "eigenst": [6, 47, 54], "eigenvalu": [39, 40, 48, 54], "eigenvector": [21, 54], "eigh": 41, "eigvalsh": 54, "either": [3, 39, 41, 50, 54], "element": [6, 9, 15, 22, 33, 36, 37, 40, 41, 46, 50, 53], "enabl": [3, 54], "encod": [14, 19, 40], "end": [4, 6, 15, 17, 18, 20, 29, 34, 35, 47, 48, 49, 51], "energi": [48, 54], "enhanc": [3, 54], "enough": 39, "ensur": 54, "entangl": [5, 6, 47, 49, 54], "entir": [21, 49], "entri": [6, 52], "entropi": [41, 52, 54], "enumer": 45, "env": 50, "environ": 44, "ep": [14, 39], "epoch": 54, "equal": [15, 29, 49, 51], "equat": [41, 50, 51], "equival": [6, 45, 48, 50, 51], "error": [39, 41, 50, 54], "essenti": 49, "establish": 47, "et": 54, "eta": 54, "evalu": 54, "event": 49, "everi": [50, 51], "evolut": [49, 51], "evolv": [51, 53], "exact": 54, "exampl": [14, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54], "except": [22, 50], "exchang": 51, "excit": [6, 29], "exclud": [9, 54], "exec_tim": [6, 20, 29], "execut": [6, 20, 29, 50, 51, 54], "exemplifi": 41, "exhibit": 54, "exist": [3, 49, 51], "exp": [18, 51], "exp_h": 48, "exp_val": 54, "expand": 40, "expec_v": [45, 48, 53], "expect": [15, 25, 44, 45, 46, 53, 54], "expecv": [23, 25, 45, 46, 48, 54], "experi": 50, "explor": 54, "expos": 19, "express": [48, 49, 50, 51], "extend": [4, 5, 6], "extern": [48, 54], "extra": 41, "extract_highest_fidel": 3, "ey": [16, 18, 46], "eye_g": [16, 18], "f": [17, 18, 19, 20, 21, 22, 40, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54], "f_": 41, "fact": 50, "factor": 54, "fals": [3, 6, 9, 15, 19, 25, 32, 33, 34, 35, 37, 39, 40, 41, 50, 52, 53], "famili": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "fc1": 46, "fc2": 46, "fcn": 40, "featur": [29, 42, 46], "ferromagnet": [48, 54], "fidel": [3, 24, 41, 52], "field": [48, 54], "fig": [45, 46, 47], "figur": [6, 36, 45, 47], "file": [3, 4, 5, 6, 12, 13, 14, 15, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 50], "filenam": 15, "final": [46, 54], "find": 54, "finit": 53, "first": [4, 6, 14, 15, 21, 33, 34, 35, 37, 39, 40, 46, 47, 49, 50, 51, 52, 53], "first_gat": 46, "fix": [46, 49, 54], "flag": [3, 6], "flatten": 4, "flip": [6, 20, 29, 49], "float": [3, 4, 5, 6, 8, 9, 14, 15, 18, 20, 22, 29, 32, 33, 34, 35, 36, 39, 40, 41, 54], "float64": 52, "focu": 46, "follow": [5, 8, 9, 19, 45, 46, 47, 48, 49, 50, 51, 53, 54], "font": 6, "form": [6, 9, 12, 13, 15, 18, 19, 20, 22, 32, 34, 35, 39, 40, 41, 48, 50, 51, 53], "formal": 51, "format": [44, 50], "formula": 29, "forward": [6, 24, 25, 37, 46, 54], "found": 49, "four": [21, 48, 50], "fourier": [18, 21, 49], "fourth": [46, 50], "frac": [6, 18, 22, 34, 35, 41, 49, 50, 51, 54], "framework": [46, 54], "fredkin": [6, 34], "free": 19, "from": [5, 12, 13, 15, 19, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "full": [6, 19, 25], "fulli": [15, 46], "func": 39, "function": [3, 6, 8, 14, 15, 18, 19, 22, 24, 25, 32, 33, 36, 37, 39, 40, 41, 44, 45, 46, 47, 50, 51, 53, 54], "fundament": [51, 54], "further": [49, 53], "furthermor": 49, "futur": 37, "g": [9, 18, 40], "galleri": 6, "gamma": [6, 18, 20, 29, 34, 41, 48, 51], "gamma_": [17, 51], "gate": [1, 5, 6, 18, 20, 26, 28, 29, 37, 41, 42, 43, 44, 45, 46, 52, 54], "gate_fidel": [38, 41], "gate_histori": [5, 6, 32, 49], "gate_history_gener": 32, "gate_info": [32, 33, 49], "gate_nam": [6, 46, 49], "gaussian": 46, "gell": 21, "gell_mann": [16, 21], "gellmann": 18, "gener": [3, 6, 14, 18, 19, 20, 21, 22, 29, 32, 33, 40, 41, 46, 48, 49, 50, 51, 53, 54], "general_state_fidel": [38, 41], "generalized_amplitude_damp": 6, "generalized_amplitude_damping_krau": [16, 20], "generalized_depolar": 6, "generalized_depolarizing_krau": [16, 20], "generalizedamplitudedamp": [27, 29], "generalizeddepolar": [27, 29], "generalizedgel": 18, "get": [6, 8, 21, 49, 50], "get_backend": [7, 8], "get_circuit_plot_param": [31, 36], "get_devic": [7, 8], "get_dtyp": [7, 8, 51], "get_float_dtyp": [7, 8], "get_last_lr": 54, "get_se": [7, 8], "ghz": 22, "ghz_state": [16, 22], "gif": 15, "give": 21, "given": [4, 8, 21, 40, 41, 45, 46, 48, 49, 50, 51, 53, 54], "global": [8, 14, 41], "go": 0, "good": 48, "gpu": 53, "grad": [4, 46, 54], "grad_fn": [46, 49], "gradient": [4, 15, 37, 38, 40, 46, 54], "gradual": 54, "graph": 5, "greater": 15, "griffith": [48, 54], "ground": 54, "group": [19, 21, 49], "grover": 18, "grover_matrix": [16, 18], "grover_op": 18, "gt": [46, 47, 49, 50, 52], "guid": 54, "h": [6, 16, 18, 31, 35, 40, 45, 46, 48, 49, 51, 53, 54], "h_": 17, "h_gate": [16, 18], "h_heisenberg": 17, "h_k": 48, "h_list": 48, "h_qkit": 51, "h_xy": 17, "ha": [15, 29, 40, 41, 46, 49, 50, 51], "haar": [19, 53], "haar_density_oper": [16, 19], "haar_orthogon": [16, 19], "haar_state_vector": [16, 19, 53], "haar_unitari": [16, 19], "hadamard": [5, 6, 18, 19, 35, 46, 49, 51], "half": 40, "ham": 46, "hamiltonian": [1, 7, 16, 19, 25, 42, 44, 45, 46, 53, 54], "hand": 49, "happen": [6, 50], "hat": [48, 54], "have": [6, 46, 49, 51, 54], "heisenberg": [17, 21, 48], "heisenberg_hamiltonian": [16, 17, 48], "heisenberg_weyl": [16, 21], "help": 54, "here": [6, 18, 45, 46, 47, 49, 50, 53, 54], "herm_transform": [38, 40], "hermitian": [19, 39, 40, 48, 53], "hessian": [38, 40], "hidden": 54, "high": [40, 54], "higher": 51, "hilbert": [48, 49, 51, 53], "histori": [4, 5, 6, 32, 33, 49], "home": 0, "horizont": [32, 49], "how": [45, 46, 47, 48, 49, 50, 51, 54], "howev": [49, 50, 53], "html": [6, 18], "http": [5, 6, 18, 29], "human": 54, "hybrid": 46, "i": [3, 5, 6, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 32, 33, 34, 35, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "i_": [49, 51], "i_a": 40, "i_b": 40, "idea": 50, "ident": [18, 40, 46, 48, 49], "identif": 41, "idx": [4, 45], "ieee": 19, "if_print": [6, 37, 47], "ignor": 40, "ignore_zero": 40, "iix": [9, 48], "ij": 48, "illegitim": 18, "illustr": [45, 47], "imag": [6, 14], "image_filepath": 14, "image_to_density_matrix": [10, 14], "immedi": 50, "implement": [6, 8, 19, 22, 29, 33, 37, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54], "impli": [41, 49], "import": [40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "improv": [46, 54], "inc": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "inch": 6, "includ": [40, 46, 47, 49, 50, 51, 52, 53, 54], "incorpor": 47, "index": [3, 4, 6, 9, 15, 21, 22, 25, 34, 37, 39, 46, 49, 50, 53], "index_select": 53, "indic": [3, 5, 6, 9, 21, 28, 29, 30, 32, 33, 34, 35, 37, 40, 41, 50], "infidel": 54, "influenc": 54, "info": 39, "inform": [3, 5, 6, 9, 19, 29, 32, 33, 37, 41, 42, 44, 46, 48, 49, 50, 51, 54], "inher": 49, "inherit": 54, "init_st": 15, "initi": [4, 6, 15, 48, 49, 50, 52, 54], "inner": 53, "input": [6, 9, 14, 15, 18, 24, 25, 28, 29, 32, 33, 37, 39, 40, 41, 45, 46, 49, 50, 51, 52, 53, 54], "input_dim": [40, 41], "input_dtyp": [39, 40, 41], "input_st": 46, "input_str": 41, "insert": [46, 49], "insid": 54, "insight": 54, "inspir": 54, "instal": 6, "instanc": [5, 6, 14, 28, 32, 41, 44, 47, 49, 50, 54], "instanti": 9, "instruct": 47, "int": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 46, 49, 54], "integ": [3, 14, 21, 39], "integr": [47, 54], "interact": [44, 48, 54], "interconnect": 54, "interfac": [24, 25, 32, 46], "introduc": [46, 51, 52, 54], "introduct": [42, 43, 51], "invers": [6, 35, 49], "involv": [45, 46, 48], "ion": 34, "ipykernel_24616": 50, "is_auto_stop": 3, "is_choi": [38, 39], "is_ctrl_u": 3, "is_density_matrix": [38, 39], "is_hermitian": [38, 39], "is_linear": [38, 39], "is_posit": [38, 39, 52], "is_povm": [38, 39, 50], "is_ppt": [38, 39, 52], "is_projector": [38, 39], "is_pvm": [38, 39], "is_real": [19, 53], "is_save_data": 3, "is_state_vector": [38, 39], "is_unitari": [19, 38, 39, 52], "isaac": [48, 49, 50, 51], "isdynam": 6, "ising_hamiltonian": [16, 17, 48, 54], "isometr": 51, "isometri": 51, "isomorph": 51, "isotrop": [22, 53], "isotropic_st": [16, 22, 53], "isq2": 51, "item": [9, 18, 49, 51, 54], "iter": [3, 4, 5, 6, 9, 18, 20, 25, 28, 29, 30, 32, 33, 34, 35, 37, 40, 54], "itr": 54, "its": [19, 40, 41, 47, 48, 50, 51, 53, 54], "itself": 49, "ixz": 51, "iyx": 48, "izn": 22, "j": [6, 18, 19, 20, 21, 22, 41, 45, 46, 47, 48, 49, 50, 51, 53, 54], "j_": 48, "je": 41, "jf": 41, "jim": [48, 54], "jule": 54, "just": [46, 47, 49], "k": [17, 20, 29, 40, 48], "k_": 51, "k_0": 51, "keep": 45, "keep_stat": [25, 45, 47, 50], "kei": 54, "ket": [51, 52, 53], "keyword": 49, "khatri": [41, 51], "kind": [49, 52], "kinet": 48, "known": [48, 49, 51], "krau": [6, 19, 20, 28, 29, 30, 37, 41, 45, 46, 49, 53], "kraus_channel": [6, 45, 49], "kraus_op": [6, 49], "kraus_oper": 20, "kraus_repr": [28, 30, 46, 49, 51], "krausrepr": [27, 30, 49], "kron": 46, "kron_pow": [38, 40], "kroneck": [14, 40, 50, 52], "kwarg": [32, 36, 37, 41], "l": [29, 41, 48, 49, 50, 51, 54], "label": [41, 54], "lack": 50, "lam": 15, "lambda": [6, 18, 34, 35, 48], "lambda_0": 54, "lambda_k": 48, "langl": [6, 18, 22, 33, 34, 46, 48, 50, 51, 53, 54], "langle00": 22, "langle11": 22, "larger": [40, 50, 52, 53], "last": 50, "latex": 6, "latex_nam": [6, 49], "layer": [1, 2, 4, 6, 33, 34, 35, 46, 47, 49, 54], "ldot": 54, "le": 29, "lead": 51, "learn": [3, 46, 47, 48, 49, 51, 54], "learnabl": 54, "least": [14, 52], "left": [19, 46, 48, 49, 51, 54], "leftarrow": 54, "legal": 39, "legend": 54, "legitim": 18, "legitimaci": 9, "len": [45, 48, 54], "length": [14, 18, 29, 53], "less": [29, 50], "let": [46, 51, 53], "letter": 41, "level": 54, "leverag": 54, "lib": 50, "librari": [17, 19, 22], "like": [45, 49, 51, 54], "linalg": [1, 14, 38, 54], "line": [47, 48, 49, 50, 54], "linear": [5, 6, 39, 40, 41, 46, 49, 51], "linear_entangled_lay": [6, 49], "linear_map": [40, 41], "linearentangledlay": [2, 5], "linestyl": 54, "link": [38, 41], "linspac": 18, "list": [3, 4, 5, 6, 9, 12, 13, 14, 15, 19, 20, 21, 22, 25, 28, 29, 30, 32, 33, 34, 37, 39, 40, 41, 45, 46, 49, 51, 53, 54], "list_channel": 37, "list_choi": 45, "list_depo": 45, "list_exp_h": 48, "list_itr": 54, "list_krau": 45, "list_pvm": 50, "list_rho": 50, "list_unitari": [37, 45], "list_x": 45, "ll": 46, "loc": 54, "local": [6, 50], "local_unitari": 6, "locat": 49, "locc": [6, 37], "log": [3, 40, 41, 54], "logarithm": [40, 41], "logarithmic_neg": [38, 41], "logic": [29, 49], "logm": [38, 40], "long": 6, "loss": [1, 40, 45, 46, 47, 48, 50, 54], "loss_fcn": 54, "loss_funct": 40, "loss_list": 54, "lost": 53, "lower": 54, "lowercas": 41, "lowest": 54, "lr": [3, 54], "lr_schedul": 54, "lt": [46, 49, 50, 52], "lvert": 40, "m": [6, 16, 18, 29, 31, 34, 40, 41, 50, 51, 54], "m_": 50, "m_m": 50, "machin": [46, 54], "magnet": [48, 54], "mai": [6, 40, 50], "mainli": [50, 52, 53], "make": [24, 25, 46, 50, 53, 54], "mana": [38, 41], "manag": [46, 54], "manipul": [42, 44, 46, 49], "mann": 21, "mannmatrix": 18, "map": [18, 40, 41, 51], "mark": [41, 51, 54], "marker": 54, "maslov": 19, "mat": [39, 40], "match": [3, 41, 47, 50], "materi": 54, "math": [19, 33, 46], "mathbb": 21, "mathcal": [45, 51, 53], "mathemat": [5, 45, 48, 54], "mathit": [6, 18], "mathrm": 51, "mathworld": 18, "matirc": 40, "matplotlib": [6, 32, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "matric": [9, 18, 21, 40, 41, 45, 48, 51, 52, 54], "matrix": [1, 5, 6, 9, 12, 14, 15, 16, 19, 21, 22, 28, 30, 32, 33, 34, 35, 39, 40, 41, 48, 49, 50, 51, 52, 53, 54], "matrix_1": 40, "matrix_1st": 40, "matter": 54, "maxcut": 5, "mcardl": 54, "mean": [6, 8, 14, 19, 25, 37, 50, 54], "measur": [1, 6, 23, 37, 39, 41, 42, 43, 44, 46, 48, 49, 53, 54], "measure_basi": [6, 37], "measure_idx": 6, "measure_op": 25, "mechan": [48, 50, 54], "mention": 51, "merg": 9, "mess": 46, "method": [4, 46, 49, 51, 53, 54], "metric": 54, "mh": 45, "michael": [48, 49, 50, 51], "microsecond": [6, 20, 29], "mid": 6, "might": [48, 50], "min": 54, "min_": 54, "minim": 54, "minimum": 54, "mix": [12, 22, 48, 51, 53], "mixed_st": 51, "mixed_state_evo": 51, "mixedst": [11, 12], "mixtur": 29, "mode": [3, 28], "model": [3, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "modern": [41, 48, 51, 54], "modifi": [46, 54], "modul": [4, 8, 9, 43, 45, 49, 50, 52, 54], "moll": 54, "moment": 54, "more": [6, 40, 46, 48, 49, 50, 51, 53, 54], "moreov": [48, 49], "most": [50, 51, 52], "move": [46, 54], "ms_gate": [16, 18], "mse": 54, "multi": [15, 34, 49, 51], "multi_qubit_g": [26, 31], "multipl": [46, 50, 53], "must": [6, 29, 34, 35, 41, 49, 51], "mutual": 41, "mutual_inform": [38, 41], "m\u00f8lmer": [6, 34], "n": [12, 13, 17, 18, 19, 20, 21, 22, 29, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "n_qubit": [9, 48], "n_term": [9, 48], "name": [3, 4, 6, 8, 15, 48, 50, 51], "name_task": 3, "nanosecond": [6, 20, 29], "napolitano": [48, 54], "natur": [40, 54], "nbsphinx": 46, "ndarrai": [4, 9, 14, 15, 18, 20, 39, 40, 41, 52, 53, 54], "need": [5, 14, 28, 32, 40, 41, 46, 47, 50], "neg": [38, 39, 41, 54], "net": [3, 46], "network": [42, 43, 44, 45, 49], "neumann": [41, 52], "neural": [42, 43, 44, 45, 49], "neuron": 54, "new": [3, 4, 53], "new_cir": 46, "new_stat": 53, "new_v": 3, "next": [46, 54], "niel": 6, "nielsen": [29, 41, 48, 49, 50, 51], "nikolaj": 54, "nit": 53, "nkron": [14, 38, 40, 52, 53], "nn": [43, 54], "node": [5, 54], "nois": 51, "noisi": [28, 53], "non": 39, "none": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 18, 19, 20, 25, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 50, 54], "norm": [40, 41, 51, 52], "normal": [4, 19, 46, 49, 51, 53], "notat": [45, 46, 48, 49, 50, 51, 53, 54], "note": [46, 49, 50, 51, 53], "notic": [45, 50, 51], "notimpl": 37, "notimplementederror": [19, 22, 24, 25, 28, 37, 41], "np": [15, 49, 54], "nthe": [50, 51, 53], "nulliti": 41, "num_acted_param": [6, 32, 33, 45, 46], "num_acted_qubit": 32, "num_aux_qubit": 3, "num_block_qubit": 40, "num_itr": [3, 54], "num_qubit": [5, 6, 18, 19, 20, 21, 22, 29, 45, 47, 48, 49, 50, 51, 52, 53, 54], "num_qubits_u": 3, "num_qutrit": [6, 47], "num_slot": 3, "num_system": [6, 19, 21, 22, 33, 46, 47, 49, 53], "numbar": 47, "number": [3, 5, 6, 9, 14, 15, 18, 19, 20, 21, 22, 28, 29, 32, 33, 40, 45, 47, 48, 49, 50, 51, 53, 54], "numer": 54, "numpi": [8, 14, 39, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "o": [6, 19, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "object": [49, 51, 53], "observ": [9, 19, 21, 25, 41, 45, 50, 53, 54], "obtain": [14, 46, 47, 48, 50, 53, 54], "occupi": [32, 52], "occur": 50, "of_gat": [16, 18], "offer": [47, 54], "often": [48, 50, 51, 54], "omega": 49, "omega_n": 18, "omit": [6, 49], "onc": 54, "one": [4, 6, 22, 37, 40, 45, 46, 47, 49, 50, 51, 53, 54], "one_st": [16, 22], "ones": [48, 54], "ones_lik": [45, 46, 49], "onewaylocc": [26, 37], "onli": [4, 5, 14, 19, 21, 28, 40, 41, 49, 50, 51, 53], "onto": 45, "op": [4, 39, 45, 47, 50], "oper": [1, 3, 4, 6, 7, 8, 9, 18, 20, 21, 39, 41, 45, 48, 51, 52, 53, 54], "oper_histori": 4, "operatorlist": [2, 4, 6], "operatornam": [46, 48, 54], "oplu": 18, "opt": 54, "optim": [3, 24, 25, 54], "option": [3, 39, 46, 50], "oracl": [6, 18, 31, 33, 45, 46, 47, 49], "order": [4, 12, 13, 40, 41, 49], "org": [5, 6, 29], "organ": 54, "orthogon": [19, 50], "orthogonal_projector": 19, "other": [6, 14, 22, 37, 40, 44, 46, 51, 53, 54], "otherwis": [39, 47], "otim": [6, 18, 19, 34, 40, 46, 49, 51, 53], "our": 46, "out": [3, 28, 40, 45], "out_dim": 41, "outcom": [6, 48, 50], "output": [6, 20, 28, 36, 40, 41, 45, 46, 47, 49, 50, 51, 52, 53, 54], "output_st": [45, 49, 51], "output_state_temp": 51, "overal": [46, 54], "overlap": [53, 54], "overload": 32, "overshoot": 54, "p": [6, 16, 18, 20, 22, 29, 31, 34, 35, 39, 40, 41, 48, 50, 51, 52, 53], "p_": 22, "p_0": 48, "p_1": 48, "p_2": 48, "p_3": 48, "p_gate": [16, 18], "p_i": 48, "p_j": 48, "p_m": 50, "p_matrix": 18, "p_norm": [38, 40, 52], "packag": [50, 51], "pair": [4, 54], "paper": 5, "param": [4, 6, 18, 32, 33, 34, 35, 45, 46, 49, 54], "param_oracl": [6, 46], "param_shar": [6, 32, 33, 34, 35], "paramet": [3, 4, 5, 6, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 40, 41, 45, 46, 49, 51, 54], "parameter": [3, 6, 32, 33, 42, 44, 45, 46, 49, 51], "parametr": 49, "paramg": [31, 32], "paramoracl": [3, 31, 33], "part": [49, 50, 51], "partial": [40, 51, 52, 54], "partial_trac": [38, 40], "partial_trace_discontigu": [38, 40], "partial_transpos": [38, 40], "particular": [46, 50, 54], "pass": [4, 37, 45, 46, 54], "patch": 6, "path": [6, 14, 54], "pauli": [6, 9, 18, 20, 21, 29, 40, 45, 47, 48, 49, 50, 51, 53, 54], "pauli_basi": [16, 21], "pauli_channel": 6, "pauli_decomposit": [38, 40], "pauli_group": [16, 21], "pauli_krau": [16, 20], "pauli_str": [9, 21, 45, 48], "pauli_str_basi": [16, 21], "pauli_str_convertor": [38, 41], "pauli_str_povm": [16, 21, 50], "pauli_word": [9, 48], "pauli_words_matrix": 9, "pauli_words_r": 9, "paulichannel": [27, 29], "pdf": 5, "per": 6, "perform": [44, 46, 47, 49, 54], "perm_list": 40, "permut": [40, 53], "permute_system": [38, 40], "peruzzo": 54, "ph": 19, "phase": [6, 16, 18, 20, 21, 29, 41, 48, 49], "phase_damp": 6, "phase_damping_krau": [16, 20], "phase_flip": 6, "phase_flip_choi_repr": 51, "phase_flip_krau": [16, 20, 51], "phase_flip_kraus_repr": 51, "phase_flip_stin_repr": 51, "phase_g": [16, 18], "phase_oper": 18, "phase_space_point": [16, 21], "phasedamp": [27, 29], "phaseflip": [27, 29], "phenomena": 54, "phi": [6, 15, 18, 22, 34, 35, 51, 53], "phi_": 22, "phi_j": 53, "photon": 54, "physic": [39, 48, 49, 54], "pi": [4, 5, 6, 18, 21, 34, 35, 46, 49, 51], "pictur": 15, "pivot": 54, "place": [32, 33], "plai": [51, 54], "plane": 15, "platform": 0, "pleas": [29, 47, 49], "plot": [6, 15, 32, 33, 46, 47, 49, 51, 54], "plot_density_matrix_graph": [7, 15], "plot_multi_qubits_state_in_bloch_spher": [7, 15], "plot_rotation_in_bloch_spher": [7, 15], "plot_state_in_bloch_spher": [7, 15], "plot_width": 6, "plt": [6, 54], "pmatrix": 48, "pnorm": 52, "point": 21, "poisson": 46, "pop": 49, "posit": [21, 32, 39, 49, 51, 52, 53], "possibl": 48, "post": [6, 46, 50], "post_select": 6, "postul": 50, "potenti": [48, 50], "povm": [21, 39, 50], "power": 40, "pp": 39, "ppt": [39, 52], "pqc": 44, "pqcombnet": [2, 3], "practic": [46, 50, 54], "precis": 51, "predefin": [49, 54], "predict": 54, "prepar": [44, 54], "preprint": [41, 51], "present": 51, "preserv": [6, 37, 45, 51], "preserve_qubit": 40, "press": [29, 48, 49, 50, 51, 54], "prevent": 54, "previou": [46, 54], "prime": 51, "principl": [41, 51, 54], "print": [6, 17, 18, 19, 20, 21, 22, 37, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "print_exc": 50, "print_info": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "prob": [6, 14, 20, 22, 29, 47, 49, 50, 51, 53], "prob_list": 20, "prob_sampl": [38, 40, 50], "probabilist": [37, 50], "probabl": [6, 12, 13, 14, 20, 25, 29, 37, 40, 47, 49, 50, 51, 53, 54], "problem": [5, 46, 54], "proce": 54, "process": [3, 6, 20, 29, 46, 53, 54], "processor": 54, "produc": 46, "product": [14, 40, 41, 48, 49, 52, 53], "product_st": 53, "program": 41, "progress": 54, "proj": [6, 33, 46], "project": [25, 39, 45, 50], "projector": [6, 19, 33, 39, 50, 52], "prompt": 3, "propag": [46, 54], "properli": 6, "properti": [4, 5, 6, 9, 12, 13, 28, 32, 44, 45, 48, 52, 53, 54], "proport": [6, 40, 50], "protocol": [6, 37], "provid": [3, 28, 32, 39, 46, 48, 49, 50, 51, 52, 53, 54], "psd": 39, "psi": [22, 40, 46, 48, 50, 51, 53, 54], "psi_j": 53, "psi_x": 53, "pure": [13, 22, 48, 50, 51, 53, 54], "pure_st": 51, "pure_state_evo": 51, "purest": [11, 13], "puriti": [38, 41, 52], "purity_st": 52, "pvm": [25, 37, 39, 45, 50], "py": 50, "pyplot": 54, "python": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "pytorch": [44, 49], "q": [20, 29, 40], "qaoa": 5, "qaoalay": [2, 5], "qaoalayerweight": [2, 5], "qft": [18, 21, 49], "qft_": 49, "qft_basi": [16, 21], "qft_gate": 18, "qft_invers": 49, "qft_mat": 49, "qft_matrix": [16, 18, 49], "qft_state": 21, "qinfo": [1, 49, 50, 51, 52, 53], "qkit": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "qnn": 54, "qtf": 18, "quad": [48, 51], "quair": 0, "quair_test": 50, "quairkit": [42, 43, 44, 45, 47, 51, 52, 54], "qualcomm": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "qualnam": 8, "quantifi": [52, 54], "quantum": [3, 5, 6, 12, 13, 14, 15, 18, 19, 20, 21, 22, 25, 28, 29, 30, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 46, 48], "quantumcomput": 6, "quasi": 37, "quasi_prob": 37, "quasioper": [26, 37], "qubit": [3, 5, 6, 9, 14, 15, 18, 19, 20, 21, 22, 25, 29, 30, 32, 33, 34, 35, 37, 40, 41, 43, 45, 46, 48, 49, 50, 52, 53, 54], "qubit_num": 9, "qubits_idx": [5, 6, 29, 32, 34, 35, 45, 49, 50, 54], "qudit": [6, 18, 21, 33, 42, 43], "queri": 3, "quleaf": 25, "qutrit": [6, 14, 53], "r": [22, 28, 29, 46, 49, 54], "r_": [6, 18, 45, 49, 51], "r_entropi": 52, "r_state": [16, 22], "r_x": [6, 18, 45], "r_xx": 18, "r_y": [6, 18, 45], "r_yi": 18, "r_z": [6, 18, 45], "r_zz": 18, "rais": [3, 6, 8, 15, 19, 22, 24, 25, 28, 32, 34, 35, 37, 39, 40, 41, 50], "rand": [45, 46, 49, 51], "random": [1, 3, 4, 6, 8, 16, 32, 33, 47, 48, 49, 51, 52, 53], "random_channel": [16, 19, 45, 49, 51, 53], "random_clifford": [16, 19], "random_density_matrix": [16, 19, 53], "random_hamiltonian_gener": [16, 19, 45, 46, 48], "random_hermitian": [16, 19], "random_orthogonal_project": [16, 19], "random_pauli_str_gener": [16, 19], "random_projector": [16, 19], "random_st": [16, 19, 45, 46, 47, 48, 49, 50, 51, 52, 53], "random_stin_repr": 49, "random_unitari": [16, 19, 45, 46, 47, 49, 51, 52, 53], "random_unitary_hermitian": [16, 19], "random_unitary_with_hermitian_block": [16, 19], "randomize_param": [4, 46], "randomli": [19, 46, 49, 53], "rang": [3, 6, 28, 29, 32, 33, 45, 48, 51, 54], "rangl": [6, 18, 20, 22, 29, 34, 40, 46, 48, 50, 51, 53, 54], "rangle_": [22, 51], "rank": [19, 28, 50, 51, 52, 53], "rate": [3, 54], "ratio": 6, "rayleigh": 54, "re": 46, "reach": 54, "read": 53, "readabl": [47, 48, 54], "readi": 4, "real": [5, 18, 19, 48, 49, 53, 54], "real_block_lay": [6, 49], "real_entangled_lay": [6, 46, 49], "real_x": 18, "realblocklay": [2, 5], "realentangledlay": [2, 5], "receiv": 54, "recent": 50, "recogn": [41, 50], "recommend": [45, 46], "record": 40, "red": 15, "reduc": [46, 54], "reducelronplateau": 54, "refer": [4, 18, 19, 29, 41, 44, 45, 46, 47, 53], "referenc": 19, "rel": [41, 52], "relat": [49, 52, 53], "relative_entropi": [38, 41, 52], "relax": [6, 20, 29], "relev": 52, "relu": 46, "remain": [6, 33, 40, 51, 52], "remov": [40, 49], "renyi": 41, "replac": [4, 20, 29, 47, 49, 51], "replacement_choi": [16, 20, 47, 49], "replacement_choi_repr": [47, 49], "replacementchannel": [27, 29], "report": 54, "repr_typ": [51, 53], "repres": [6, 19, 21, 22, 28, 30, 32, 33, 37, 40, 41, 45, 47, 48, 49, 51, 53, 54], "represent": [1, 5, 6, 12, 13, 14, 16, 19, 28, 30, 40, 41, 45, 46, 47, 48, 49, 54], "reproduc": [3, 54], "requir": [6, 15, 32, 33, 34, 41, 46, 51], "requires_grad": 46, "research": 46, "reset": [6, 20, 29, 36, 37, 49, 53], "reset_channel": 6, "reset_circuit_plot_param": [31, 36], "reset_krau": [16, 20, 49], "reset_kraus_repr": 49, "resetchannel": [27, 29], "resetst": [26, 37], "resolut": 6, "respect": [4, 9, 15, 21, 25, 40, 46, 47, 48, 50, 53, 54], "restrict": 53, "result": [6, 25, 37, 40, 41, 46, 47, 48, 50, 51, 52, 53, 54], "return": [4, 5, 6, 8, 9, 14, 17, 18, 19, 20, 21, 22, 24, 25, 28, 32, 36, 37, 39, 40, 41, 45, 46, 50, 53, 54], "return_glob": 41, "reveal": 54, "revers": 51, "review": [43, 54], "revis": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "rho": [29, 39, 40, 41, 45, 47, 48, 49, 50, 51, 53, 54], "rho1": 19, "rho2": 19, "rho_": [45, 51], "right": [46, 48, 49, 51, 54], "rightarrow": [51, 53], "ritz": 54, "role": [51, 54], "root": 40, "rotat": [5, 6, 15, 18, 34, 35, 41, 45, 49, 51, 52, 54], "rotating_angl": 15, "round": 51, "row": 50, "rule": [49, 50, 54], "run": [3, 28, 49, 51], "runtim": 46, "runtimeerror": 41, "runtimewarn": [40, 41], "rx": [6, 16, 18, 31, 34, 35, 45, 49, 51], "rx_gate": [16, 18], "rxx": [6, 16, 18, 31, 34], "rxx_gate": [16, 18], "ry": [5, 6, 16, 18, 31, 34, 35, 45, 46, 49, 51], "ry_gat": [16, 18], "ryi": [6, 16, 18, 31, 34], "ryy_gat": [16, 18], "rz": [5, 6, 16, 18, 31, 34, 35, 45, 49, 51], "rz_gate": [16, 18, 49], "rzz": [6, 16, 18, 31, 34], "rzz_gate": [16, 18], "s_gate": [16, 18], "s_state": [16, 22], "sakurai": [48, 54], "sam": 54, "same": [6, 28, 32, 33, 34, 35, 39, 40, 41, 46, 50, 51, 52], "sampl": [4, 19, 25, 40, 44, 46], "satisfi": [29, 46, 48, 50, 51, 52], "save": [3, 6, 8], "save_gif": 15, "save_p": 15, "save_path": 6, "scalar": 36, "scale": [6, 36], "scale_circuit_plot_param": [31, 36], "schatten": [40, 52], "schedul": 54, "schmidt": 40, "schmidt_decompos": [38, 40], "schroeter": [48, 54], "scienc": 54, "scipi": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "sdg": [6, 16, 18, 31, 35], "sdg_gate": [16, 18], "second": [14, 15, 39, 40, 45, 46, 47, 50, 52, 53], "section": [47, 54], "see": [6, 29, 53], "seed": [3, 8, 48, 54], "seek": 54, "select": [6, 40, 49], "selectbackward0": 49, "self": [32, 46], "semant": 49, "semi": [39, 52, 53], "semidefinit": 41, "sent": 53, "sequenc": [6, 19, 21, 22, 45, 47, 49, 50, 51, 53, 54], "sequenti": 4, "sergei": 19, "seri": [40, 45, 49], "serv": [48, 54], "set": [1, 3, 4, 6, 8, 14, 15, 16, 32, 33, 36, 39, 41, 45, 46, 47, 48, 49, 50, 51, 53, 54], "set_backend": [7, 8], "set_circuit_plot_param": [31, 36], "set_color": 15, "set_devic": [7, 8], "set_dtyp": [7, 8, 45, 47, 50, 51, 52], "set_gate_info": 32, "set_op": 39, "set_se": [7, 8, 54], "setup": [14, 42, 43, 49, 54], "sever": [50, 52, 53], "shape": [12, 13, 17, 18, 21, 28, 39, 40, 41, 45, 46, 50, 53], "share": [6, 32, 33, 34, 35, 46], "shift": [16, 18, 54], "shift_gat": [16, 18], "shift_oper": 18, "shot": [40, 50], "should": [3, 6, 8, 19, 22, 28, 29, 39, 40, 41, 50], "show": [6, 15, 49, 54], "show_arrow": 15, "shown": [40, 49, 50, 51], "side": [46, 49], "sigl": 51, "sigma": [20, 29, 41, 49, 51, 53], "sigma_0": 48, "sigma_1": 48, "sigma_2": 48, "sigma_3": 48, "sigma_k": [20, 29], "sigma_x": 53, "sigmoid": 46, "sign": 51, "signal": 54, "signific": 51, "sigx_p": 9, "sigy_p": 9, "sigz_p": 9, "similar": [3, 47, 49, 54], "similarli": [45, 47, 49], "simpl": [47, 50], "simpli": 9, "simplic": 54, "simplifi": [9, 45, 54], "simul": [29, 50, 54], "sin": [6, 18, 34, 35, 51], "sinc": [50, 51], "singl": [5, 6, 14, 32, 33, 34, 35, 41, 45, 46, 48, 49, 50, 52, 53], "single_qubit_g": [26, 31], "site": [9, 48, 50, 54], "situat": 52, "size": [9, 15, 19, 21, 40, 45, 46, 47, 48, 50, 51, 53, 54], "small": 54, "smaller": 51, "smooth": 54, "so": [49, 50, 52], "solut": 54, "solv": 46, "solver": 54, "some": [6, 47, 48, 51, 53], "soon": 37, "sourc": [3, 4, 5, 6, 12, 13, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 41, 51], "space": [21, 40, 41, 48, 49, 50, 51, 53, 54], "span": 21, "spars": 9, "speak": 51, "special": [1, 26, 46, 54], "specif": [3, 46, 49, 51, 52, 54], "specifi": [3, 14, 15, 25, 28, 32, 39, 40, 41, 47, 49, 50, 51, 54], "spectral": 50, "spectrum": 48, "sphere": 15, "spin": 9, "spinop": [7, 9], "split_lin": [47, 48], "spontan": 54, "sqrt": [6, 18, 20, 22, 29, 34, 35, 41, 49, 50, 51, 53, 54], "sqrt_2": 51, "sqrtm": [38, 40], "squar": [40, 41, 54], "squeezebackward0": 49, "st": 18, "stab_nul": [38, 41], "stab_renyi": [38, 41], "stabil": 41, "stabl": [6, 54], "stack": [45, 48, 51], "stackexchang": 6, "stage": 49, "standard": 21, "start": [8, 15, 32, 45, 46, 49], "start_tim": [50, 54], "state": [1, 6, 7, 15, 16, 19, 20, 21, 24, 25, 29, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 52, 54], "state1": [46, 52], "state1_num": 52, "state1_sta": 52, "state2": [46, 52], "state2_num": 52, "state2_sta": 52, "state_1": 53, "state_1st": 14, "state_2": 53, "state_a": 14, "state_backend": 14, "state_basi": 21, "state_cho": 53, "state_choi": 51, "state_evo": [51, 53], "state_evo_temp": 51, "state_fidel": [38, 41, 52], "state_kra": 53, "state_krau": 51, "state_list": 51, "state_temp": 51, "state_tran": 51, "state_trans_temp": 51, "state_vector": [10, 11, 14, 19, 21, 22, 45, 47, 49, 51, 53], "statefidel": [23, 24], "statist": 54, "std_basi": [16, 21], "steadi": 54, "step": 54, "stin_repr": 51, "stine_op": 49, "stine_repr": 49, "stinespr": [6, 19, 28, 30, 37, 41, 49], "stinespring_channel": [6, 49], "stinespring_mat": 30, "stinespring_repr": [6, 28], "stinespringrepr": [27, 30, 49], "stop": 3, "stop_gradi": [4, 54], "storag": 3, "store": [12, 13, 15, 45, 54], "str": [3, 4, 5, 6, 8, 9, 14, 15, 19, 21, 25, 28, 29, 33, 34, 35, 37, 40, 41], "strength": [48, 54], "string": [9, 21, 25, 48, 50], "strongli": [5, 6], "structur": [19, 46, 54], "studi": 48, "sub": 40, "subclass": 49, "sublay": 4, "subnorm": 41, "subsequ": 46, "subsystem": [40, 50, 51, 53], "suitabl": 40, "sum": [29, 40, 48, 50, 52], "sum_": [17, 22, 48, 51, 53, 54], "sum_ic_i": 40, "sum_m": 50, "sumeet": [41, 51], "summar": 50, "super": 46, "superconduct": 29, "superposit": 54, "superposition_lay": [6, 46], "superpositionlay": [2, 5], "support": [4, 14, 24, 25, 37, 39, 41, 45, 47, 48, 49, 50, 51, 52, 53], "suppos": 46, "swap": [6, 16, 18, 31, 34, 49, 51], "swap_gat": [16, 18], "symbol": [45, 46, 48, 49, 50, 51, 53, 54], "sys_a": 40, "sys_dim": [12, 13], "sys_idx": [51, 53], "system": [6, 9, 12, 13, 14, 19, 21, 22, 25, 28, 30, 32, 33, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "system_dim": [6, 14, 19, 21, 22, 40, 47], "system_histori": [6, 49], "system_idx": [6, 25, 28, 29, 30, 32, 33, 37, 46, 47, 49], "system_seq": [12, 13, 53], "s\u00f8rensen": [6, 34], "t": [6, 16, 18, 21, 31, 35, 48, 51], "t_1": [6, 20, 29], "t_2": [6, 20, 29], "t_a": [40, 41], "t_gate": [16, 18], "tabl": [3, 14, 15, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "tag": [48, 49, 50, 51, 54], "take": [40, 41, 46, 51, 54], "taken": [40, 41, 53], "target": [19, 24, 41, 45, 49, 51, 53, 54], "target_funct": 3, "target_st": 24, "task": [3, 46, 54], "taylor": 40, "tdg": [6, 16, 18, 31, 35], "tdg_gate": [16, 18], "techniqu": 54, "technologi": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "temp": 50, "templat": [5, 54], "tensor": [3, 4, 6, 8, 9, 12, 13, 14, 15, 17, 18, 19, 20, 21, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 39, 40, 41, 45, 46, 48, 49, 50, 51, 52, 53, 54], "tensor_st": [10, 14], "term": [9, 19, 25, 45, 48, 51, 54], "test": [3, 39], "test_unitary_info": 3, "tex": 6, "tex_demo": 6, "texnam": 49, "text": [18, 20, 28, 29, 41, 45, 49, 51], "text_labels_and_annot": 6, "th": [6, 22, 48, 53, 54], "tha": 51, "than": [15, 29, 40, 50, 51, 53], "thei": [21, 49, 51, 53], "them": [46, 49, 53, 54], "theorem": 50, "theoret": [52, 53, 54], "theori": [19, 41, 51, 52, 54], "therefor": [50, 51], "thermal": [6, 20, 29], "thermal_relax": 6, "thermal_relaxation_krau": [16, 20], "thermalrelax": [27, 29], "thermodynam": 54, "theta": [4, 6, 15, 18, 34, 35, 45, 46, 49, 51, 54], "theta2": [6, 18, 34, 35], "theta_j": 54, "thi": [4, 5, 6, 12, 13, 14, 18, 19, 20, 21, 22, 24, 25, 28, 29, 30, 32, 33, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "thing": 49, "third": [47, 50, 53], "those": 47, "three": [6, 18, 20, 29, 34, 45, 46, 49, 53], "threshold": 54, "through": [37, 45, 46, 49, 51, 52, 54], "thu": [49, 51], "tilli": 54, "time": [6, 19, 20, 21, 29, 40, 41, 49, 50, 51, 52, 54], "time_list": 54, "to_stat": [10, 14, 51, 52, 53], "toffoli": [6, 16, 18, 31, 34], "toffoli_g": [16, 18], "tol": 41, "toler": [14, 39, 41], "too": 6, "tool": [15, 40, 41, 42, 44, 54], "torch": [3, 6, 8, 14, 15, 17, 18, 20, 21, 25, 34, 35, 39, 40, 41, 43, 45, 47, 48, 49, 50, 51, 52, 53, 54], "total": [5, 29, 32, 47, 48, 49, 54], "toward": 54, "tr": [29, 41, 45, 48, 51, 54], "trace": [15, 24, 38, 39, 40, 41, 45, 47, 48, 51, 52, 53, 54], "trace_dist": [38, 41, 52], "trace_idx": 40, "trace_norm": [38, 40], "traceback": 50, "tracedist": [23, 24, 52], "track": 54, "train": [3, 42, 44, 46], "train_mod": 3, "train_model": 54, "train_unitary_info": 3, "trainabl": [46, 49], "training_data": 46, "transact": 19, "transfer_stat": 4, "transform": [21, 40, 49, 50, 51, 52, 53, 54], "transit": 48, "transmit": 51, "transpos": [18, 40, 50, 51, 52, 53], "transpose_idx": 40, "trap": 34, "treat": 54, "true": [3, 4, 6, 9, 15, 19, 25, 28, 32, 39, 40, 41, 45, 46, 47, 50, 52, 53, 54], "try": 50, "tunabl": 54, "tune": 54, "tupl": [3, 5, 6, 9, 15, 25, 40, 41], "tutori": [0, 19, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "two": [6, 9, 14, 18, 20, 29, 34, 39, 40, 41, 46, 48, 49, 50, 52, 53, 54], "type": [6, 8, 9, 14, 17, 18, 19, 20, 21, 22, 24, 25, 28, 32, 36, 37, 39, 40, 41, 49, 51, 52, 53, 54], "type_repr": [28, 37], "typeerror": [3, 15, 28, 39, 41], "u": [3, 17, 18, 41, 49, 51, 54], "u3": [6, 16, 18, 31, 35, 46, 49], "u3_gat": [16, 18], "u3_matrix": 18, "u_1": 54, "u_3": [6, 18], "u_l": 54, "u_n": 54, "u_qudit_matrix": 18, "uf": [16, 18], "uf_gat": [16, 18], "unabl": 6, "unchang": 51, "under": [50, 51, 53], "undergo": 51, "underli": 54, "understand": [53, 54], "undo": 51, "unexpect": 28, "uniform": [4, 46, 54], "uniformli": 46, "uniqu": 50, "unit": [53, 54], "unitari": [3, 5, 6, 18, 19, 32, 33, 37, 39, 40, 41, 45, 49, 51, 52, 53], "unitary_hermitian": 19, "unitary_matrix": [6, 18, 49], "unitary_matrix_1": 19, "unitary_matrix_2": 19, "unitary_matrix_3": 19, "unitary_temp": 51, "univers": [6, 18, 29, 33, 34, 45, 46, 47, 48, 49, 50, 51, 54], "universal2": [16, 18], "universal2_g": [16, 18], "universal3": [16, 18], "universal3_g": [16, 18], "universal_qudit": [6, 16, 18, 47], "universal_three_qubit": [6, 49], "universal_two_qubit": [6, 46, 49], "universalqudit": [31, 33], "universalthreequbit": [31, 34, 49], "universaltwoqubit": [31, 34, 49], "unknown": 6, "unless": 47, "unnorm": 21, "unsqueez": 45, "unsqueezebackward0": 46, "unsupport": [28, 41], "up": 46, "updat": [3, 29, 36, 46, 49, 54], "update_param": [4, 46, 49], "update_v_circuit": 3, "upper": 19, "uppercas": 41, "us": [3, 5, 6, 8, 9, 14, 18, 24, 25, 39, 40, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "use_spars": 9, "user": [3, 9, 32, 46, 47, 48, 49, 50, 52, 53], "usual": [40, 49], "util": [47, 51], "uu": 51, "uv": [17, 41], "v": [3, 17, 41, 48, 51, 54], "valid": [14, 39, 44, 54], "valu": [6, 8, 24, 25, 29, 39, 44, 45, 46, 49, 53, 54], "valuabl": 54, "valueerror": [3, 6, 8, 15, 28, 32, 34, 35, 40, 41, 50], "var": 40, "varepsilon": 51, "variabl": 40, "variant": [45, 46, 48, 49, 50, 51, 53, 54], "variat": [44, 49], "variation": 54, "varieti": 47, "variou": [52, 54], "vdot": 49, "vec": [39, 53], "vector": [13, 15, 19, 21, 39, 40, 51, 53], "verifi": [39, 41, 47, 49, 52], "version": [29, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "vert": [46, 48, 50, 51, 53, 54], "vertex": 48, "vertic": [17, 54], "via": [43, 45, 48, 50, 53], "view": [15, 54], "view_angl": 15, "view_dist": 15, "visit": 46, "visual": [1, 7, 26, 31, 54], "vol": [48, 50], "von": [41, 52], "von_neumann_entropi": [38, 41, 52], "vqe": [44, 46], "w": 22, "w_state": [16, 22], "wai": [6, 37, 46, 50, 53], "want": [37, 46, 47], "watrou": 41, "we": [4, 45, 46, 47, 49, 50, 51, 53, 54], "weak_superposition_lay": [6, 46], "weakli": [5, 6], "weaksuperpositionlay": [2, 5], "weight": [5, 54], "well": [46, 47], "were": 18, "weyl": 21, "what": 46, "when": [6, 14, 18, 21, 32, 34, 37, 40, 41, 48, 49, 50, 53], "wher": 51, "where": [6, 17, 20, 21, 28, 29, 37, 41, 45, 47, 48, 49, 50, 51, 52, 53, 54], "wherea": 53, "whether": [6, 9, 15, 19, 25, 28, 32, 33, 34, 35, 37, 39, 40, 52], "which": [3, 5, 6, 8, 9, 15, 19, 24, 25, 28, 29, 30, 32, 33, 34, 35, 37, 40, 41, 46, 48, 50, 51, 53, 54], "which_qubit": 15, "which_system": 49, "while": [6, 33, 47, 54], "whole": 49, "whose": [22, 40, 49], "wide": 54, "width": [6, 15, 32], "wild": [41, 51], "window": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "wire": 49, "within": [39, 53, 54], "without": [40, 41, 49], "wolfram": 18, "word": [9, 48], "work": [5, 45, 51], "worth": 49, "would": [46, 53], "written": 49, "wrong": [19, 22, 24, 25], "wrt": 49, "x": [6, 9, 15, 16, 18, 20, 21, 25, 29, 31, 32, 34, 35, 39, 45, 46, 47, 48, 49, 50, 51, 53, 54], "x0": [17, 19, 48], "x1": [17, 41, 45, 48], "x2": [17, 19, 48], "x3": 9, "x_": [48, 54], "x_gate": [16, 18], "x_i": [9, 48, 54], "x_j": 48, "x_k": [17, 48], "x_u": 17, "x_v": 17, "xlabel": 54, "xor_funct": 18, "xx": [6, 18], "xy": [17, 48], "xy_hamiltonian": [16, 17, 48], "y": [6, 15, 16, 18, 20, 21, 25, 29, 31, 34, 35, 41, 45, 48, 49, 50, 51, 52, 54], "y0": [17, 19, 45, 48], "y1": [17, 48], "y2": [17, 48], "y_": 48, "y_gate": [16, 18], "y_i": [9, 48, 54], "y_j": 48, "y_u": 17, "y_v": 17, "yet": 49, "yield": 54, "ylabel": 54, "you": [6, 24, 25, 37, 46, 49, 54], "your": 6, "yudong": 54, "yy": [6, 18], "yyi": 48, "z": [6, 9, 15, 16, 18, 19, 20, 21, 25, 29, 31, 34, 35, 37, 41, 45, 48, 49, 50, 51, 52, 53, 54], "z0": [9, 17, 19, 41, 45, 48, 53], "z1": [9, 17, 19, 41, 48], "z2": [17, 19, 48], "z_": [48, 54], "z_gate": [16, 18], "z_i": [9, 48, 54], "z_j": 48, "z_u": 17, "z_v": 17, "zero": [18, 22, 40, 49, 51, 52, 53], "zero_grad": 54, "zero_st": [16, 22, 53], "ziz": [9, 48], "zxzz": 9, "zz": [6, 18], "zzix": 9, "zzx": 9, "zzz": 48}, "titles": ["Welcome to QuAIRKit\u2019s documentation!", "quairkit", "quairkit.ansatz", "quairkit.ansatz.comb", "quairkit.ansatz.container", "quairkit.ansatz.layer", "quairkit.circuit", "quairkit.core", "quairkit.core.base", "quairkit.core.hamiltonian", "quairkit.core.state", "quairkit.core.state.backend", "quairkit.core.state.backend.density_matrix", "quairkit.core.state.backend.state_vector", "quairkit.core.state.state", "quairkit.core.visual", "quairkit.database", "quairkit.database.hamiltonian", "quairkit.database.matrix", "quairkit.database.random", "quairkit.database.representation", "quairkit.database.set", "quairkit.database.state", "quairkit.loss", "quairkit.loss.distance", "quairkit.loss.measure", "quairkit.operator", "quairkit.operator.channel", "quairkit.operator.channel.base", "quairkit.operator.channel.common", "quairkit.operator.channel.custom", "quairkit.operator.gate", "quairkit.operator.gate.base", "quairkit.operator.gate.custom", "quairkit.operator.gate.multi_qubit_gate", "quairkit.operator.gate.single_qubit_gate", "quairkit.operator.gate.visual", "quairkit.operator.special", "quairkit.qinfo", "quairkit.qinfo.check", "quairkit.qinfo.linalg", "quairkit.qinfo.qinfo", "tutorials", "tutorials.feature", "tutorials.introduction", "Batch Computation", "Neural network setup customization", "Introduction to qudit quantum computing", "Hamiltonian in QuAIRKit", "Constructing Quantum Circuits in QuAIRKit", "Measuring quantum states in QuAIRKit", "Quantum Gates and Quantum Channels", "Quantum information tools", "Manipulation of Quantum States in QuAIRKit", "Training parameterized quantum circuits"], "titleterms": {"": 0, "The": 48, "ad": 47, "add": 49, "among": 51, "amplitud": 51, "ansatz": [2, 3, 4, 5], "appli": 51, "backend": [11, 12, 13], "base": [8, 28, 32], "batch": [45, 50], "bit": 51, "case": 47, "channel": [27, 28, 29, 30, 47, 49, 51], "check": 39, "choi": 51, "circuit": [6, 45, 46, 47, 49, 54], "class": 48, "comb": 3, "common": 29, "compat": 52, "comput": [45, 47, 52], "construct": [48, 49], "contain": 4, "convers": 51, "core": [7, 8, 9, 10, 11, 12, 13, 14, 15], "custom": [30, 33, 46, 47, 49], "damp": 51, "data": 52, "databas": [16, 17, 18, 19, 20, 21, 22], "density_matrix": 12, "depolar": 51, "differ": 52, "distanc": 24, "document": 0, "eigensolv": 54, "environ": 53, "exampl": 51, "execut": 49, "expect": 48, "featur": 43, "flip": 51, "format": 52, "function": 52, "gate": [31, 32, 33, 34, 35, 36, 47, 49, 51], "gener": 47, "hamiltonian": [9, 17, 48], "inform": [52, 53], "instanc": 53, "interact": 53, "introduct": [44, 47, 48, 54], "krau": 51, "layer": 5, "linalg": 40, "loss": [23, 24, 25], "manag": 49, "manipul": 53, "matrix": 18, "measur": [25, 45, 47, 50], "modul": 46, "multi_qubit_g": 34, "network": [46, 54], "neural": [46, 54], "nn": 46, "note": [4, 5, 6, 8, 9, 12, 13, 14, 18, 25, 28, 29, 32, 37, 39, 40, 41], "oper": [26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 47, 49, 50], "other": 49, "parameter": 54, "perform": 50, "phase": 51, "posit": 50, "pqc": 54, "prepar": 53, "properti": 49, "pytorch": 54, "qinfo": [38, 39, 40, 41], "quairkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 46, 48, 49, 50, 53], "quantum": [45, 47, 49, 50, 51, 52, 53, 54], "qubit": [47, 51], "qudit": 47, "qutrit": 47, "random": 19, "refer": [48, 49, 50, 51, 54], "represent": [20, 51], "review": 47, "sampl": 50, "set": 21, "setup": [46, 47], "singl": 51, "single_qubit_g": 35, "special": 37, "state": [10, 11, 12, 13, 14, 22, 50, 51, 53], "state_vector": 13, "stinespr": 51, "templat": 49, "three": 51, "tool": 52, "torch": 46, "train": 54, "tutori": [42, 43, 44], "two": 51, "valid": 52, "valu": [48, 50], "variat": 54, "via": 46, "visual": [15, 36], "vqe": 54, "warn": 41, "welcom": 0}})