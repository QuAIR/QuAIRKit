Search.setIndex({"alltitles": {"Note": [[2, null], [2, null], [2, null], [3, null], [3, null], [3, null], [3, null], [4, null], [4, null], [4, null], [6, null], [7, null], [12, null], [21, null], [23, null], [26, null], [27, null], [27, null], [27, null], [27, null], [30, null], [30, null], [37, null], [37, null], [37, null], [37, null]], "Warning": [[4, null], [37, null]], "Welcome to QuAIRKit\u2019s documentation!": [[0, null]], "quairkit.ansatz": [[1, null]], "quairkit.ansatz.container": [[2, null]], "quairkit.ansatz.layer": [[3, null]], "quairkit.circuit": [[4, null]], "quairkit.core": [[5, null]], "quairkit.core.base": [[6, null]], "quairkit.core.hamiltonian": [[7, null]], "quairkit.core.state": [[8, null]], "quairkit.core.state.backend": [[9, null]], "quairkit.core.state.backend.density_matrix": [[10, null]], "quairkit.core.state.backend.state_vector": [[11, null]], "quairkit.core.state.state": [[12, null]], "quairkit.core.visual": [[13, null]], "quairkit.database": [[14, null]], "quairkit.database.hamiltonian": [[15, null]], "quairkit.database.matrix": [[16, null]], "quairkit.database.random": [[17, null]], "quairkit.database.representation": [[18, null]], "quairkit.database.set": [[19, null]], "quairkit.database.state": [[20, null]], "quairkit.loss": [[21, null]], "quairkit.loss.distance": [[22, null]], "quairkit.loss.measure": [[23, null]], "quairkit.operator": [[24, null]], "quairkit.operator.channel": [[25, null]], "quairkit.operator.channel.base": [[26, null]], "quairkit.operator.channel.common": [[27, null]], "quairkit.operator.channel.custom": [[28, null]], "quairkit.operator.gate": [[29, null]], "quairkit.operator.gate.base": [[30, null]], "quairkit.operator.gate.custom": [[31, null]], "quairkit.operator.gate.encoding": [[32, null]], "quairkit.operator.gate.multi_qubit_gate": [[33, null]], "quairkit.operator.gate.single_qubit_gate": [[34, null]], "quairkit.operator.gate.visual": [[35, null]], "quairkit.operator.special": [[36, null]], "quairkit.qinfo": [[37, null]]}, "docurls": ["index.html", "quairkit.ansatz.html", "quairkit.ansatz.container.html", "quairkit.ansatz.layer.html", "quairkit.circuit.html", "quairkit.core.html", "quairkit.core.base.html", "quairkit.core.hamiltonian.html", "quairkit.core.state.html", "quairkit.core.state.backend.html", "quairkit.core.state.backend.density_matrix.html", "quairkit.core.state.backend.state_vector.html", "quairkit.core.state.state.html", "quairkit.core.visual.html", "quairkit.database.html", "quairkit.database.hamiltonian.html", "quairkit.database.matrix.html", "quairkit.database.random.html", "quairkit.database.representation.html", "quairkit.database.set.html", "quairkit.database.state.html", "quairkit.loss.html", "quairkit.loss.distance.html", "quairkit.loss.measure.html", "quairkit.operator.html", "quairkit.operator.channel.html", "quairkit.operator.channel.base.html", "quairkit.operator.channel.common.html", "quairkit.operator.channel.custom.html", "quairkit.operator.gate.html", "quairkit.operator.gate.base.html", "quairkit.operator.gate.custom.html", "quairkit.operator.gate.encoding.html", "quairkit.operator.gate.multi_qubit_gate.html", "quairkit.operator.gate.single_qubit_gate.html", "quairkit.operator.gate.visual.html", "quairkit.operator.special.html", "quairkit.qinfo.html"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "indexentries": {"abs_norm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.abs_norm", false]], "add_systems() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.add_systems", false]], "amplitude_damping() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.amplitude_damping", false]], "amplitude_damping_kraus() (in module quairkit.database)": [[14, "quairkit.database.amplitude_damping_kraus", false]], "amplitude_damping_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.amplitude_damping_kraus", false]], "amplitude_encoding() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.amplitude_encoding", false]], "amplitudedamping (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.AmplitudeDamping", false]], "angle_encoding() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.angle_encoding", false]], "append() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.append", false]], "backend_list (in module quairkit.core.state.backend)": [[9, "quairkit.core.state.backend.BACKEND_LIST", false]], "basis_encoding() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.basis_encoding", false]], "bell_basis() (in module quairkit.database)": [[14, "quairkit.database.bell_basis", false]], "bell_basis() (in module quairkit.database.set)": [[19, "quairkit.database.set.bell_basis", false]], "bell_diagonal_state() (in module quairkit.database)": [[14, "quairkit.database.bell_diagonal_state", false]], "bell_diagonal_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.bell_diagonal_state", false]], "bell_state() (in module quairkit.database)": [[14, "quairkit.database.bell_state", false]], "bell_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.bell_state", false]], "bit_flip() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.bit_flip", false]], "bit_flip_kraus() (in module quairkit.database)": [[14, "quairkit.database.bit_flip_kraus", false]], "bit_flip_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.bit_flip_kraus", false]], "bit_phase_flip() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.bit_phase_flip", false]], "bit_phase_flip_kraus() (in module quairkit.database)": [[14, "quairkit.database.bit_phase_flip_kraus", false]], "bit_phase_flip_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.bit_phase_flip_kraus", false]], "bitflip (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.BitFlip", false]], "bitphaseflip (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.BitPhaseFlip", false]], "block_enc_herm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.block_enc_herm", false]], "ccx (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CCX", false]], "ccx() (in module quairkit.database)": [[14, "quairkit.database.ccx", false]], "ccx() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ccx", false]], "ccx() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.ccx", false]], "ccx_gate() (in module quairkit.database)": [[14, "quairkit.database.ccx_gate", false]], "ccx_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ccx_gate", false]], "channel (class in quairkit.operator.channel.base)": [[26, "quairkit.operator.channel.base.Channel", false]], "channel_repr_convert() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.channel_repr_convert", false]], "choi_channel() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.choi_channel", false]], "choi_repr (quairkit.operator.channel.base.channel property)": [[26, "quairkit.operator.channel.base.Channel.choi_repr", false]], "choirepr (class in quairkit.operator.channel.custom)": [[28, "quairkit.operator.channel.custom.ChoiRepr", false]], "circuit (class in quairkit.circuit)": [[4, "quairkit.circuit.Circuit", false]], "cnot (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CNOT", false]], "cnot() (in module quairkit.database)": [[14, "quairkit.database.cnot", false]], "cnot() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cnot", false]], "cnot() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cnot", false]], "cnot_gate() (in module quairkit.database)": [[14, "quairkit.database.cnot_gate", false]], "cnot_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cnot_gate", false]], "coefficients (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.coefficients", false]], "collapse (class in quairkit.operator.special)": [[36, "quairkit.operator.special.Collapse", false]], "completely_mixed_computational() (in module quairkit.database)": [[14, "quairkit.database.completely_mixed_computational", false]], "completely_mixed_computational() (in module quairkit.database.state)": [[20, "quairkit.database.state.completely_mixed_computational", false]], "complex_block_layer() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.complex_block_layer", false]], "complex_entangled_layer() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.complex_entangled_layer", false]], "complexblocklayer (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.ComplexBlockLayer", false]], "complexentangledlayer (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.ComplexEntangledLayer", false]], "computational_state() (in module quairkit.database)": [[14, "quairkit.database.computational_state", false]], "computational_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.computational_state", false]], "construct_h_matrix() (quairkit.core.hamiltonian.hamiltonian method)": [[7, "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix", false]], "control_oracle() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.control_oracle", false]], "controloracle (class in quairkit.operator.gate.custom)": [[31, "quairkit.operator.gate.custom.ControlOracle", false]], "controlparamoracle (class in quairkit.operator.gate.custom)": [[31, "quairkit.operator.gate.custom.ControlParamOracle", false]], "cp (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CP", false]], "cp() (in module quairkit.database)": [[14, "quairkit.database.cp", false]], "cp() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cp", false]], "cp() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cp", false]], "cp_gate() (in module quairkit.database)": [[14, "quairkit.database.cp_gate", false]], "cp_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cp_gate", false]], "create_choi_repr() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.create_choi_repr", false]], "create_matrix() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.create_matrix", false]], "crx (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CRX", false]], "crx() (in module quairkit.database)": [[14, "quairkit.database.crx", false]], "crx() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.crx", false]], "crx() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.crx", false]], "crx_gate() (in module quairkit.database)": [[14, "quairkit.database.crx_gate", false]], "crx_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.crx_gate", false]], "cry (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CRY", false]], "cry() (in module quairkit.database)": [[14, "quairkit.database.cry", false]], "cry() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cry", false]], "cry() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cry", false]], "cry_gate() (in module quairkit.database)": [[14, "quairkit.database.cry_gate", false]], "cry_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cry_gate", false]], "crz (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CRZ", false]], "crz() (in module quairkit.database)": [[14, "quairkit.database.crz", false]], "crz() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.crz", false]], "crz() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.crz", false]], "crz_gate() (in module quairkit.database)": [[14, "quairkit.database.crz_gate", false]], "crz_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.crz_gate", false]], "cswap (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CSWAP", false]], "cswap() (in module quairkit.database)": [[14, "quairkit.database.cswap", false]], "cswap() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cswap", false]], "cswap() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cswap", false]], "cswap_gate() (in module quairkit.database)": [[14, "quairkit.database.cswap_gate", false]], "cswap_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cswap_gate", false]], "cu (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CU", false]], "cu() (in module quairkit.database)": [[14, "quairkit.database.cu", false]], "cu() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cu", false]], "cu() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cu", false]], "cu_gate() (in module quairkit.database)": [[14, "quairkit.database.cu_gate", false]], "cu_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cu_gate", false]], "cx (in module quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CX", false]], "cy (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CY", false]], "cy() (in module quairkit.database)": [[14, "quairkit.database.cy", false]], "cy() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cy", false]], "cy() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cy", false]], "cy_gate() (in module quairkit.database)": [[14, "quairkit.database.cy_gate", false]], "cy_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cy_gate", false]], "cz (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.CZ", false]], "cz() (in module quairkit.database)": [[14, "quairkit.database.cz", false]], "cz() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cz", false]], "cz() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.cz", false]], "cz_gate() (in module quairkit.database)": [[14, "quairkit.database.cz_gate", false]], "cz_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.cz_gate", false]], "dagger() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.dagger", false]], "dagger() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.dagger", false]], "dagger() (quairkit.operator.gate.base.gate method)": [[30, "quairkit.operator.gate.base.Gate.dagger", false]], "decomp_1qubit() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.decomp_1qubit", false]], "decomp_ctrl_1qubit() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.decomp_ctrl_1qubit", false]], "decompose_pauli_words() (quairkit.core.hamiltonian.hamiltonian method)": [[7, "quairkit.core.hamiltonian.Hamiltonian.decompose_pauli_words", false]], "decompose_with_sites() (quairkit.core.hamiltonian.hamiltonian method)": [[7, "quairkit.core.hamiltonian.Hamiltonian.decompose_with_sites", false]], "depolarizing (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.Depolarizing", false]], "depolarizing() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.depolarizing", false]], "depolarizing_kraus() (in module quairkit.database)": [[14, "quairkit.database.depolarizing_kraus", false]], "depolarizing_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.depolarizing_kraus", false]], "depth (quairkit.ansatz.container.layer property)": [[2, "quairkit.ansatz.container.Layer.depth", false]], "depth (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.depth", false]], "diamond_norm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.diamond_norm", false]], "dim (quairkit.operator.channel.base.channel property)": [[26, "quairkit.operator.channel.base.Channel.dim", false]], "direct_sum() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.direct_sum", false]], "display_in_circuit() (quairkit.operator.gate.base.gate method)": [[30, "quairkit.operator.gate.base.Gate.display_in_circuit", false]], "display_in_circuit() (quairkit.operator.gate.base.paramgate method)": [[30, "quairkit.operator.gate.base.ParamGate.display_in_circuit", false]], "equal_dim (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.equal_dim", false]], "expecval (class in quairkit.loss)": [[21, "quairkit.loss.ExpecVal", false]], "expecval (class in quairkit.loss.measure)": [[23, "quairkit.loss.measure.ExpecVal", false]], "extend() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.extend", false]], "eye() (in module quairkit.database)": [[14, "quairkit.database.eye", false]], "eye() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.eye", false]], "eye_gate() (in module quairkit.database)": [[14, "quairkit.database.eye_gate", false]], "eye_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.eye_gate", false]], "forward() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.forward", false]], "forward() (quairkit.loss.distance.statefidelity method)": [[22, "quairkit.loss.distance.StateFidelity.forward", false]], "forward() (quairkit.loss.distance.tracedistance method)": [[22, "quairkit.loss.distance.TraceDistance.forward", false]], "forward() (quairkit.loss.expecval method)": [[21, "quairkit.loss.ExpecVal.forward", false]], "forward() (quairkit.loss.measure method)": [[21, "quairkit.loss.Measure.forward", false]], "forward() (quairkit.loss.measure.expecval method)": [[23, "quairkit.loss.measure.ExpecVal.forward", false]], "forward() (quairkit.loss.measure.measure method)": [[23, "quairkit.loss.measure.Measure.forward", false]], "forward() (quairkit.loss.statefidelity method)": [[21, "quairkit.loss.StateFidelity.forward", false]], "forward() (quairkit.loss.tracedistance method)": [[21, "quairkit.loss.TraceDistance.forward", false]], "forward() (quairkit.operator.special.collapse method)": [[36, "quairkit.operator.special.Collapse.forward", false]], "forward() (quairkit.operator.special.onewaylocc method)": [[36, "quairkit.operator.special.OneWayLOCC.forward", false]], "forward() (quairkit.operator.special.quasioperation method)": [[36, "quairkit.operator.special.QuasiOperation.forward", false]], "forward() (quairkit.operator.special.resetstate method)": [[36, "quairkit.operator.special.ResetState.forward", false]], "gate (class in quairkit.operator.gate.base)": [[30, "quairkit.operator.gate.base.Gate", false]], "gate_fidelity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.gate_fidelity", false]], "gell_mann() (in module quairkit.database)": [[14, "quairkit.database.gell_mann", false]], "gell_mann() (in module quairkit.database.set)": [[19, "quairkit.database.set.gell_mann", false]], "general_state_fidelity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.general_state_fidelity", false]], "generalized_amplitude_damping() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.generalized_amplitude_damping", false]], "generalized_amplitude_damping_kraus() (in module quairkit.database)": [[14, "quairkit.database.generalized_amplitude_damping_kraus", false]], "generalized_amplitude_damping_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.generalized_amplitude_damping_kraus", false]], "generalized_depolarizing() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.generalized_depolarizing", false]], "generalized_depolarizing_kraus() (in module quairkit.database)": [[14, "quairkit.database.generalized_depolarizing_kraus", false]], "generalized_depolarizing_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.generalized_depolarizing_kraus", false]], "generalizedamplitudedamping (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.GeneralizedAmplitudeDamping", false]], "generalizeddepolarizing (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.GeneralizedDepolarizing", false]], "get_backend() (in module quairkit.core.state.backend)": [[9, "quairkit.core.state.backend.get_backend", false]], "get_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[35, "quairkit.operator.gate.visual.get_circuit_plot_param", false]], "get_device() (in module quairkit.core.base)": [[6, "quairkit.core.base.get_device", false]], "get_dtype() (in module quairkit.core.base)": [[6, "quairkit.core.base.get_dtype", false]], "get_float_dtype() (in module quairkit.core.base)": [[6, "quairkit.core.base.get_float_dtype", false]], "get_latex_name() (quairkit.ansatz.container.layer method)": [[2, "quairkit.ansatz.container.Layer.get_latex_name", false]], "get_qasm() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.get_qasm", false]], "get_seed() (in module quairkit.core.base)": [[6, "quairkit.core.base.get_seed", false]], "ghz_state() (in module quairkit.database)": [[14, "quairkit.database.ghz_state", false]], "ghz_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.ghz_state", false]], "grad (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.grad", false]], "gradient() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.gradient", false]], "grover_matrix() (in module quairkit.database)": [[14, "quairkit.database.grover_matrix", false]], "grover_matrix() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.grover_matrix", false]], "h (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.H", false]], "h() (in module quairkit.database)": [[14, "quairkit.database.h", false]], "h() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.h", false]], "h() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.h", false]], "h_gate() (in module quairkit.database)": [[14, "quairkit.database.h_gate", false]], "h_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.h_gate", false]], "haar_density_operator() (in module quairkit.database)": [[14, "quairkit.database.haar_density_operator", false]], "haar_density_operator() (in module quairkit.database.random)": [[17, "quairkit.database.random.haar_density_operator", false]], "haar_orthogonal() (in module quairkit.database)": [[14, "quairkit.database.haar_orthogonal", false]], "haar_orthogonal() (in module quairkit.database.random)": [[17, "quairkit.database.random.haar_orthogonal", false]], "haar_state_vector() (in module quairkit.database)": [[14, "quairkit.database.haar_state_vector", false]], "haar_state_vector() (in module quairkit.database.random)": [[17, "quairkit.database.random.haar_state_vector", false]], "haar_unitary() (in module quairkit.database)": [[14, "quairkit.database.haar_unitary", false]], "haar_unitary() (in module quairkit.database.random)": [[17, "quairkit.database.random.haar_unitary", false]], "hamiltonian (class in quairkit.core.hamiltonian)": [[7, "quairkit.core.hamiltonian.Hamiltonian", false]], "heisenberg_hamiltonian() (in module quairkit.database)": [[14, "quairkit.database.heisenberg_hamiltonian", false]], "heisenberg_hamiltonian() (in module quairkit.database.hamiltonian)": [[15, "quairkit.database.hamiltonian.heisenberg_hamiltonian", false]], "heisenberg_weyl() (in module quairkit.database)": [[14, "quairkit.database.heisenberg_weyl", false]], "heisenberg_weyl() (in module quairkit.database.set)": [[19, "quairkit.database.set.heisenberg_weyl", false]], "herm_transform() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.herm_transform", false]], "hessian() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.hessian", false]], "info (quairkit.operator.channel.base.channel property)": [[26, "quairkit.operator.channel.base.Channel.info", false]], "info (quairkit.operator.gate.base.gate property)": [[30, "quairkit.operator.gate.base.Gate.info", false]], "info (quairkit.operator.gate.base.paramgate property)": [[30, "quairkit.operator.gate.base.ParamGate.info", false]], "info (quairkit.operator.gate.custom.controloracle property)": [[31, "quairkit.operator.gate.custom.ControlOracle.info", false]], "info (quairkit.operator.gate.custom.oracle property)": [[31, "quairkit.operator.gate.custom.Oracle.info", false]], "info (quairkit.operator.gate.custom.permutation property)": [[31, "quairkit.operator.gate.custom.Permutation.info", false]], "info (quairkit.operator.special.collapse property)": [[36, "quairkit.operator.special.Collapse.info", false]], "info (quairkit.operator.special.onewaylocc property)": [[36, "quairkit.operator.special.OneWayLOCC.info", false]], "info (quairkit.operator.special.quasioperation property)": [[36, "quairkit.operator.special.QuasiOperation.info", false]], "info (quairkit.operator.special.resetstate property)": [[36, "quairkit.operator.special.ResetState.info", false]], "iqp_encoding() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.iqp_encoding", false]], "is_choi() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_choi", false]], "is_density_matrix() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_density_matrix", false]], "is_hermitian() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_hermitian", false]], "is_linear() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_linear", false]], "is_positive() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_positive", false]], "is_povm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_povm", false]], "is_ppt() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_ppt", false]], "is_projector() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_projector", false]], "is_pvm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_pvm", false]], "is_state_vector() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_state_vector", false]], "is_unitary() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.is_unitary", false]], "ising_hamiltonian() (in module quairkit.database)": [[14, "quairkit.database.ising_hamiltonian", false]], "ising_hamiltonian() (in module quairkit.database.hamiltonian)": [[15, "quairkit.database.hamiltonian.ising_hamiltonian", false]], "isotropic_state() (in module quairkit.database)": [[14, "quairkit.database.isotropic_state", false]], "isotropic_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.isotropic_state", false]], "kraus_channel() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.kraus_channel", false]], "kraus_repr (quairkit.operator.channel.base.channel property)": [[26, "quairkit.operator.channel.base.Channel.kraus_repr", false]], "krausrepr (class in quairkit.operator.channel.custom)": [[28, "quairkit.operator.channel.custom.KrausRepr", false]], "kron_power() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.kron_power", false]], "layer (class in quairkit.ansatz.container)": [[2, "quairkit.ansatz.container.Layer", false]], "linear_entangled_layer() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.linear_entangled_layer", false]], "linearentangledlayer (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.LinearEntangledLayer", false]], "link() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.link", false]], "locc() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.locc", false]], "logarithmic_negativity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.logarithmic_negativity", false]], "logm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.logm", false]], "mana() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.mana", false]], "matrix (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.matrix", false]], "matrix (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.matrix", false]], "matrix (quairkit.operator.gate.base.gate property)": [[30, "quairkit.operator.gate.base.Gate.matrix", false]], "measure (class in quairkit.loss)": [[21, "quairkit.loss.Measure", false]], "measure (class in quairkit.loss.measure)": [[23, "quairkit.loss.measure.Measure", false]], "measure() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.measure", false]], "module": [[1, "module-quairkit.ansatz", false], [2, "module-quairkit.ansatz.container", false], [3, "module-quairkit.ansatz.layer", false], [4, "module-quairkit.circuit", false], [5, "module-quairkit.core", false], [6, "module-quairkit.core.base", false], [7, "module-quairkit.core.hamiltonian", false], [8, "module-quairkit.core.state", false], [9, "module-quairkit.core.state.backend", false], [12, "module-quairkit.core.state.state", false], [14, "module-quairkit.database", false], [15, "module-quairkit.database.hamiltonian", false], [16, "module-quairkit.database.matrix", false], [17, "module-quairkit.database.random", false], [18, "module-quairkit.database.representation", false], [19, "module-quairkit.database.set", false], [20, "module-quairkit.database.state", false], [21, "module-quairkit.loss", false], [22, "module-quairkit.loss.distance", false], [23, "module-quairkit.loss.measure", false], [24, "module-quairkit.operator", false], [25, "module-quairkit.operator.channel", false], [26, "module-quairkit.operator.channel.base", false], [27, "module-quairkit.operator.channel.common", false], [28, "module-quairkit.operator.channel.custom", false], [29, "module-quairkit.operator.gate", false], [30, "module-quairkit.operator.gate.base", false], [31, "module-quairkit.operator.gate.custom", false], [33, "module-quairkit.operator.gate.multi_qubit_gate", false], [34, "module-quairkit.operator.gate.single_qubit_gate", false], [35, "module-quairkit.operator.gate.visual", false], [36, "module-quairkit.operator.special", false], [37, "module-quairkit.qinfo", false]], "ms (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.MS", false]], "ms() (in module quairkit.database)": [[14, "quairkit.database.ms", false]], "ms() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ms", false]], "ms() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.ms", false]], "ms_gate() (in module quairkit.database)": [[14, "quairkit.database.ms_gate", false]], "ms_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ms_gate", false]], "mutual_information() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.mutual_information", false]], "n_qubits (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.n_qubits", false]], "n_terms (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.n_terms", false]], "negativity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.negativity", false]], "nkron() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.NKron", false], [37, "quairkit.qinfo.nkron", false]], "num_qubits (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.num_qubits", false]], "num_qutrits (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.num_qutrits", false]], "num_systems (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.num_systems", false]], "of() (in module quairkit.database)": [[14, "quairkit.database.Of", false]], "of() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.Of", false]], "of_gate() (in module quairkit.database)": [[14, "quairkit.database.Of_gate", false]], "of_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.Of_gate", false]], "one_state() (in module quairkit.database)": [[14, "quairkit.database.one_state", false]], "one_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.one_state", false]], "onewaylocc (class in quairkit.operator.special)": [[36, "quairkit.operator.special.OneWayLOCC", false]], "operator_history (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.operator_history", false]], "operatorlist (class in quairkit.ansatz.container)": [[2, "quairkit.ansatz.container.OperatorList", false]], "operators() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.operators", false]], "oracle (class in quairkit.operator.gate.custom)": [[31, "quairkit.operator.gate.custom.Oracle", false]], "oracle() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.oracle", false]], "p (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.P", false]], "p() (in module quairkit.database)": [[14, "quairkit.database.p", false]], "p() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.p", false]], "p() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.p", false]], "p_gate() (in module quairkit.database)": [[14, "quairkit.database.p_gate", false]], "p_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.p_gate", false]], "p_norm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.p_norm", false]], "param (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.param", false]], "param_locc() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.param_locc", false]], "param_oracle() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.param_oracle", false]], "param_quasi() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.param_quasi", false]], "paramgate (class in quairkit.operator.gate.base)": [[30, "quairkit.operator.gate.base.ParamGate", false]], "paramoracle (class in quairkit.operator.gate.custom)": [[31, "quairkit.operator.gate.custom.ParamOracle", false]], "partial_trace() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.partial_trace", false]], "partial_trace_discontiguous() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.partial_trace_discontiguous", false]], "partial_transpose() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.partial_transpose", false]], "pauli_basis() (in module quairkit.database)": [[14, "quairkit.database.pauli_basis", false]], "pauli_basis() (in module quairkit.database.set)": [[19, "quairkit.database.set.pauli_basis", false]], "pauli_channel() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.pauli_channel", false]], "pauli_decomposition() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.pauli_decomposition", false]], "pauli_group() (in module quairkit.database)": [[14, "quairkit.database.pauli_group", false]], "pauli_group() (in module quairkit.database.set)": [[19, "quairkit.database.set.pauli_group", false]], "pauli_kraus() (in module quairkit.database)": [[14, "quairkit.database.pauli_kraus", false]], "pauli_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.pauli_kraus", false]], "pauli_str (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.pauli_str", false]], "pauli_str_basis() (in module quairkit.database)": [[14, "quairkit.database.pauli_str_basis", false]], "pauli_str_basis() (in module quairkit.database.set)": [[19, "quairkit.database.set.pauli_str_basis", false]], "pauli_str_convertor() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.pauli_str_convertor", false]], "pauli_str_povm() (in module quairkit.database)": [[14, "quairkit.database.pauli_str_povm", false]], "pauli_str_povm() (in module quairkit.database.set)": [[19, "quairkit.database.set.pauli_str_povm", false]], "pauli_words (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.pauli_words", false]], "pauli_words_matrix (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_matrix", false]], "pauli_words_r (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_r", false]], "paulichannel (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.PauliChannel", false]], "permutation (class in quairkit.operator.gate.custom)": [[31, "quairkit.operator.gate.custom.Permutation", false]], "permutation_matrix() (in module quairkit.database)": [[14, "quairkit.database.permutation_matrix", false]], "permutation_matrix() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.permutation_matrix", false]], "permute() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.permute", false]], "permute_systems() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.permute_systems", false]], "phase() (in module quairkit.database)": [[14, "quairkit.database.phase", false]], "phase() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.phase", false]], "phase_damping() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.phase_damping", false]], "phase_damping_kraus() (in module quairkit.database)": [[14, "quairkit.database.phase_damping_kraus", false]], "phase_damping_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.phase_damping_kraus", false]], "phase_flip() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.phase_flip", false]], "phase_flip_kraus() (in module quairkit.database)": [[14, "quairkit.database.phase_flip_kraus", false]], "phase_flip_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.phase_flip_kraus", false]], "phase_gate() (in module quairkit.database)": [[14, "quairkit.database.phase_gate", false]], "phase_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.phase_gate", false]], "phase_space_point() (in module quairkit.database)": [[14, "quairkit.database.phase_space_point", false]], "phase_space_point() (in module quairkit.database.set)": [[19, "quairkit.database.set.phase_space_point", false]], "phasedamping (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.PhaseDamping", false]], "phaseflip (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.PhaseFlip", false]], "plot() (quairkit.ansatz.container.layer method)": [[2, "quairkit.ansatz.container.Layer.plot", false]], "plot() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.plot", false]], "prob_sample() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.prob_sample", false]], "probability (quairkit.operator.special.quasioperation property)": [[36, "quairkit.operator.special.QuasiOperation.probability", false]], "purity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.purity", false]], "qasm (quairkit.circuit.circuit property)": [[4, "quairkit.circuit.Circuit.qasm", false]], "qasm2 (quairkit.circuit.circuit property)": [[4, "quairkit.circuit.Circuit.qasm2", false]], "qft_basis() (in module quairkit.database)": [[14, "quairkit.database.qft_basis", false]], "qft_basis() (in module quairkit.database.set)": [[19, "quairkit.database.set.qft_basis", false]], "qft_matrix() (in module quairkit.database)": [[14, "quairkit.database.qft_matrix", false]], "qft_matrix() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.qft_matrix", false]], "quairkit.ansatz": [[1, "module-quairkit.ansatz", false]], "quairkit.ansatz.container": [[2, "module-quairkit.ansatz.container", false]], "quairkit.ansatz.layer": [[3, "module-quairkit.ansatz.layer", false]], "quairkit.circuit": [[4, "module-quairkit.circuit", false]], "quairkit.core": [[5, "module-quairkit.core", false]], "quairkit.core.base": [[6, "module-quairkit.core.base", false]], "quairkit.core.hamiltonian": [[7, "module-quairkit.core.hamiltonian", false]], "quairkit.core.state": [[8, "module-quairkit.core.state", false]], "quairkit.core.state.backend": [[9, "module-quairkit.core.state.backend", false]], "quairkit.core.state.state": [[12, "module-quairkit.core.state.state", false]], "quairkit.database": [[14, "module-quairkit.database", false]], "quairkit.database.hamiltonian": [[15, "module-quairkit.database.hamiltonian", false]], "quairkit.database.matrix": [[16, "module-quairkit.database.matrix", false]], "quairkit.database.random": [[17, "module-quairkit.database.random", false]], "quairkit.database.representation": [[18, "module-quairkit.database.representation", false]], "quairkit.database.set": [[19, "module-quairkit.database.set", false]], "quairkit.database.state": [[20, "module-quairkit.database.state", false]], "quairkit.loss": [[21, "module-quairkit.loss", false]], "quairkit.loss.distance": [[22, "module-quairkit.loss.distance", false]], "quairkit.loss.measure": [[23, "module-quairkit.loss.measure", false]], "quairkit.operator": [[24, "module-quairkit.operator", false]], "quairkit.operator.channel": [[25, "module-quairkit.operator.channel", false]], "quairkit.operator.channel.base": [[26, "module-quairkit.operator.channel.base", false]], "quairkit.operator.channel.common": [[27, "module-quairkit.operator.channel.common", false]], "quairkit.operator.channel.custom": [[28, "module-quairkit.operator.channel.custom", false]], "quairkit.operator.gate": [[29, "module-quairkit.operator.gate", false]], "quairkit.operator.gate.base": [[30, "module-quairkit.operator.gate.base", false]], "quairkit.operator.gate.custom": [[31, "module-quairkit.operator.gate.custom", false]], "quairkit.operator.gate.multi_qubit_gate": [[33, "module-quairkit.operator.gate.multi_qubit_gate", false]], "quairkit.operator.gate.single_qubit_gate": [[34, "module-quairkit.operator.gate.single_qubit_gate", false]], "quairkit.operator.gate.visual": [[35, "module-quairkit.operator.gate.visual", false]], "quairkit.operator.special": [[36, "module-quairkit.operator.special", false]], "quairkit.qinfo": [[37, "module-quairkit.qinfo", false]], "quasi() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.quasi", false]], "quasioperation (class in quairkit.operator.special)": [[36, "quairkit.operator.special.QuasiOperation", false]], "r_state() (in module quairkit.database)": [[14, "quairkit.database.r_state", false]], "r_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.r_state", false]], "random_channel() (in module quairkit.database)": [[14, "quairkit.database.random_channel", false]], "random_channel() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_channel", false]], "random_clifford() (in module quairkit.database)": [[14, "quairkit.database.random_clifford", false]], "random_clifford() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_clifford", false]], "random_density_matrix() (in module quairkit.database)": [[14, "quairkit.database.random_density_matrix", false]], "random_density_matrix() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_density_matrix", false]], "random_hamiltonian_generator() (in module quairkit.database)": [[14, "quairkit.database.random_hamiltonian_generator", false]], "random_hamiltonian_generator() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_hamiltonian_generator", false]], "random_hermitian() (in module quairkit.database)": [[14, "quairkit.database.random_hermitian", false]], "random_hermitian() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_hermitian", false]], "random_orthogonal_projection() (in module quairkit.database)": [[14, "quairkit.database.random_orthogonal_projection", false]], "random_orthogonal_projection() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_orthogonal_projection", false]], "random_pauli_str_generator() (in module quairkit.database)": [[14, "quairkit.database.random_pauli_str_generator", false]], "random_pauli_str_generator() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_pauli_str_generator", false]], "random_projector() (in module quairkit.database)": [[14, "quairkit.database.random_projector", false]], "random_projector() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_projector", false]], "random_state() (in module quairkit.database)": [[14, "quairkit.database.random_state", false]], "random_state() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_state", false]], "random_unitary() (in module quairkit.database)": [[14, "quairkit.database.random_unitary", false]], "random_unitary() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_unitary", false]], "random_unitary_hermitian() (in module quairkit.database)": [[14, "quairkit.database.random_unitary_hermitian", false]], "random_unitary_hermitian() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_unitary_hermitian", false]], "random_unitary_with_hermitian_block() (in module quairkit.database)": [[14, "quairkit.database.random_unitary_with_hermitian_block", false]], "random_unitary_with_hermitian_block() (in module quairkit.database.random)": [[17, "quairkit.database.random.random_unitary_with_hermitian_block", false]], "randomize_param() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.randomize_param", false]], "real_block_layer() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.real_block_layer", false]], "real_entangled_layer() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.real_entangled_layer", false]], "realblocklayer (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.RealBlockLayer", false]], "realentangledlayer (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.RealEntangledLayer", false]], "register_idx() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.register_idx", false]], "relative_entropy() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.relative_entropy", false]], "replacement_choi() (in module quairkit.database)": [[14, "quairkit.database.replacement_choi", false]], "replacement_choi() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.replacement_choi", false]], "replacementchannel (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.ReplacementChannel", false]], "reset() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.reset", false]], "reset_channel() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.reset_channel", false]], "reset_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[35, "quairkit.operator.gate.visual.reset_circuit_plot_param", false]], "reset_kraus() (in module quairkit.database)": [[14, "quairkit.database.reset_kraus", false]], "reset_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.reset_kraus", false]], "resetchannel (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.ResetChannel", false]], "resetstate (class in quairkit.operator.special)": [[36, "quairkit.operator.special.ResetState", false]], "rx (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.RX", false]], "rx() (in module quairkit.database)": [[14, "quairkit.database.rx", false]], "rx() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rx", false]], "rx() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.rx", false]], "rx_gate() (in module quairkit.database)": [[14, "quairkit.database.rx_gate", false]], "rx_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rx_gate", false]], "rxx (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.RXX", false]], "rxx() (in module quairkit.database)": [[14, "quairkit.database.rxx", false]], "rxx() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rxx", false]], "rxx() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.rxx", false]], "rxx_gate() (in module quairkit.database)": [[14, "quairkit.database.rxx_gate", false]], "rxx_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rxx_gate", false]], "ry (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.RY", false]], "ry() (in module quairkit.database)": [[14, "quairkit.database.ry", false]], "ry() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ry", false]], "ry() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.ry", false]], "ry_gate() (in module quairkit.database)": [[14, "quairkit.database.ry_gate", false]], "ry_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ry_gate", false]], "ryy (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.RYY", false]], "ryy() (in module quairkit.database)": [[14, "quairkit.database.ryy", false]], "ryy() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ryy", false]], "ryy() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.ryy", false]], "ryy_gate() (in module quairkit.database)": [[14, "quairkit.database.ryy_gate", false]], "ryy_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.ryy_gate", false]], "rz (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.RZ", false]], "rz() (in module quairkit.database)": [[14, "quairkit.database.rz", false]], "rz() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rz", false]], "rz() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.rz", false]], "rz_gate() (in module quairkit.database)": [[14, "quairkit.database.rz_gate", false]], "rz_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rz_gate", false]], "rzz (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.RZZ", false]], "rzz() (in module quairkit.database)": [[14, "quairkit.database.rzz", false]], "rzz() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rzz", false]], "rzz() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.rzz", false]], "rzz_gate() (in module quairkit.database)": [[14, "quairkit.database.rzz_gate", false]], "rzz_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.rzz_gate", false]], "s (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.S", false]], "s() (in module quairkit.database)": [[14, "quairkit.database.s", false]], "s() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.s", false]], "s() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.s", false]], "s_gate() (in module quairkit.database)": [[14, "quairkit.database.s_gate", false]], "s_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.s_gate", false]], "s_state() (in module quairkit.database)": [[14, "quairkit.database.s_state", false]], "s_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.s_state", false]], "scale_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[35, "quairkit.operator.gate.visual.scale_circuit_plot_param", false]], "schmidt_decompose() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.schmidt_decompose", false]], "sdg (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.Sdg", false]], "sdg() (in module quairkit.database)": [[14, "quairkit.database.sdg", false]], "sdg() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.sdg", false]], "sdg() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.sdg", false]], "sdg_gate() (in module quairkit.database)": [[14, "quairkit.database.sdg_gate", false]], "sdg_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.sdg_gate", false]], "set_backend() (in module quairkit.core.state.backend)": [[9, "quairkit.core.state.backend.set_backend", false]], "set_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[35, "quairkit.operator.gate.visual.set_circuit_plot_param", false]], "set_device() (in module quairkit.core.base)": [[6, "quairkit.core.base.set_device", false]], "set_dtype() (in module quairkit.core.base)": [[6, "quairkit.core.base.set_dtype", false]], "set_seed() (in module quairkit.core.base)": [[6, "quairkit.core.base.set_seed", false]], "shift() (in module quairkit.database)": [[14, "quairkit.database.shift", false]], "shift() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.shift", false]], "shift_gate() (in module quairkit.database)": [[14, "quairkit.database.shift_gate", false]], "shift_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.shift_gate", false]], "sigx_p (quairkit.core.hamiltonian.spinops property)": [[7, "quairkit.core.hamiltonian.SpinOps.sigx_p", false]], "sigy_p (quairkit.core.hamiltonian.spinops property)": [[7, "quairkit.core.hamiltonian.SpinOps.sigy_p", false]], "sigz_p (quairkit.core.hamiltonian.spinops property)": [[7, "quairkit.core.hamiltonian.SpinOps.sigz_p", false]], "sites (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.sites", false]], "sort() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.sort", false]], "spinops (class in quairkit.core.hamiltonian)": [[7, "quairkit.core.hamiltonian.SpinOps", false]], "sqrtm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.sqrtm", false]], "stab_nullity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.stab_nullity", false]], "stab_renyi() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.stab_renyi", false]], "state_fidelity() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.state_fidelity", false]], "statefidelity (class in quairkit.loss)": [[21, "quairkit.loss.StateFidelity", false]], "statefidelity (class in quairkit.loss.distance)": [[22, "quairkit.loss.distance.StateFidelity", false]], "std_basis() (in module quairkit.database)": [[14, "quairkit.database.std_basis", false]], "std_basis() (in module quairkit.database.set)": [[19, "quairkit.database.set.std_basis", false]], "stinespring_channel() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.stinespring_channel", false]], "stinespring_repr (quairkit.operator.channel.base.channel property)": [[26, "quairkit.operator.channel.base.Channel.stinespring_repr", false]], "stinespringrepr (class in quairkit.operator.channel.custom)": [[28, "quairkit.operator.channel.custom.StinespringRepr", false]], "swap (class in quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.SWAP", false]], "swap() (in module quairkit.database)": [[14, "quairkit.database.swap", false]], "swap() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.swap", false]], "swap() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.swap", false]], "swap_gate() (in module quairkit.database)": [[14, "quairkit.database.swap_gate", false]], "swap_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.swap_gate", false]], "system_dim (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.system_dim", false]], "system_idx (quairkit.ansatz.container.operatorlist property)": [[2, "quairkit.ansatz.container.OperatorList.system_idx", false]], "system_idx (quairkit.operator.special.onewaylocc property)": [[36, "quairkit.operator.special.OneWayLOCC.system_idx", false]], "system_idx (quairkit.operator.special.quasioperation property)": [[36, "quairkit.operator.special.QuasiOperation.system_idx", false]], "t (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.T", false]], "t() (in module quairkit.database)": [[14, "quairkit.database.t", false]], "t() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.t", false]], "t() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.t", false]], "t_gate() (in module quairkit.database)": [[14, "quairkit.database.t_gate", false]], "t_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.t_gate", false]], "tdg (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.Tdg", false]], "tdg() (in module quairkit.database)": [[14, "quairkit.database.tdg", false]], "tdg() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.tdg", false]], "tdg() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.tdg", false]], "tdg_gate() (in module quairkit.database)": [[14, "quairkit.database.tdg_gate", false]], "tdg_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.tdg_gate", false]], "tensor_state() (in module quairkit.core.state.state)": [[12, "quairkit.core.state.state.tensor_state", false]], "terms (quairkit.core.hamiltonian.hamiltonian property)": [[7, "quairkit.core.hamiltonian.Hamiltonian.terms", false]], "thermal_relaxation() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.thermal_relaxation", false]], "thermal_relaxation_kraus() (in module quairkit.database)": [[14, "quairkit.database.thermal_relaxation_kraus", false]], "thermal_relaxation_kraus() (in module quairkit.database.representation)": [[18, "quairkit.database.representation.thermal_relaxation_kraus", false]], "thermalrelaxation (class in quairkit.operator.channel.common)": [[27, "quairkit.operator.channel.common.ThermalRelaxation", false]], "to_latex() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.to_latex", false]], "to_state() (in module quairkit.core.state.state)": [[12, "quairkit.core.state.state.to_state", false]], "toffoli (in module quairkit.operator.gate.multi_qubit_gate)": [[33, "quairkit.operator.gate.multi_qubit_gate.Toffoli", false]], "toffoli() (in module quairkit.database)": [[14, "quairkit.database.toffoli", false]], "toffoli() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.toffoli", false]], "toffoli_gate() (in module quairkit.database)": [[14, "quairkit.database.toffoli_gate", false]], "toffoli_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.toffoli_gate", false]], "trace() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.trace", false]], "trace_distance() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.trace_distance", false]], "trace_norm() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.trace_norm", false]], "tracedistance (class in quairkit.loss)": [[21, "quairkit.loss.TraceDistance", false]], "tracedistance (class in quairkit.loss.distance)": [[22, "quairkit.loss.distance.TraceDistance", false]], "transfer_static() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.transfer_static", false]], "trotter() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.trotter", false]], "u3 (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.U3", false]], "u3() (in module quairkit.database)": [[14, "quairkit.database.u3", false]], "u3() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.u3", false]], "u3() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.u3", false]], "u3_gate() (in module quairkit.database)": [[14, "quairkit.database.u3_gate", false]], "u3_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.u3_gate", false]], "uf() (in module quairkit.database)": [[14, "quairkit.database.Uf", false]], "uf() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.Uf", false]], "uf_gate() (in module quairkit.database)": [[14, "quairkit.database.Uf_gate", false]], "uf_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.Uf_gate", false]], "unitary_matrix() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.unitary_matrix", false]], "universal2 (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.Universal2", false]], "universal2() (in module quairkit.database)": [[14, "quairkit.database.universal2", false]], "universal2() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.universal2", false]], "universal2_gate() (in module quairkit.database)": [[14, "quairkit.database.universal2_gate", false]], "universal2_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.universal2_gate", false]], "universal3 (class in quairkit.ansatz.layer)": [[3, "quairkit.ansatz.layer.Universal3", false]], "universal3() (in module quairkit.database)": [[14, "quairkit.database.universal3", false]], "universal3() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.universal3", false]], "universal3_gate() (in module quairkit.database)": [[14, "quairkit.database.universal3_gate", false]], "universal3_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.universal3_gate", false]], "universal_qudit() (in module quairkit.database)": [[14, "quairkit.database.universal_qudit", false]], "universal_qudit() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.universal_qudit", false]], "universal_qudits() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.universal_qudits", false]], "universal_three_qubits() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.universal_three_qubits", false]], "universal_two_qubits() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.universal_two_qubits", false]], "universalqudits (class in quairkit.operator.gate.custom)": [[31, "quairkit.operator.gate.custom.UniversalQudits", false]], "update_param() (quairkit.ansatz.container.operatorlist method)": [[2, "quairkit.ansatz.container.OperatorList.update_param", false]], "von_neumann_entropy() (in module quairkit.qinfo)": [[37, "quairkit.qinfo.von_neumann_entropy", false]], "w_state() (in module quairkit.database)": [[14, "quairkit.database.w_state", false]], "w_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.w_state", false]], "x (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.X", false]], "x() (in module quairkit.database)": [[14, "quairkit.database.x", false]], "x() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.x", false]], "x() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.x", false]], "x_gate() (in module quairkit.database)": [[14, "quairkit.database.x_gate", false]], "x_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.x_gate", false]], "xy_hamiltonian() (in module quairkit.database)": [[14, "quairkit.database.xy_hamiltonian", false]], "xy_hamiltonian() (in module quairkit.database.hamiltonian)": [[15, "quairkit.database.hamiltonian.xy_hamiltonian", false]], "y (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.Y", false]], "y() (in module quairkit.database)": [[14, "quairkit.database.y", false]], "y() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.y", false]], "y() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.y", false]], "y_gate() (in module quairkit.database)": [[14, "quairkit.database.y_gate", false]], "y_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.y_gate", false]], "z (class in quairkit.operator.gate.single_qubit_gate)": [[34, "quairkit.operator.gate.single_qubit_gate.Z", false]], "z() (in module quairkit.database)": [[14, "quairkit.database.z", false]], "z() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.z", false]], "z() (quairkit.circuit.circuit method)": [[4, "quairkit.circuit.Circuit.z", false]], "z_gate() (in module quairkit.database)": [[14, "quairkit.database.z_gate", false]], "z_gate() (in module quairkit.database.matrix)": [[16, "quairkit.database.matrix.z_gate", false]], "zero_state() (in module quairkit.database)": [[14, "quairkit.database.zero_state", false]], "zero_state() (in module quairkit.database.state)": [[20, "quairkit.database.state.zero_state", false]]}, "objects": {"quairkit": [[1, 0, 0, 1, "ansatz", ""], [4, 0, 0, 1, "circuit", ""], [5, 0, 0, 1, "core", ""], [14, 0, 0, 1, "database", ""], [21, 0, 0, 1, "loss", ""], [24, 0, 0, 1, "operator", ""], [37, 0, 0, 1, "qinfo", ""]], "quairkit.ansatz": [[2, 0, 0, 1, "container", ""], [3, 0, 0, 1, "layer", ""]], "quairkit.ansatz.container": [[2, 1, 1, 0, "Layer", "Base class for built-in trainable quantum circuit ansatz."], [2, 1, 1, 0, "OperatorList", "Sequential container for QuAIRKit operators."]], "quairkit.ansatz.container.Layer": [[2, 3, 1, 0, "depth", "Depth of the layer."], [2, 4, 1, 0, "get_latex_name", "Return the LaTeX name of the layer."], [2, 4, 1, 0, "plot", "Plot the circuit layer using LaTeX"]], "quairkit.ansatz.container.Layer.__init__": [[2, 2, 2, 0, "depth", "Depth of the layer."], [2, 2, 2, 0, "name", "Name of the layer."], [2, 2, 2, 0, "physical_idx", "Physical indices of the systems on which this layer is applied."], [2, 2, 2, 0, "system_dim", "Dimension of the systems."]], "quairkit.ansatz.container.Layer.get_latex_name": [[2, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.ansatz.container.Layer.plot": [[2, 2, 2, 0, "decimal", "number of decimal places to display."], [2, 2, 2, 0, "dpi", "dots per inches of plot image."], [2, 2, 2, 0, "print_code", "whether print the LaTeX code of the circuit, default to True."], [2, 2, 2, 0, "show_plot", "whether show the plotted circuit, default to True."], [2, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.ansatz.container.OperatorList": [[2, 4, 1, 0, "add_systems", "Add new systems to the list."], [2, 4, 1, 0, "append", "Appends an operator or an operator sub-list to the end."], [2, 4, 1, 0, "dagger", "Reverse the entire operator list."], [2, 3, 1, 0, "depth", "Depth of gate sequences."], [2, 3, 1, 0, "equal_dim", "Whether the systems in this circuit have the same dimension."], [2, 4, 1, 0, "extend", "Extend the list with another sequential"], [2, 4, 1, 0, "forward", "Passing a physical input state."], [2, 4, 1, 0, "get_qasm", "Get the OpenQASM-like string representation of the circuit."], [2, 3, 1, 0, "grad", "Gradients with respect to the flattened parameters."], [2, 3, 1, 0, "matrix", "Get the unitary matrix form of the operator list."], [2, 3, 1, 0, "num_qubits", "Number of qubits in this circuit."], [2, 3, 1, 0, "num_qutrits", "Number of qutrits in this circuit."], [2, 3, 1, 0, "num_systems", "Number of logical systems."], [2, 3, 1, 0, "operator_history", "Return the operator history of this Sequential"], [2, 4, 1, 0, "operators", "Yield all operators in this list."], [2, 3, 1, 0, "param", "Flattened parameters in this list."], [2, 4, 1, 0, "randomize_param", "Randomize parameters of the list based on the initializer. Current we only support Uniform and Normal initializer."], [2, 4, 1, 0, "register_idx", "Update sequential according to input operator index information, or report error."], [2, 4, 1, 0, "sort", "Sort the systems in the circuit by their physical indices."], [2, 3, 1, 0, "system_dim", "Dimension of systems in this circuit."], [2, 3, 1, 0, "system_idx", "List of physical indices of systems."], [2, 4, 1, 0, "transfer_static", "set stop_gradient of all parameters of the list as True"], [2, 4, 1, 0, "unitary_matrix", "Get the unitary matrix form of the circuit."], [2, 4, 1, 0, "update_param", "Replace parameters of all/one layer(s) by theta."]], "quairkit.ansatz.container.OperatorList.__init__": [[2, 2, 2, 0, "num_systems", "number of systems in the operator list."], [2, 2, 2, 0, "physical_idx", "physical indices of systems."], [2, 2, 2, 0, "system_dim", "dimension of systems of this list."]], "quairkit.ansatz.container.OperatorList.add_systems": [[2, 2, 2, 0, "new_physical_idx", "physical indices of new systems."], [2, 2, 2, 0, "new_system_dim", "dimension of new systems."], [2, 2, 2, 0, "num_new_systems", "number of new systems to be added."]], "quairkit.ansatz.container.OperatorList.append": [[2, 2, 2, 0, "op", "module to append"]], "quairkit.ansatz.container.OperatorList.extend": [[2, 2, 2, 0, "sequential", "a sequential of operators to be extended"]], "quairkit.ansatz.container.OperatorList.forward": [[2, 2, 2, 0, "state", "initial state."]], "quairkit.ansatz.container.OperatorList.get_qasm": [[2, 2, 2, 0, "transpile", "whether to transpile the circuit to OpenQASM 2.0 format."]], "quairkit.ansatz.container.OperatorList.randomize_param": [[2, 2, 2, 0, "arg0", "first argument of the initializer."], [2, 2, 2, 0, "arg1", "first argument of the initializer."], [2, 2, 2, 0, "method", "The sampling method."]], "quairkit.ansatz.container.OperatorList.register_idx": [[2, 2, 2, 0, "num_acted_system", "number of systems that one operator acts on."], [2, 2, 2, 0, "operator_idx", "input system indices of the operator."]], "quairkit.ansatz.container.OperatorList.update_param": [[2, 2, 2, 0, "idx", "Index of replacement."], [2, 2, 2, 0, "theta", "New parameters"]], "quairkit.ansatz.layer": [[3, 1, 1, 0, "ComplexBlockLayer", "Weakly entangled layers consisting of CNOT gates surrounded by U3 gates"], [3, 1, 1, 0, "ComplexEntangledLayer", "Strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [3, 1, 1, 0, "LinearEntangledLayer", "Linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [3, 1, 1, 0, "RealBlockLayer", "Weakly entangled layers consisting of CNOT gates surrounded by RY gates"], [3, 1, 1, 0, "RealEntangledLayer", "Strongly entangled layers consisting of Ry gates and CNOT gates."], [3, 1, 1, 0, "Universal2", "A circuit layer representing universal two-qubit gates. One of such a layer requires 15 parameters."], [3, 1, 1, 0, "Universal3", "A circuit layer representing universal three-qubit gates. One of such a layer requires 81 parameters."]], "quairkit.ansatz.layer.ComplexBlockLayer.__init__": [[3, 2, 2, 0, "depth", "Number of layers."], [3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.ComplexEntangledLayer.__init__": [[3, 2, 2, 0, "depth", "Number of layers."], [3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.LinearEntangledLayer.__init__": [[3, 2, 2, 0, "depth", "Number of layers."], [3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.RealBlockLayer.__init__": [[3, 2, 2, 0, "depth", "Number of layers."], [3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.RealEntangledLayer.__init__": [[3, 2, 2, 0, "depth", "Number of layers."], [3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.Universal2.__init__": [[3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.Universal3.__init__": [[3, 2, 2, 0, "param", "Initial parameters for the layer."], [3, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.circuit": [[4, 1, 1, 0, "Circuit", "Class for quantum circuit."]], "quairkit.circuit.Circuit": [[4, 4, 1, 0, "amplitude_damping", "Add amplitude damping channels."], [4, 4, 1, 0, "amplitude_encoding", "Prepares an amplitude encoding layer that performs |0\\rangle^{\\otimes n} \\to \\sum_{i=0}^{d-1} x_i |i\\rangle"], [4, 4, 1, 0, "angle_encoding", "Prepares an angle encoding layer that encode angles via rotation gates."], [4, 4, 1, 0, "basis_encoding", "Prepares a basis encoding layer that performs |0\\rangle^{\\otimes n} \\to |x\\rangle"], [4, 4, 1, 0, "bit_flip", "Add bit flip channels."], [4, 4, 1, 0, "bit_phase_flip", "Add bit phase flip channels."], [4, 4, 1, 0, "ccx", "Add CCX (Toffoli) gates."], [4, 4, 1, 0, "choi_channel", "Add custom channels in the Choi representation."], [4, 4, 1, 0, "cnot", "Add CNOT gates."], [4, 4, 1, 0, "complex_block_layer", "Add weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [4, 4, 1, 0, "complex_entangled_layer", "Add strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [4, 4, 1, 0, "control_oracle", "Add a controlled oracle gate."], [4, 4, 1, 0, "cp", "Add controlled P gates."], [4, 4, 1, 0, "crx", "Add controlled rotation gates about the x-axis."], [4, 4, 1, 0, "cry", "Add controlled rotation gates about the y-axis."], [4, 4, 1, 0, "crz", "Add controlled rotation gates about the z-axis."], [4, 4, 1, 0, "cswap", "Add CSWAP (Fredkin) gates."], [4, 4, 1, 0, "cu", "Add controlled single-qubit rotation gates."], [4, 4, 1, 0, "cy", "Add controlled Y gates."], [4, 4, 1, 0, "cz", "Add controlled Z gates."], [4, 4, 1, 0, "depolarizing", "Add depolarizing channels."], [4, 4, 1, 0, "generalized_amplitude_damping", "Add generalized amplitude damping channels."], [4, 4, 1, 0, "generalized_depolarizing", "Add a general depolarizing channel."], [4, 4, 1, 0, "h", "Add single-qubit Hadamard gates."], [4, 4, 1, 0, "iqp_encoding", "Prepares an instantaneous quantum polynomial (IQP) layer that encode angles via a type of rotation gates."], [4, 4, 1, 0, "kraus_channel", "Add custom channels in the Kraus representation."], [4, 4, 1, 0, "linear_entangled_layer", "Add linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [4, 4, 1, 0, "locc", "Add a one-way LOCC protocol comprised of unitary operations."], [4, 4, 1, 0, "measure", "Perform a measurement on the specified systems."], [4, 4, 1, 0, "ms", "Add M\u00f8lmer-S\u00f8rensen (MS) gates."], [4, 4, 1, 0, "oracle", "Add an oracle gate."], [4, 4, 1, 0, "p", "Add single-qubit P gates."], [4, 4, 1, 0, "param_locc", "Add a one-way LOCC protocol comprised of unitary operations, where the applied unitary is parameterized."], [4, 4, 1, 0, "param_oracle", "Add a parameterized oracle gate."], [4, 4, 1, 0, "param_quasi", "Add a quasi-probability operation, where the applied unitary is parameterized."], [4, 4, 1, 0, "pauli_channel", "Add Pauli channels."], [4, 4, 1, 0, "permute", "Add a permutation gate."], [4, 4, 1, 0, "phase_damping", "Add phase damping channels."], [4, 4, 1, 0, "phase_flip", "Add phase flip channels."], [4, 4, 1, 0, "plot", "Display the circuit using Quantikz if latex is True, otherwise using matplotlib."], [4, 3, 1, 0, "qasm", "String representation of the circuit in qasm-like format."], [4, 3, 1, 0, "qasm2", "Transpile the circuit in OpenQASM 2.0 format."], [4, 4, 1, 0, "quasi", "Add a quasi-probability operation, now only supports unitary operations."], [4, 4, 1, 0, "real_block_layer", "Add weakly entangled layers consisting of Ry gates and CNOT gates."], [4, 4, 1, 0, "real_entangled_layer", "Add strongly entangled layers consisting of Ry gates and CNOT gates."], [4, 4, 1, 0, "reset", "Reset the state of the specified systems to a given state."], [4, 4, 1, 0, "reset_channel", "Add reset channels."], [4, 4, 1, 0, "rx", "Add single-qubit rotation gates about the x-axis."], [4, 4, 1, 0, "rxx", "Add RXX gates."], [4, 4, 1, 0, "ry", "Add single-qubit rotation gates about the y-axis."], [4, 4, 1, 0, "ryy", "Add RYY gates."], [4, 4, 1, 0, "rz", "Add single-qubit rotation gates about the z-axis."], [4, 4, 1, 0, "rzz", "Add RZZ gates."], [4, 4, 1, 0, "s", "Add single-qubit S gates."], [4, 4, 1, 0, "sdg", "Add single-qubit S dagger (S inverse) gates."], [4, 4, 1, 0, "stinespring_channel", "Add custom channels in the Stinespring representation."], [4, 4, 1, 0, "swap", "Add SWAP gates."], [4, 4, 1, 0, "t", "Add single-qubit T gates."], [4, 4, 1, 0, "tdg", "Add single-qubit T dagger (T inverse) gates."], [4, 4, 1, 0, "thermal_relaxation", "Add thermal relaxation channels."], [4, 4, 1, 0, "to_latex", "The LaTeX representation of the circuit, written in Quantikz format."], [4, 4, 1, 0, "trotter", "Add Trotter decompositions of a Hamiltonian evolution operator."], [4, 4, 1, 0, "u3", "Add single-qubit rotation gates."], [4, 4, 1, 0, "universal_qudits", "Add universal qudit gates. One such gate requires d^2 - 1 parameters, where d is the gate dimension."], [4, 4, 1, 0, "universal_three_qubits", "Add universal three-qubit gates. One such gate requires 81 parameters."], [4, 4, 1, 0, "universal_two_qubits", "Add universal two-qubit gates. One such gate requires 15 parameters."], [4, 4, 1, 0, "x", "Add single-qubit X gates."], [4, 4, 1, 0, "y", "Add single-qubit Y gates."], [4, 4, 1, 0, "z", "Add single-qubit Z gates."]], "quairkit.circuit.Circuit.__init__": [[4, 2, 2, 0, "num_systems", "number of systems in the circuit."], [4, 2, 2, 0, "physical_idx", "physical indices of systems."], [4, 2, 2, 0, "system_dim", "dimension of systems of this circuit."]], "quairkit.circuit.Circuit.amplitude_damping": [[4, 2, 2, 0, "gamma", "Damping probability."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the damping on."]], "quairkit.circuit.Circuit.amplitude_encoding": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the encoding is applied."], [4, 2, 2, 0, "vector", "Input normalized vector to be encoded."]], "quairkit.circuit.Circuit.angle_encoding": [[4, 2, 2, 0, "angles", "Input vector of angles."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the encoding is applied."], [4, 2, 2, 0, "rotation", "Type of rotation gate ('RY', 'RZ', or 'RX')."]], "quairkit.circuit.Circuit.basis_encoding": [[4, 2, 2, 0, "number", "the integer to be encoded."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.circuit.Circuit.bit_flip": [[4, 2, 2, 0, "prob", "Probability of a bit flip."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.bit_phase_flip": [[4, 2, 2, 0, "prob", "Probability of a bit phase flip."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.ccx": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.choi_channel": [[4, 2, 2, 0, "choi_repr", "Choi representation."], [4, 2, 2, 0, "system_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.cnot": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.complex_block_layer": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "param", "Layer parameters."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.complex_entangled_layer": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "param", "Layer parameters."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.control_oracle": [[4, 2, 2, 0, "control_idx", "the index that controls the oracle."], [4, 2, 2, 0, "gate_name", "name of the oracle."], [4, 2, 2, 0, "latex_name", "LaTeX name of the gate."], [4, 2, 2, 0, "oracle", "Unitary oracle."], [4, 2, 2, 0, "system_idx", "Indices of the systems on which the gate is applied."]], "quairkit.circuit.Circuit.cp": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crx": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cry": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crz": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cswap": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cu": [[4, 2, 2, 0, "param", "Parameters of the gate."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cy": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cz": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.depolarizing": [[4, 2, 2, 0, "prob", "Depolarizing probability."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.generalized_amplitude_damping": [[4, 2, 2, 0, "gamma", "Damping probability."], [4, 2, 2, 0, "prob", "Excitation probability."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.generalized_depolarizing": [[4, 2, 2, 0, "prob", "Probabilities for the Pauli basis."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.h": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.iqp_encoding": [[4, 2, 2, 0, "depth", "Number of depth."], [4, 2, 2, 0, "features", "Input vector for encoding."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the encoding is applied."], [4, 2, 2, 0, "set_entanglement", "the set containing all pairs of qubits to be entangled using RZZ gates"]], "quairkit.circuit.Circuit.kraus_channel": [[4, 2, 2, 0, "kraus_oper", "Kraus operators."], [4, 2, 2, 0, "system_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.linear_entangled_layer": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "param", "Parameters for the layer."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.locc": [[4, 2, 2, 0, "label", "Label for measurement."], [4, 2, 2, 0, "latex_name", "LaTeX name for the applied operator."], [4, 2, 2, 0, "local_unitary", "The local unitary operation."], [4, 2, 2, 0, "system_idx", "Systems on which the protocol is applied."]], "quairkit.circuit.Circuit.measure": [[4, 2, 2, 0, "if_print", "Whether to print collapse info."], [4, 2, 2, 0, "measure_basis", "Measurement basis."], [4, 2, 2, 0, "post_selection", "The post-selection result."], [4, 2, 2, 0, "system_idx", "Systems to measure."]], "quairkit.circuit.Circuit.ms": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.oracle": [[4, 2, 2, 0, "control_idx", "the index that controls the oracle."], [4, 2, 2, 0, "gate_name", "name of the oracle."], [4, 2, 2, 0, "latex_name", "LaTeX name of the gate."], [4, 2, 2, 0, "oracle", "Unitary oracle."], [4, 2, 2, 0, "system_idx", "Indices of the systems on which the gate is applied."]], "quairkit.circuit.Circuit.p": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.param_locc": [[4, 2, 2, 0, "generator", "Function to generate the oracle."], [4, 2, 2, 0, "label", "Label for measurement."], [4, 2, 2, 0, "latex_name", "LaTeX name for the applied operator."], [4, 2, 2, 0, "num_acted_param", "Number of parameters required for a single application."], [4, 2, 2, 0, "param", "Input parameters for the gate."], [4, 2, 2, 0, "support_batch", "Whether generator supports batched input."], [4, 2, 2, 0, "system_idx", "Systems on which the protocol is applied."]], "quairkit.circuit.Circuit.param_oracle": [[4, 2, 2, 0, "control_idx", "The index that controls the oracle."], [4, 2, 2, 0, "gate_name", "Name of the oracle."], [4, 2, 2, 0, "generator", "Function to generate the oracle."], [4, 2, 2, 0, "latex_name", "LaTeX name of the gate."], [4, 2, 2, 0, "num_acted_param", "Number of parameters required for a single application."], [4, 2, 2, 0, "param", "Input parameters for the gate."], [4, 2, 2, 0, "support_batch", "Whether generator supports batched input."], [4, 2, 2, 0, "system_idx", "Indices of the systems on which the gate acts."]], "quairkit.circuit.Circuit.param_quasi": [[4, 2, 2, 0, "generator", "Function to generate the oracle."], [4, 2, 2, 0, "latex_name", "LaTeX name for the applied operation."], [4, 2, 2, 0, "num_acted_param", "Number of parameters required for a single application."], [4, 2, 2, 0, "param", "Input parameters for the gate."], [4, 2, 2, 0, "probability", "(quasi-)probability distribution for applying unitary operations."], [4, 2, 2, 0, "probability_param", "Whether the probability is parameterized."], [4, 2, 2, 0, "support_batch", "Whether generator supports batched input."], [4, 2, 2, 0, "system_idx", "Systems on which the operation is applied."]], "quairkit.circuit.Circuit.pauli_channel": [[4, 2, 2, 0, "prob", "Probabilities for the Pauli X, Y, and Z operators."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.permute": [[4, 2, 2, 0, "control_idx", "the index that controls the permutation."], [4, 2, 2, 0, "perm", "A list representing the permutation of subsystems."], [4, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.phase_damping": [[4, 2, 2, 0, "gamma", "Phase damping parameter."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.phase_flip": [[4, 2, 2, 0, "prob", "Probability of a phase flip."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.plot": [[4, 2, 2, 0, "decimal", "number of decimal places to display."], [4, 2, 2, 0, "dpi", "dots per inches of plot image."], [4, 2, 2, 0, "include_empty", "whether include empty lines, default to False."], [4, 2, 2, 0, "kwargs", "additional parameters for matplotlib plot."], [4, 2, 2, 0, "latex", "whether use Quantikz, a LaTeX package, to plot circuits , default to True."], [4, 2, 2, 0, "print_code", "whether print the LaTeX code of the circuit, default to False."], [4, 2, 2, 0, "show_plot", "whether show the plotted circuit, default to True."], [4, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.circuit.Circuit.quasi": [[4, 2, 2, 0, "latex_name", "LaTeX name for the applied operation."], [4, 2, 2, 0, "list_unitary", "list of unitary operations, each of which corresponds to a probability outcome."], [4, 2, 2, 0, "probability", "(quasi-)probability distribution for applying unitary operations."], [4, 2, 2, 0, "system_idx", "Systems on which the operation is applied."]], "quairkit.circuit.Circuit.real_block_layer": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "param", "Layer parameters."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.real_entangled_layer": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "param", "Layer parameters."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.reset": [[4, 2, 2, 0, "replace_state", "the state to replace the quantum state."], [4, 2, 2, 0, "state_label", "LaTeX label of the reset state, used for printing."], [4, 2, 2, 0, "system_idx", "list of systems to be reset."]], "quairkit.circuit.Circuit.reset_channel": [[4, 2, 2, 0, "prob", "Probabilities for resetting to the basis states."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.rx": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rxx": [[4, 2, 2, 0, "param", "Parameters of the gate."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ry": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ryy": [[4, 2, 2, 0, "param", "Parameters of the gate."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rz": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rzz": [[4, 2, 2, 0, "param", "Parameters of the gate."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.s": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.sdg": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.stinespring_channel": [[4, 2, 2, 0, "stinespring_repr", "Stinespring representation."], [4, 2, 2, 0, "system_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.swap": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.t": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.tdg": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.thermal_relaxation": [[4, 2, 2, 0, "const_t", "The T1 and T2 relaxation times."], [4, 2, 2, 0, "exec_time", "Gate execution time."], [4, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.to_latex": [[4, 2, 2, 0, "decimal", "number of decimal places to display."], [4, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.circuit.Circuit.trotter": [[4, 2, 2, 0, "hamiltonian", "Hamiltonian of the system whose time evolution is to be simulated."], [4, 2, 2, 0, "name", "Name of the Hamiltonian."], [4, 2, 2, 0, "num_steps", "Number of trotter blocks."], [4, 2, 2, 0, "order", "Order of the Trotter-Suzuki decomposition."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."], [4, 2, 2, 0, "time", "Total evolution time."]], "quairkit.circuit.Circuit.u3": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_qudits": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [4, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.universal_three_qubits": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_two_qubits": [[4, 2, 2, 0, "param", "Parameters of the gates."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.x": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.y": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.z": [[4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.core": [[6, 0, 0, 1, "base", ""], [7, 0, 0, 1, "hamiltonian", ""], [8, 0, 0, 1, "state", ""]], "quairkit.core.base": [[6, 5, 1, 0, "get_device", "Get the current device to save the tensor."], [6, 5, 1, 0, "get_dtype", "Return currently used data type."], [6, 5, 1, 0, "get_float_dtype", "Return currently used float data type."], [6, 5, 1, 0, "get_seed", "Get the currently used seed of QuAIRKit."], [6, 5, 1, 0, "set_device", "Set the classical device to save the tensor."], [6, 5, 1, 0, "set_dtype", "Set the data type ."], [6, 5, 1, 0, "set_seed", "Set the global seed of QuAIRKit."]], "quairkit.core.base.set_device": [[6, 2, 2, 0, "device", "The name of the device."]], "quairkit.core.base.set_dtype": [[6, 2, 2, 0, "dtype", "The dtype can be complex64 and complex128."]], "quairkit.core.base.set_seed": [[6, 2, 2, 0, "seed", "the random seed used in QuAIRKit."]], "quairkit.core.hamiltonian": [[7, 1, 1, 0, "Hamiltonian", "Hamiltonian class in QuAIRKit."], [7, 1, 1, 0, "SpinOps", "The spin operators in matrix forms, could be used to construct Hamiltonian matrix or spin observables."]], "quairkit.core.hamiltonian.Hamiltonian": [[7, 3, 1, 0, "coefficients", "The coefficient of each term in the Hamiltonian, i.e. [1.0, 2.0]."], [7, 4, 1, 0, "construct_h_matrix", "Construct a matrix form of the Hamiltonian in Z-basis."], [7, 4, 1, 0, "decompose_pauli_words", "Decompose pauli_str into coefficients and Pauli strings."], [7, 4, 1, 0, "decompose_with_sites", "Decompose pauli_str into coefficients, a simplified form of Pauli strings, and the indices of qubits on which the Pauli operators act on."], [7, 3, 1, 0, "matrix", "The matrix form of the Hamiltonian."], [7, 3, 1, 0, "n_qubits", "Number of qubits."], [7, 3, 1, 0, "n_terms", "Number of terms of the hamiltonian."], [7, 3, 1, 0, "pauli_str", "The Pauli string corresponding to the hamiltonian."], [7, 3, 1, 0, "pauli_words", "The Pauli word of each term, i.e. ['ZIZ', 'IIX']."], [7, 3, 1, 0, "pauli_words_matrix", "The list of matrices with respect to simplied Pauli words."], [7, 3, 1, 0, "pauli_words_r", "A list of Pauli word (exclude I), i.e. ['ZXZZ', 'Z', 'X']."], [7, 3, 1, 0, "sites", "A list of qubits index corresponding to the hamiltonian."], [7, 3, 1, 0, "terms", "All items in hamiltonian, i.e. [['Z0, Z1'], ['I']]."]], "quairkit.core.hamiltonian.Hamiltonian.__init__": [[7, 2, 2, 0, "compress", "Determines whether the input list will be automatically merged (e.g."], [7, 2, 2, 0, "pauli_str", "A list of Hamiltonian information, e.g."]], "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix": [[7, 2, 2, 0, "qubit_num", "The number of qubits."]], "quairkit.core.hamiltonian.SpinOps": [[7, 3, 1, 0, "sigx_p", "A list of S^x_i operators, different elements correspond to different indices i."], [7, 3, 1, 0, "sigy_p", "A list of S^y_i operators, different elements correspond to different indices i."], [7, 3, 1, 0, "sigz_p", "A list of S^z_i operators, different elements correspond to different indices i."]], "quairkit.core.hamiltonian.SpinOps.__init__": [[7, 2, 2, 0, "size", "Size of the system (number of qubits)."], [7, 2, 2, 0, "use_sparse", "Decide whether to use the sparse matrix to calculate."]], "quairkit.core.state": [[9, 0, 0, 1, "backend", ""], [12, 0, 0, 1, "state", ""]], "quairkit.core.state.backend": [[9, 6, 1, 0, "BACKEND_LIST", "Default simulator for the state backend."], [9, 5, 1, 0, "get_backend", "Get the current backend of QuAIRKit."], [9, 5, 1, 0, "set_backend", "Set the backend implementation of QuAIRKit state."]], "quairkit.core.state.backend.get_backend": [[9, 2, 2, 0, "backend", "The name of the backend."]], "quairkit.core.state.backend.set_backend": [[9, 2, 2, 0, "backend", "The name of the backend."]], "quairkit.core.state.state": [[12, 5, 1, 0, "tensor_state", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [12, 5, 1, 0, "to_state", "The function to generate a specified state instance."]], "quairkit.core.state.state.tensor_state": [[12, 2, 2, 0, "args", "other states"], [12, 2, 2, 0, "state_1st", "the first state"]], "quairkit.core.state.state.to_state": [[12, 2, 2, 0, "backend", "The name of the backend to use."], [12, 2, 2, 0, "data", "a representation of the quantum state in allowable backend, or an instance of the State class."], [12, 2, 2, 0, "eps", "The tolerance for checking the validity of the input state."], [12, 2, 2, 0, "prob", "The (list of) probability distribution of the state."], [12, 2, 2, 0, "system_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer. For example, system_dim = 2 means the systems are qubits (default setup); system_dim = [2, 3] means the first system is a qubit and the second is a qutrit."]], "quairkit.database": [[14, 5, 1, 0, "Of", "Construct the oracle unitary matrix for an unstructured search problem."], [14, 5, 1, 0, "Of_gate", "Construct the oracle unitary matrix for an unstructured search problem."], [14, 5, 1, 0, "Uf", "Construct the unitary matrix used in Simon's algorithm."], [14, 5, 1, 0, "Uf_gate", "Construct the unitary matrix used in Simon's algorithm."], [14, 5, 1, 0, "amplitude_damping_kraus", "Kraus representation of an amplitude damping channel with form"], [14, 5, 1, 0, "bell_basis", "Generate the Bell basis for a 2-qubit system, with each basis state accessible along the first dimension of a tensor."], [14, 5, 1, 0, "bell_diagonal_state", "Generate a Bell diagonal state."], [14, 5, 1, 0, "bell_state", "Generate a Bell state."], [14, 5, 1, 0, "bit_flip_kraus", "Kraus representation of a bit flip channel with form"], [14, 5, 1, 0, "bit_phase_flip_kraus", "Kraus representation of a bit-phase flip channel with form"], [14, 5, 1, 0, "ccx", "Generate the Toffoli gate matrix."], [14, 5, 1, 0, "ccx_gate", "Generate the Toffoli gate matrix."], [14, 5, 1, 0, "cnot", "Generate the CNOT gate matrix."], [14, 5, 1, 0, "cnot_gate", "Generate the CNOT gate matrix."], [14, 5, 1, 0, "completely_mixed_computational", "Generate the density matrix of the completely mixed state."], [14, 5, 1, 0, "computational_state", "Generate a computational state |e_{i}\\rangle, whose i-th element is 1 and all the other elements are 0."], [14, 5, 1, 0, "cp", "Generate the CP gate matrix."], [14, 5, 1, 0, "cp_gate", "Generate the CP gate matrix."], [14, 5, 1, 0, "crx", "Generate the CR_X gate matrix."], [14, 5, 1, 0, "crx_gate", "Generate the CR_X gate matrix."], [14, 5, 1, 0, "cry", "Generate the CR_Y gate matrix."], [14, 5, 1, 0, "cry_gate", "Generate the CR_Y gate matrix."], [14, 5, 1, 0, "crz", "Generate the CR_Z gate matrix."], [14, 5, 1, 0, "crz_gate", "Generate the CR_Z gate matrix."], [14, 5, 1, 0, "cswap", "Generate the CSWAP gate matrix."], [14, 5, 1, 0, "cswap_gate", "Generate the CSWAP gate matrix."], [14, 5, 1, 0, "cu", "Generate the CU gate matrix."], [14, 5, 1, 0, "cu_gate", "Generate the CU gate matrix."], [14, 5, 1, 0, "cy", "Generate the CY gate matrix."], [14, 5, 1, 0, "cy_gate", "Generate the CY gate matrix."], [14, 5, 1, 0, "cz", "Generate the CZ gate matrix."], [14, 5, 1, 0, "cz_gate", "Generate the CZ gate matrix."], [14, 5, 1, 0, "depolarizing_kraus", "Kraus representation of a depolarizing channel with form"], [14, 5, 1, 0, "eye", "Generate the identity matrix."], [14, 5, 1, 0, "eye_gate", "Generate the identity matrix."], [14, 5, 1, 0, "gell_mann", "Generate a set of Gell-Mann matrices for a given dimension. These matrices span the entire space of dim-by-dim matrices, and they generalize the Pauli operators when dim = 2 and the Gell-Mann operators when dim = 3."], [14, 5, 1, 0, "generalized_amplitude_damping_kraus", "Kraus representation of a generalized amplitude damping channel with form"], [14, 5, 1, 0, "generalized_depolarizing_kraus", "Kraus representation of a generalized depolarizing channel with form"], [14, 5, 1, 0, "ghz_state", "Generate a GHZ-state."], [14, 5, 1, 0, "grover_matrix", "Construct the Grover operator based on oracle."], [14, 5, 1, 0, "h", "Generate the matrix of the Hadamard gate."], [14, 5, 1, 0, "h_gate", "Generate the matrix of the Hadamard gate."], [14, 5, 1, 0, "haar_density_operator", "Randomly generate a density matrix following Haar measure."], [14, 5, 1, 0, "haar_orthogonal", "Randomly generate an orthogonal matrix following Haar measure, referenced by arXiv:math-ph/0609050v2."], [14, 5, 1, 0, "haar_state_vector", "Randomly generate a state vector following Haar measure."], [14, 5, 1, 0, "haar_unitary", "Randomly generate a unitary following Haar measure, referenced by arXiv:math-ph/0609050v2."], [15, 0, 0, 1, "hamiltonian", ""], [14, 5, 1, 0, "heisenberg_hamiltonian", "Compute the Heisenberg Hamiltonian."], [14, 5, 1, 0, "heisenberg_weyl", "Generate Heisenberg-Weyl operator for qudit. The Heisenberg-Weyl operators are defined as T(a,b) = e^{-(d+1) \\pi i a b/ d}Z^a X^b."], [14, 5, 1, 0, "ising_hamiltonian", "Compute the Ising Hamiltonian."], [14, 5, 1, 0, "isotropic_state", "Generate the isotropic state."], [16, 0, 0, 1, "matrix", ""], [14, 5, 1, 0, "ms", "Generate the MS gate matrix."], [14, 5, 1, 0, "ms_gate", "Generate the MS gate matrix."], [14, 5, 1, 0, "one_state", "Generate a one state."], [14, 5, 1, 0, "p", "Generate the P gate matrix."], [14, 5, 1, 0, "p_gate", "Generate the P gate matrix."], [14, 5, 1, 0, "pauli_basis", "Generate a Pauli basis."], [14, 5, 1, 0, "pauli_group", "Generate a Pauli group i.e., an unnormalized Pauli basis."], [14, 5, 1, 0, "pauli_kraus", "Kraus representation of a pauli channel"], [14, 5, 1, 0, "pauli_str_basis", "Get the state basis with respect to the Pauli string."], [14, 5, 1, 0, "pauli_str_povm", "Get the povm with respect to the Pauli string."], [14, 5, 1, 0, "permutation_matrix", "Construct a unitary matrix representing a permutation operation on a quantum system."], [14, 5, 1, 0, "phase", "Generate phase operator for qudit"], [14, 5, 1, 0, "phase_damping_kraus", "Kraus representation of a phase damping channel with form"], [14, 5, 1, 0, "phase_flip_kraus", "Kraus representation of a phase flip channel with form"], [14, 5, 1, 0, "phase_gate", "Generate phase operator for qudit"], [14, 5, 1, 0, "phase_space_point", "Generate phase space point operator for qudit."], [14, 5, 1, 0, "qft_basis", "Compute the eigenvectors (eigenbasis) of the Quantum Fourier Transform (QFT) matrix."], [14, 5, 1, 0, "qft_matrix", "Construct the quantum Fourier transpose (QFT) gate."], [14, 5, 1, 0, "r_state", "Generate an R-state."], [17, 0, 0, 1, "random", ""], [14, 5, 1, 0, "random_channel", "Generate a random channel from its Stinespring representation."], [14, 5, 1, 0, "random_clifford", "Generate a random Clifford unitary."], [14, 5, 1, 0, "random_density_matrix", "Randomly generate an num_qubits-qubit state in density matrix form."], [14, 5, 1, 0, "random_hamiltonian_generator", "Generate a random Hamiltonian."], [14, 5, 1, 0, "random_hermitian", "Randomly generate a normalized 2^n \\times 2^n Hermitian matrix."], [14, 5, 1, 0, "random_orthogonal_projection", "Randomly generate a d \\times d orthogonal projector."], [14, 5, 1, 0, "random_pauli_str_generator", "Generate a random observable in list form."], [14, 5, 1, 0, "random_projector", "Randomly generate a d \\times d orthogonal projector."], [14, 5, 1, 0, "random_state", "Generate a random quantum state."], [14, 5, 1, 0, "random_unitary", "Randomly generate a d \\times d unitary."], [14, 5, 1, 0, "random_unitary_hermitian", "Randomly generate a 2^n \\times 2^n Hermitian unitary."], [14, 5, 1, 0, "random_unitary_with_hermitian_block", "Randomly generate a unitary 2^n \\times 2^n matrix that is a block encoding of a 2^{n/2} \\times 2^{n/2} Hermitian matrix."], [14, 5, 1, 0, "replacement_choi", "Choi representation of a replacement channel"], [18, 0, 0, 1, "representation", ""], [14, 5, 1, 0, "reset_kraus", "Kraus representation of a reset channel with form"], [14, 5, 1, 0, "rx", "Generate the RX gate matrix."], [14, 5, 1, 0, "rx_gate", "Generate the RX gate matrix."], [14, 5, 1, 0, "rxx", "Generate the RXX gate matrix."], [14, 5, 1, 0, "rxx_gate", "Generate the RXX gate matrix."], [14, 5, 1, 0, "ry", "Generate the RY gate matrix."], [14, 5, 1, 0, "ry_gate", "Generate the RY gate matrix."], [14, 5, 1, 0, "ryy", "Generate the RYY gate matrix."], [14, 5, 1, 0, "ryy_gate", "Generate the RYY gate matrix."], [14, 5, 1, 0, "rz", "Generate the RZ gate matrix."], [14, 5, 1, 0, "rz_gate", "Generate the RZ gate matrix."], [14, 5, 1, 0, "rzz", "Generate the RZZ gate matrix."], [14, 5, 1, 0, "rzz_gate", "Generate the RZZ gate matrix."], [14, 5, 1, 0, "s", "Generate the matrix of the S gate."], [14, 5, 1, 0, "s_gate", "Generate the matrix of the S gate."], [14, 5, 1, 0, "s_state", "Generate the S-state."], [14, 5, 1, 0, "sdg", "Generate the matrix of the Sdg (S-dagger) gate."], [14, 5, 1, 0, "sdg_gate", "Generate the matrix of the Sdg (S-dagger) gate."], [19, 0, 0, 1, "set", ""], [14, 5, 1, 0, "shift", "Generate shift operator for qudit"], [14, 5, 1, 0, "shift_gate", "Generate shift operator for qudit"], [20, 0, 0, 1, "state", ""], [14, 5, 1, 0, "std_basis", "Generate all standard basis states for a given number of qubits."], [14, 5, 1, 0, "swap", "Generate the SWAP gate matrix."], [14, 5, 1, 0, "swap_gate", "Generate the SWAP gate matrix."], [14, 5, 1, 0, "t", "Generate the matrix of the T gate."], [14, 5, 1, 0, "t_gate", "Generate the matrix of the T gate."], [14, 5, 1, 0, "tdg", "Generate the matrix of the Tdg (T-dagger) gate."], [14, 5, 1, 0, "tdg_gate", "Generate the matrix of the Tdg (T-dagger) gate."], [14, 5, 1, 0, "thermal_relaxation_kraus", "Kraus representation of a thermal relaxation channel"], [14, 5, 1, 0, "toffoli", "Generate the Toffoli gate matrix."], [14, 5, 1, 0, "toffoli_gate", "Generate the Toffoli gate matrix."], [14, 5, 1, 0, "u3", "Generate the U3 gate matrix."], [14, 5, 1, 0, "u3_gate", "Generate the U3 gate matrix."], [14, 5, 1, 0, "universal2", "Generate the universal two-qubit gate matrix."], [14, 5, 1, 0, "universal2_gate", "Generate the universal two-qubit gate matrix."], [14, 5, 1, 0, "universal3", "Generate the universal three-qubit gate matrix."], [14, 5, 1, 0, "universal3_gate", "Generate the universal three-qubit gate matrix."], [14, 5, 1, 0, "universal_qudit", "Generate a universal gate matrix for qudits using a generalized Gell-Mann basis."], [14, 5, 1, 0, "w_state", "Generate a W-state."], [14, 5, 1, 0, "x", "Generate the Pauli X matrix."], [14, 5, 1, 0, "x_gate", "Generate the Pauli X matrix."], [14, 5, 1, 0, "xy_hamiltonian", "Compute the XY Hamiltonian."], [14, 5, 1, 0, "y", "Generate the Pauli Y matrix."], [14, 5, 1, 0, "y_gate", "Generate the Pauli Y matrix."], [14, 5, 1, 0, "z", "Generate the Pauli Z matrix."], [14, 5, 1, 0, "z_gate", "Generate the Pauli Z matrix."], [14, 5, 1, 0, "zero_state", "Generate a zero state."]], "quairkit.database.Of": [[14, 2, 2, 0, "f", "a function f: \\{0, 1\\}^n \\to \\{0, 1\\}."], [14, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.Of_gate": [[14, 2, 2, 0, "f", "a function f: \\{0, 1\\}^n \\to \\{0, 1\\}."], [14, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.Uf": [[14, 2, 2, 0, "f", "a 2-to-1 or 1-to-1 function f: \\{0, 1\\}^n \\to \\{0, 1\\}^n."], [14, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.Uf_gate": [[14, 2, 2, 0, "f", "a 2-to-1 or 1-to-1 function f: \\{0, 1\\}^n \\to \\{0, 1\\}^n."], [14, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.amplitude_damping_kraus": [[14, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.bell_diagonal_state": [[14, 2, 2, 0, "prob", "The probability of each Bell state."]], "quairkit.database.bell_state": [[14, 2, 2, 0, "num_systems", "Number of systems in this state."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.bit_flip_kraus": [[14, 2, 2, 0, "prob", "probability p."]], "quairkit.database.bit_phase_flip_kraus": [[14, 2, 2, 0, "prob", "probability p."]], "quairkit.database.completely_mixed_computational": [[14, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.computational_state": [[14, 2, 2, 0, "index", "Index i of the computational basis state |e_{i}\\rangle."], [14, 2, 2, 0, "num_systems", "Number of systems in this state."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.cp": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.cp_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.crx": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.crx_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.cry": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.cry_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.crz": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.crz_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.cu": [[14, 2, 2, 0, "theta", "the (batched) parameters, with shape [4, 1]."]], "quairkit.database.cu_gate": [[14, 2, 2, 0, "theta", "the (batched) parameters, with shape [4, 1]."]], "quairkit.database.depolarizing_kraus": [[14, 2, 2, 0, "prob", "probability p."]], "quairkit.database.eye": [[14, 2, 2, 0, "dim", "the dimension of the identity matrix (default is 2 for a qubit)."]], "quairkit.database.eye_gate": [[14, 2, 2, 0, "dim", "the dimension of the identity matrix (default is 2 for a qubit)."]], "quairkit.database.gell_mann": [[14, 2, 2, 0, "dim", "a positive integer indicating the dimension."]], "quairkit.database.generalized_amplitude_damping_kraus": [[14, 2, 2, 0, "gamma", "coefficient \\gamma."], [14, 2, 2, 0, "prob", "probability p."]], "quairkit.database.generalized_depolarizing_kraus": [[14, 2, 2, 0, "num_qubits", "number of qubits n of this channel."], [14, 2, 2, 0, "prob", "probability p."]], "quairkit.database.ghz_state": [[14, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.grover_matrix": [[14, 2, 2, "quairkit.database.grover_matrix", "dtype", "Construct the Grover operator based on oracle."], [14, 2, 2, 0, "oracle", "the input oracle A to be rotated."]], "quairkit.database.haar_density_operator": [[14, 2, 2, 0, "dim", "Dimension of the density matrix."], [14, 2, 2, 0, "is_real", "Whether the density matrix is real."], [14, 2, 2, 0, "rank", "Rank of the density matrix."]], "quairkit.database.haar_orthogonal": [[14, 2, 2, 0, "dim", "Dimension of the orthogonal matrix."]], "quairkit.database.haar_state_vector": [[14, 2, 2, 0, "dim", "Dimension of the state vector."], [14, 2, 2, 0, "is_real", "Whether the vector is real."]], "quairkit.database.haar_unitary": [[14, 2, 2, 0, "dim", "Dimension of the unitary."]], "quairkit.database.hamiltonian": [[15, 5, 1, 0, "heisenberg_hamiltonian", "Compute the Heisenberg Hamiltonian."], [15, 5, 1, 0, "ising_hamiltonian", "Compute the Ising Hamiltonian."], [15, 5, 1, 0, "xy_hamiltonian", "Compute the XY Hamiltonian."]], "quairkit.database.hamiltonian.heisenberg_hamiltonian": [[15, 2, 2, 0, "edges", "A tensor E shape=[3, V, V], where E[0][u][v] is alpha_{uv}, E[1][u][v] is beta_{uv}, and E[2][u][v] is gamma_{uv}."]], "quairkit.database.hamiltonian.ising_hamiltonian": [[15, 2, 2, 0, "edges", "A tensor E shape=[V, V], where E[u][v] is gamma_{uv}."], [15, 2, 2, 0, "vertices", "A tensor V shape=[V], where V[k] is beta_{k}."]], "quairkit.database.hamiltonian.xy_hamiltonian": [[15, 2, 2, 0, "edges", "A tensor E shape=[2, V, V], where E[0][u][v] is alpha_{uv} and E[1][u][v] is beta_{uv}."]], "quairkit.database.heisenberg_hamiltonian": [[14, 2, 2, 0, "edges", "A tensor E shape=[3, V, V], where E[0][u][v] is alpha_{uv}, E[1][u][v] is beta_{uv}, and E[2][u][v] is gamma_{uv}."]], "quairkit.database.heisenberg_weyl": [[14, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.ising_hamiltonian": [[14, 2, 2, 0, "edges", "A tensor E shape=[V, V], where E[u][v] is gamma_{uv}."], [14, 2, 2, 0, "vertices", "A tensor V shape=[V], where V[k] is beta_{k}."]], "quairkit.database.isotropic_state": [[14, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."], [14, 2, 2, 0, "prob", "The parameter of the isotropic state to be generated."]], "quairkit.database.matrix": [[16, 5, 1, 0, "Of", "Construct the oracle unitary matrix for an unstructured search problem."], [16, 5, 1, 0, "Of_gate", "Construct the oracle unitary matrix for an unstructured search problem."], [16, 5, 1, 0, "Uf", "Construct the unitary matrix used in Simon's algorithm."], [16, 5, 1, 0, "Uf_gate", "Construct the unitary matrix used in Simon's algorithm."], [16, 5, 1, 0, "ccx", "Generate the Toffoli gate matrix."], [16, 5, 1, 0, "ccx_gate", "Generate the Toffoli gate matrix."], [16, 5, 1, 0, "cnot", "Generate the CNOT gate matrix."], [16, 5, 1, 0, "cnot_gate", "Generate the CNOT gate matrix."], [16, 5, 1, 0, "cp", "Generate the CP gate matrix."], [16, 5, 1, 0, "cp_gate", "Generate the CP gate matrix."], [16, 5, 1, 0, "crx", "Generate the CR_X gate matrix."], [16, 5, 1, 0, "crx_gate", "Generate the CR_X gate matrix."], [16, 5, 1, 0, "cry", "Generate the CR_Y gate matrix."], [16, 5, 1, 0, "cry_gate", "Generate the CR_Y gate matrix."], [16, 5, 1, 0, "crz", "Generate the CR_Z gate matrix."], [16, 5, 1, 0, "crz_gate", "Generate the CR_Z gate matrix."], [16, 5, 1, 0, "cswap", "Generate the CSWAP gate matrix."], [16, 5, 1, 0, "cswap_gate", "Generate the CSWAP gate matrix."], [16, 5, 1, 0, "cu", "Generate the CU gate matrix."], [16, 5, 1, 0, "cu_gate", "Generate the CU gate matrix."], [16, 5, 1, 0, "cy", "Generate the CY gate matrix."], [16, 5, 1, 0, "cy_gate", "Generate the CY gate matrix."], [16, 5, 1, 0, "cz", "Generate the CZ gate matrix."], [16, 5, 1, 0, "cz_gate", "Generate the CZ gate matrix."], [16, 5, 1, 0, "eye", "Generate the identity matrix."], [16, 5, 1, 0, "eye_gate", "Generate the identity matrix."], [16, 5, 1, 0, "grover_matrix", "Construct the Grover operator based on oracle."], [16, 5, 1, 0, "h", "Generate the matrix of the Hadamard gate."], [16, 5, 1, 0, "h_gate", "Generate the matrix of the Hadamard gate."], [16, 5, 1, 0, "ms", "Generate the MS gate matrix."], [16, 5, 1, 0, "ms_gate", "Generate the MS gate matrix."], [16, 5, 1, 0, "p", "Generate the P gate matrix."], [16, 5, 1, 0, "p_gate", "Generate the P gate matrix."], [16, 5, 1, 0, "permutation_matrix", "Construct a unitary matrix representing a permutation operation on a quantum system."], [16, 5, 1, 0, "phase", "Generate phase operator for qudit"], [16, 5, 1, 0, "phase_gate", "Generate phase operator for qudit"], [16, 5, 1, 0, "qft_matrix", "Construct the quantum Fourier transpose (QFT) gate."], [16, 5, 1, 0, "rx", "Generate the RX gate matrix."], [16, 5, 1, 0, "rx_gate", "Generate the RX gate matrix."], [16, 5, 1, 0, "rxx", "Generate the RXX gate matrix."], [16, 5, 1, 0, "rxx_gate", "Generate the RXX gate matrix."], [16, 5, 1, 0, "ry", "Generate the RY gate matrix."], [16, 5, 1, 0, "ry_gate", "Generate the RY gate matrix."], [16, 5, 1, 0, "ryy", "Generate the RYY gate matrix."], [16, 5, 1, 0, "ryy_gate", "Generate the RYY gate matrix."], [16, 5, 1, 0, "rz", "Generate the RZ gate matrix."], [16, 5, 1, 0, "rz_gate", "Generate the RZ gate matrix."], [16, 5, 1, 0, "rzz", "Generate the RZZ gate matrix."], [16, 5, 1, 0, "rzz_gate", "Generate the RZZ gate matrix."], [16, 5, 1, 0, "s", "Generate the matrix of the S gate."], [16, 5, 1, 0, "s_gate", "Generate the matrix of the S gate."], [16, 5, 1, 0, "sdg", "Generate the matrix of the Sdg (S-dagger) gate."], [16, 5, 1, 0, "sdg_gate", "Generate the matrix of the Sdg (S-dagger) gate."], [16, 5, 1, 0, "shift", "Generate shift operator for qudit"], [16, 5, 1, 0, "shift_gate", "Generate shift operator for qudit"], [16, 5, 1, 0, "swap", "Generate the SWAP gate matrix."], [16, 5, 1, 0, "swap_gate", "Generate the SWAP gate matrix."], [16, 5, 1, 0, "t", "Generate the matrix of the T gate."], [16, 5, 1, 0, "t_gate", "Generate the matrix of the T gate."], [16, 5, 1, 0, "tdg", "Generate the matrix of the Tdg (T-dagger) gate."], [16, 5, 1, 0, "tdg_gate", "Generate the matrix of the Tdg (T-dagger) gate."], [16, 5, 1, 0, "toffoli", "Generate the Toffoli gate matrix."], [16, 5, 1, 0, "toffoli_gate", "Generate the Toffoli gate matrix."], [16, 5, 1, 0, "u3", "Generate the U3 gate matrix."], [16, 5, 1, 0, "u3_gate", "Generate the U3 gate matrix."], [16, 5, 1, 0, "universal2", "Generate the universal two-qubit gate matrix."], [16, 5, 1, 0, "universal2_gate", "Generate the universal two-qubit gate matrix."], [16, 5, 1, 0, "universal3", "Generate the universal three-qubit gate matrix."], [16, 5, 1, 0, "universal3_gate", "Generate the universal three-qubit gate matrix."], [16, 5, 1, 0, "universal_qudit", "Generate a universal gate matrix for qudits using a generalized Gell-Mann basis."], [16, 5, 1, 0, "x", "Generate the Pauli X matrix."], [16, 5, 1, 0, "x_gate", "Generate the Pauli X matrix."], [16, 5, 1, 0, "y", "Generate the Pauli Y matrix."], [16, 5, 1, 0, "y_gate", "Generate the Pauli Y matrix."], [16, 5, 1, 0, "z", "Generate the Pauli Z matrix."], [16, 5, 1, 0, "z_gate", "Generate the Pauli Z matrix."]], "quairkit.database.matrix.Of": [[16, 2, 2, 0, "f", "a function f: \\{0, 1\\}^n \\to \\{0, 1\\}."], [16, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.Of_gate": [[16, 2, 2, 0, "f", "a function f: \\{0, 1\\}^n \\to \\{0, 1\\}."], [16, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.Uf": [[16, 2, 2, 0, "f", "a 2-to-1 or 1-to-1 function f: \\{0, 1\\}^n \\to \\{0, 1\\}^n."], [16, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.Uf_gate": [[16, 2, 2, 0, "f", "a 2-to-1 or 1-to-1 function f: \\{0, 1\\}^n \\to \\{0, 1\\}^n."], [16, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.cp": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cp_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crx": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crx_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cry": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cry_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crz": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crz_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cu": [[16, 2, 2, 0, "theta", "the (batched) parameters, with shape [4, 1]."]], "quairkit.database.matrix.cu_gate": [[16, 2, 2, 0, "theta", "the (batched) parameters, with shape [4, 1]."]], "quairkit.database.matrix.eye": [[16, 2, 2, 0, "dim", "the dimension of the identity matrix (default is 2 for a qubit)."]], "quairkit.database.matrix.eye_gate": [[16, 2, 2, 0, "dim", "the dimension of the identity matrix (default is 2 for a qubit)."]], "quairkit.database.matrix.grover_matrix": [[16, 2, 2, "quairkit.database.matrix.grover_matrix", "dtype", "Construct the Grover operator based on oracle."], [16, 2, 2, 0, "oracle", "the input oracle A to be rotated."]], "quairkit.database.matrix.p": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.p_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.permutation_matrix": [[16, 2, 2, 0, "perm", "A list representing the permutation of subsystems. For example, [1, 0, 2] swaps the first two subsystems."], [16, 2, 2, 0, "system_dim", "The dimension of each subsystem. - If an integer, all subsystems are assumed to have the same dimension. - If a list, it specifies the dimension of each subsystem individually."]], "quairkit.database.matrix.phase": [[16, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.phase_gate": [[16, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.qft_matrix": [[16, 2, 2, 0, "num_qubits", "number of qubits n st."]], "quairkit.database.matrix.rx": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rx_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rxx": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rxx_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ry": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ry_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ryy": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ryy_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rz": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rz_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rzz": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rzz_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.shift": [[16, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.shift_gate": [[16, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.u3": [[16, 2, 2, 0, "theta", "the (batched) parameters, with shape [3, 1]."]], "quairkit.database.matrix.u3_gate": [[16, 2, 2, 0, "theta", "the (batched) parameters, with shape [3, 1]."]], "quairkit.database.matrix.universal2": [[16, 2, 2, 0, "theta", "the (batched) parameter with shape [15]."]], "quairkit.database.matrix.universal2_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter with shape [15]."]], "quairkit.database.matrix.universal3": [[16, 2, 2, 0, "theta", "the (batched) parameter with shape [81]."]], "quairkit.database.matrix.universal3_gate": [[16, 2, 2, 0, "theta", "the (batched) parameter with shape [81]."]], "quairkit.database.matrix.universal_qudit": [[16, 2, 2, 0, "dimension", "the dimension of the qudit."], [16, 2, 2, 0, "theta", "the (batched) parameter with shape [dimension**2 - 1]."]], "quairkit.database.one_state": [[14, 2, 2, 0, "num_systems", "Number of systems in this state."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.p": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.p_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.pauli_basis": [[14, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.pauli_group": [[14, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.pauli_kraus": [[14, 2, 2, 0, "prob", "a list of three probabilities corresponding to X, Y, Z gate p."]], "quairkit.database.pauli_str_basis": [[14, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.pauli_str_povm": [[14, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.permutation_matrix": [[14, 2, 2, 0, "perm", "A list representing the permutation of subsystems. For example, [1, 0, 2] swaps the first two subsystems."], [14, 2, 2, 0, "system_dim", "The dimension of each subsystem. - If an integer, all subsystems are assumed to have the same dimension. - If a list, it specifies the dimension of each subsystem individually."]], "quairkit.database.phase": [[14, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.phase_damping_kraus": [[14, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.phase_flip_kraus": [[14, 2, 2, 0, "prob", "probability p."]], "quairkit.database.phase_gate": [[14, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.phase_space_point": [[14, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.qft_basis": [[14, 2, 2, 0, "num_qubits", "Number of qubits n such that N = 2^n."]], "quairkit.database.qft_matrix": [[14, 2, 2, 0, "num_qubits", "number of qubits n st."]], "quairkit.database.r_state": [[14, 2, 2, 0, "prob", "The parameter of the R-state to be generated."]], "quairkit.database.random": [[17, 5, 1, 0, "haar_density_operator", "Randomly generate a density matrix following Haar measure."], [17, 5, 1, 0, "haar_orthogonal", "Randomly generate an orthogonal matrix following Haar measure, referenced by arXiv:math-ph/0609050v2."], [17, 5, 1, 0, "haar_state_vector", "Randomly generate a state vector following Haar measure."], [17, 5, 1, 0, "haar_unitary", "Randomly generate a unitary following Haar measure, referenced by arXiv:math-ph/0609050v2."], [17, 5, 1, 0, "random_channel", "Generate a random channel from its Stinespring representation."], [17, 5, 1, 0, "random_clifford", "Generate a random Clifford unitary."], [17, 5, 1, 0, "random_density_matrix", "Randomly generate an num_qubits-qubit state in density matrix form."], [17, 5, 1, 0, "random_hamiltonian_generator", "Generate a random Hamiltonian."], [17, 5, 1, 0, "random_hermitian", "Randomly generate a normalized 2^n \\times 2^n Hermitian matrix."], [17, 5, 1, 0, "random_orthogonal_projection", "Randomly generate a d \\times d orthogonal projector."], [17, 5, 1, 0, "random_pauli_str_generator", "Generate a random observable in list form."], [17, 5, 1, 0, "random_projector", "Randomly generate a d \\times d orthogonal projector."], [17, 5, 1, 0, "random_state", "Generate a random quantum state."], [17, 5, 1, 0, "random_unitary", "Randomly generate a d \\times d unitary."], [17, 5, 1, 0, "random_unitary_hermitian", "Randomly generate a 2^n \\times 2^n Hermitian unitary."], [17, 5, 1, 0, "random_unitary_with_hermitian_block", "Randomly generate a unitary 2^n \\times 2^n matrix that is a block encoding of a 2^{n/2} \\times 2^{n/2} Hermitian matrix."]], "quairkit.database.random.haar_density_operator": [[17, 2, 2, 0, "dim", "Dimension of the density matrix."], [17, 2, 2, 0, "is_real", "Whether the density matrix is real."], [17, 2, 2, 0, "rank", "Rank of the density matrix."]], "quairkit.database.random.haar_orthogonal": [[17, 2, 2, 0, "dim", "Dimension of the orthogonal matrix."]], "quairkit.database.random.haar_state_vector": [[17, 2, 2, 0, "dim", "Dimension of the state vector."], [17, 2, 2, 0, "is_real", "Whether the vector is real."]], "quairkit.database.random.haar_unitary": [[17, 2, 2, 0, "dim", "Dimension of the unitary."]], "quairkit.database.random.random_channel": [[17, 2, 2, 0, "num_systems", "Number of systems."], [17, 2, 2, 0, "rank", "Rank of this channel."], [17, 2, 2, 0, "size", "Batch size."], [17, 2, 2, 0, "system_dim", "Dimension of systems."], [17, 2, 2, 0, "target", "Target representation; should be 'choi', 'kraus' or 'stinespring'."]], "quairkit.database.random.random_clifford": [[17, 2, 2, 0, "num_qubits", "The number of qubits (n)."]], "quairkit.database.random.random_density_matrix": [[17, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random.random_hamiltonian_generator": [[17, 2, 2, 0, "num_qubits", "Number of qubits."], [17, 2, 2, 0, "terms", "Number of terms in the Hamiltonian."]], "quairkit.database.random.random_hermitian": [[17, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random.random_orthogonal_projection": [[17, 2, 2, 0, "num_systems", "Number of systems."], [17, 2, 2, 0, "size", "Number of projectors."], [17, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_pauli_str_generator": [[17, 2, 2, 0, "num_qubits", "Number of qubits."], [17, 2, 2, 0, "terms", "Number of terms in the observable."]], "quairkit.database.random.random_projector": [[17, 2, 2, 0, "num_systems", "Number of systems."], [17, 2, 2, 0, "size", "Number of projectors."], [17, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_state": [[17, 2, 2, 0, "is_real", "If the quantum state only contains real numbers."], [17, 2, 2, 0, "num_systems", "The number of qubits contained in the quantum state."], [17, 2, 2, 0, "rank", "The rank of the density matrix."], [17, 2, 2, 0, "size", "Batch size."], [17, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_unitary": [[17, 2, 2, 0, "num_systems", "Number of systems in this unitary (alias of num_qubits)."], [17, 2, 2, 0, "size", "Batch size."], [17, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_unitary_hermitian": [[17, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random.random_unitary_with_hermitian_block": [[17, 2, 2, 0, "is_unitary", "Whether the Hermitian block is a unitary divided by 2 (for tutorial only)."], [17, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random_channel": [[14, 2, 2, 0, "num_systems", "Number of systems."], [14, 2, 2, 0, "rank", "Rank of this channel."], [14, 2, 2, 0, "size", "Batch size."], [14, 2, 2, 0, "system_dim", "Dimension of systems."], [14, 2, 2, 0, "target", "Target representation; should be 'choi', 'kraus' or 'stinespring'."]], "quairkit.database.random_clifford": [[14, 2, 2, 0, "num_qubits", "The number of qubits (n)."]], "quairkit.database.random_density_matrix": [[14, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random_hamiltonian_generator": [[14, 2, 2, 0, "num_qubits", "Number of qubits."], [14, 2, 2, 0, "terms", "Number of terms in the Hamiltonian."]], "quairkit.database.random_hermitian": [[14, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random_orthogonal_projection": [[14, 2, 2, 0, "num_systems", "Number of systems."], [14, 2, 2, 0, "size", "Number of projectors."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random_pauli_str_generator": [[14, 2, 2, 0, "num_qubits", "Number of qubits."], [14, 2, 2, 0, "terms", "Number of terms in the observable."]], "quairkit.database.random_projector": [[14, 2, 2, 0, "num_systems", "Number of systems."], [14, 2, 2, 0, "size", "Number of projectors."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random_state": [[14, 2, 2, 0, "is_real", "If the quantum state only contains real numbers."], [14, 2, 2, 0, "num_systems", "The number of qubits contained in the quantum state."], [14, 2, 2, 0, "rank", "The rank of the density matrix."], [14, 2, 2, 0, "size", "Batch size."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random_unitary": [[14, 2, 2, 0, "num_systems", "Number of systems in this unitary (alias of num_qubits)."], [14, 2, 2, 0, "size", "Batch size."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random_unitary_hermitian": [[14, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random_unitary_with_hermitian_block": [[14, 2, 2, 0, "is_unitary", "Whether the Hermitian block is a unitary divided by 2 (for tutorial only)."], [14, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.replacement_choi": [[14, 2, 2, 0, "sigma", "output state of this channel."]], "quairkit.database.representation": [[18, 5, 1, 0, "amplitude_damping_kraus", "Kraus representation of an amplitude damping channel with form"], [18, 5, 1, 0, "bit_flip_kraus", "Kraus representation of a bit flip channel with form"], [18, 5, 1, 0, "bit_phase_flip_kraus", "Kraus representation of a bit-phase flip channel with form"], [18, 5, 1, 0, "depolarizing_kraus", "Kraus representation of a depolarizing channel with form"], [18, 5, 1, 0, "generalized_amplitude_damping_kraus", "Kraus representation of a generalized amplitude damping channel with form"], [18, 5, 1, 0, "generalized_depolarizing_kraus", "Kraus representation of a generalized depolarizing channel with form"], [18, 5, 1, 0, "pauli_kraus", "Kraus representation of a pauli channel"], [18, 5, 1, 0, "phase_damping_kraus", "Kraus representation of a phase damping channel with form"], [18, 5, 1, 0, "phase_flip_kraus", "Kraus representation of a phase flip channel with form"], [18, 5, 1, 0, "replacement_choi", "Choi representation of a replacement channel"], [18, 5, 1, 0, "reset_kraus", "Kraus representation of a reset channel with form"], [18, 5, 1, 0, "thermal_relaxation_kraus", "Kraus representation of a thermal relaxation channel"]], "quairkit.database.representation.amplitude_damping_kraus": [[18, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.bit_flip_kraus": [[18, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.bit_phase_flip_kraus": [[18, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.depolarizing_kraus": [[18, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_amplitude_damping_kraus": [[18, 2, 2, 0, "gamma", "coefficient \\gamma."], [18, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_depolarizing_kraus": [[18, 2, 2, 0, "num_qubits", "number of qubits n of this channel."], [18, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.pauli_kraus": [[18, 2, 2, 0, "prob", "a list of three probabilities corresponding to X, Y, Z gate p."]], "quairkit.database.representation.phase_damping_kraus": [[18, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.phase_flip_kraus": [[18, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.replacement_choi": [[18, 2, 2, 0, "sigma", "output state of this channel."]], "quairkit.database.representation.reset_kraus": [[18, 2, 2, 0, "prob", "list of two probabilities of resetting to state |0\\rangle and |1\\rangle."]], "quairkit.database.representation.thermal_relaxation_kraus": [[18, 2, 2, 0, "const_t", "list of T_1 and T_2 relaxation time in microseconds."], [18, 2, 2, 0, "exec_time", "quantum gate execution time in the process of relaxation in nanoseconds."]], "quairkit.database.reset_kraus": [[14, 2, 2, 0, "prob", "list of two probabilities of resetting to state |0\\rangle and |1\\rangle."]], "quairkit.database.rx": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rx_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rxx": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rxx_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.ry": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.ry_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.ryy": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.ryy_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rz": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rz_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rzz": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.rzz_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.s_state": [[14, 2, 2, 0, "prob", "The parameter of the S-state to be generated."]], "quairkit.database.set": [[19, 5, 1, 0, "bell_basis", "Generate the Bell basis for a 2-qubit system, with each basis state accessible along the first dimension of a tensor."], [19, 5, 1, 0, "gell_mann", "Generate a set of Gell-Mann matrices for a given dimension. These matrices span the entire space of dim-by-dim matrices, and they generalize the Pauli operators when dim = 2 and the Gell-Mann operators when dim = 3."], [19, 5, 1, 0, "heisenberg_weyl", "Generate Heisenberg-Weyl operator for qudit. The Heisenberg-Weyl operators are defined as T(a,b) = e^{-(d+1) \\pi i a b/ d}Z^a X^b."], [19, 5, 1, 0, "pauli_basis", "Generate a Pauli basis."], [19, 5, 1, 0, "pauli_group", "Generate a Pauli group i.e., an unnormalized Pauli basis."], [19, 5, 1, 0, "pauli_str_basis", "Get the state basis with respect to the Pauli string."], [19, 5, 1, 0, "pauli_str_povm", "Get the povm with respect to the Pauli string."], [19, 5, 1, 0, "phase_space_point", "Generate phase space point operator for qudit."], [19, 5, 1, 0, "qft_basis", "Compute the eigenvectors (eigenbasis) of the Quantum Fourier Transform (QFT) matrix."], [19, 5, 1, 0, "std_basis", "Generate all standard basis states for a given number of qubits."]], "quairkit.database.set.gell_mann": [[19, 2, 2, 0, "dim", "a positive integer indicating the dimension."]], "quairkit.database.set.heisenberg_weyl": [[19, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.pauli_basis": [[19, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_group": [[19, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_str_basis": [[19, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.pauli_str_povm": [[19, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.phase_space_point": [[19, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.qft_basis": [[19, 2, 2, 0, "num_qubits", "Number of qubits n such that N = 2^n."]], "quairkit.database.set.std_basis": [[19, 2, 2, 0, "num_systems", "number of systems in this state."], [19, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.shift": [[14, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.shift_gate": [[14, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.state": [[20, 5, 1, 0, "bell_diagonal_state", "Generate a Bell diagonal state."], [20, 5, 1, 0, "bell_state", "Generate a Bell state."], [20, 5, 1, 0, "completely_mixed_computational", "Generate the density matrix of the completely mixed state."], [20, 5, 1, 0, "computational_state", "Generate a computational state |e_{i}\\rangle, whose i-th element is 1 and all the other elements are 0."], [20, 5, 1, 0, "ghz_state", "Generate a GHZ-state."], [20, 5, 1, 0, "isotropic_state", "Generate the isotropic state."], [20, 5, 1, 0, "one_state", "Generate a one state."], [20, 5, 1, 0, "r_state", "Generate an R-state."], [20, 5, 1, 0, "s_state", "Generate the S-state."], [20, 5, 1, 0, "w_state", "Generate a W-state."], [20, 5, 1, 0, "zero_state", "Generate a zero state."]], "quairkit.database.state.bell_diagonal_state": [[20, 2, 2, 0, "prob", "The probability of each Bell state."]], "quairkit.database.state.bell_state": [[20, 2, 2, 0, "num_systems", "Number of systems in this state."], [20, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.state.completely_mixed_computational": [[20, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state.computational_state": [[20, 2, 2, 0, "index", "Index i of the computational basis state |e_{i}\\rangle."], [20, 2, 2, 0, "num_systems", "Number of systems in this state."], [20, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.state.ghz_state": [[20, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state.isotropic_state": [[20, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."], [20, 2, 2, 0, "prob", "The parameter of the isotropic state to be generated."]], "quairkit.database.state.one_state": [[20, 2, 2, 0, "num_systems", "Number of systems in this state."], [20, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.state.r_state": [[20, 2, 2, 0, "prob", "The parameter of the R-state to be generated."]], "quairkit.database.state.s_state": [[20, 2, 2, 0, "prob", "The parameter of the S-state to be generated."]], "quairkit.database.state.w_state": [[20, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state.zero_state": [[20, 2, 2, 0, "num_systems", "Number of systems in this state."], [20, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.std_basis": [[14, 2, 2, 0, "num_systems", "number of systems in this state."], [14, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.thermal_relaxation_kraus": [[14, 2, 2, 0, "const_t", "list of T_1 and T_2 relaxation time in microseconds."], [14, 2, 2, 0, "exec_time", "quantum gate execution time in the process of relaxation in nanoseconds."]], "quairkit.database.u3": [[14, 2, 2, 0, "theta", "the (batched) parameters, with shape [3, 1]."]], "quairkit.database.u3_gate": [[14, 2, 2, 0, "theta", "the (batched) parameters, with shape [3, 1]."]], "quairkit.database.universal2": [[14, 2, 2, 0, "theta", "the (batched) parameter with shape [15]."]], "quairkit.database.universal2_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter with shape [15]."]], "quairkit.database.universal3": [[14, 2, 2, 0, "theta", "the (batched) parameter with shape [81]."]], "quairkit.database.universal3_gate": [[14, 2, 2, 0, "theta", "the (batched) parameter with shape [81]."]], "quairkit.database.universal_qudit": [[14, 2, 2, 0, "dimension", "the dimension of the qudit."], [14, 2, 2, 0, "theta", "the (batched) parameter with shape [dimension**2 - 1]."]], "quairkit.database.w_state": [[14, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.xy_hamiltonian": [[14, 2, 2, 0, "edges", "A tensor E shape=[2, V, V], where E[0][u][v] is alpha_{uv} and E[1][u][v] is beta_{uv}."]], "quairkit.database.zero_state": [[14, 2, 2, 0, "num_systems", "Number of systems in this state."], [14, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.loss": [[21, 1, 1, 0, "ExpecVal", "The class of the loss function to compute the expectation value for the observable."], [21, 1, 1, 0, "Measure", "Compute the probability of the specified measurement result."], [21, 1, 1, 0, "StateFidelity", "The class of the loss function to compute the state fidelity."], [21, 1, 1, 0, "TraceDistance", "The class of the loss function to compute the trace distance."], [22, 0, 0, 1, "distance", ""], [23, 0, 0, 1, "measure", ""]], "quairkit.loss.ExpecVal": [[21, 4, 1, 0, "forward", "Compute the expectation value of the observable with respect to the input state."]], "quairkit.loss.ExpecVal.__init__": [[21, 2, 2, 0, "hamiltonian", "The input observable."]], "quairkit.loss.ExpecVal.forward": [[21, 2, 2, 0, "decompose", "Defaults to False."], [21, 2, 2, 0, "shots", "The number of shots to measure the observable."], [21, 2, 2, 0, "state", "The input state which will be used to compute the expectation value."]], "quairkit.loss.Measure": [[21, 4, 1, 0, "forward", "Compute the probability of measurement to the input state."]], "quairkit.loss.Measure.__init__": [[21, 2, 2, 0, "measure_op", "Specify the basis of the measurement."]], "quairkit.loss.Measure.forward": [[21, 2, 2, 0, "desired_result", "Specify the results of the measurement to return."], [21, 2, 2, 0, "keep_state", "Whether return the measured state."], [21, 2, 2, 0, "shots", "The number of shots for the measurement."], [21, 2, 2, 0, "state", "The quantum state to be measured."], [21, 2, 2, 0, "system_idx", "The index of the systems to be measured."]], "quairkit.loss.StateFidelity": [[21, 4, 1, 0, "forward", "Compute the state fidelity between the input state and the target state."]], "quairkit.loss.StateFidelity.__init__": [[21, 2, 2, 0, "target_state", "The target state to be used to compute the state fidelity."]], "quairkit.loss.StateFidelity.forward": [[21, 2, 2, 0, "state", "The input state which will be used to compute the state fidelity with the target state."]], "quairkit.loss.TraceDistance": [[21, 4, 1, 0, "forward", "Compute the trace distance between the input state and the target state."]], "quairkit.loss.TraceDistance.__init__": [[21, 2, 2, 0, "target_state", "The target state to be used to compute the trace distance."]], "quairkit.loss.TraceDistance.forward": [[21, 2, 2, 0, "state", "The input state which will be used to compute the trace distance with the target state."]], "quairkit.loss.distance": [[22, 1, 1, 0, "StateFidelity", "The class of the loss function to compute the state fidelity."], [22, 1, 1, 0, "TraceDistance", "The class of the loss function to compute the trace distance."]], "quairkit.loss.distance.StateFidelity": [[22, 4, 1, 0, "forward", "Compute the state fidelity between the input state and the target state."]], "quairkit.loss.distance.StateFidelity.__init__": [[22, 2, 2, 0, "target_state", "The target state to be used to compute the state fidelity."]], "quairkit.loss.distance.StateFidelity.forward": [[22, 2, 2, 0, "state", "The input state which will be used to compute the state fidelity with the target state."]], "quairkit.loss.distance.TraceDistance": [[22, 4, 1, 0, "forward", "Compute the trace distance between the input state and the target state."]], "quairkit.loss.distance.TraceDistance.__init__": [[22, 2, 2, 0, "target_state", "The target state to be used to compute the trace distance."]], "quairkit.loss.distance.TraceDistance.forward": [[22, 2, 2, 0, "state", "The input state which will be used to compute the trace distance with the target state."]], "quairkit.loss.measure": [[23, 1, 1, 0, "ExpecVal", "The class of the loss function to compute the expectation value for the observable."], [23, 1, 1, 0, "Measure", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.ExpecVal": [[23, 4, 1, 0, "forward", "Compute the expectation value of the observable with respect to the input state."]], "quairkit.loss.measure.ExpecVal.__init__": [[23, 2, 2, 0, "hamiltonian", "The input observable."]], "quairkit.loss.measure.ExpecVal.forward": [[23, 2, 2, 0, "decompose", "Defaults to False."], [23, 2, 2, 0, "shots", "The number of shots to measure the observable."], [23, 2, 2, 0, "state", "The input state which will be used to compute the expectation value."]], "quairkit.loss.measure.Measure": [[23, 4, 1, 0, "forward", "Compute the probability of measurement to the input state."]], "quairkit.loss.measure.Measure.__init__": [[23, 2, 2, 0, "measure_op", "Specify the basis of the measurement."]], "quairkit.loss.measure.Measure.forward": [[23, 2, 2, 0, "desired_result", "Specify the results of the measurement to return."], [23, 2, 2, 0, "keep_state", "Whether return the measured state."], [23, 2, 2, 0, "shots", "The number of shots for the measurement."], [23, 2, 2, 0, "state", "The quantum state to be measured."], [23, 2, 2, 0, "system_idx", "The index of the systems to be measured."]], "quairkit.operator": [[25, 0, 0, 1, "channel", ""], [29, 0, 0, 1, "gate", ""], [36, 0, 0, 1, "special", ""]], "quairkit.operator.channel": [[26, 0, 0, 1, "base", ""], [27, 0, 0, 1, "common", ""], [28, 0, 0, 1, "custom", ""]], "quairkit.operator.channel.base": [[26, 1, 1, 0, "Channel", "Basic class for quantum channels."]], "quairkit.operator.channel.base.Channel": [[26, 3, 1, 0, "choi_repr", "Choi representation of a channel"], [26, 3, 1, 0, "dim", "Dimension of the input/output system of this channel"], [26, 3, 1, 0, "info", "Information of this channel"], [26, 3, 1, 0, "kraus_repr", "Kraus representation of a channel"], [26, 3, 1, 0, "stinespring_repr", "Stinespring representation of a channel"]], "quairkit.operator.channel.base.Channel.__init__": [[26, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [26, 2, 2, 0, "channel_info", "additional information of this channel."], [26, 2, 2, 0, "check_legality", "whether check the completeness of the representation if provided."], [26, 2, 2, 0, "representation", "the representation of this channel."], [26, 2, 2, 0, "system_idx", "indices of the system on which this channel acts on."], [26, 2, 2, 0, "type_repr", "type of a representation, should be 'choi', 'kraus', 'stinespring' or 'gate'."]], "quairkit.operator.channel.common": [[27, 1, 1, 0, "AmplitudeDamping", "A collection of amplitude damping channels."], [27, 1, 1, 0, "BitFlip", "A collection of bit flip channels."], [27, 1, 1, 0, "BitPhaseFlip", "A collection of bit phase flip channels."], [27, 1, 1, 0, "Depolarizing", "A collection of depolarizing channels."], [27, 1, 1, 0, "GeneralizedAmplitudeDamping", "A collection of generalized amplitude damping channels."], [27, 1, 1, 0, "GeneralizedDepolarizing", "A generalized depolarizing channel."], [27, 1, 1, 0, "PauliChannel", "A collection of Pauli channels."], [27, 1, 1, 0, "PhaseDamping", "A collection of phase damping channels."], [27, 1, 1, 0, "PhaseFlip", "A collection of phase flip channels."], [27, 1, 1, 0, "ReplacementChannel", "A collection of quantum replacement channels."], [27, 1, 1, 0, "ResetChannel", "A collection of reset channels."], [27, 1, 1, 0, "ThermalRelaxation", "A collection of thermal relaxation channels."]], "quairkit.operator.channel.common.AmplitudeDamping.__init__": [[27, 2, 2, 0, "gamma", "Damping probability."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitFlip.__init__": [[27, 2, 2, 0, "prob", "Probability of a bit flip."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitPhaseFlip.__init__": [[27, 2, 2, 0, "prob", "Probability of a bit phase flip."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.Depolarizing.__init__": [[27, 2, 2, 0, "prob", "Parameter of the depolarizing channels."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedAmplitudeDamping.__init__": [[27, 2, 2, 0, "gamma", "Damping probability."], [27, 2, 2, 0, "prob", "Excitation probability."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedDepolarizing.__init__": [[27, 2, 2, 0, "num_qubits", "Total number of qubits."], [27, 2, 2, 0, "prob", "probability p."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."]], "quairkit.operator.channel.common.PauliChannel.__init__": [[27, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseDamping.__init__": [[27, 2, 2, 0, "gamma", "Parameter of the phase damping channels."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseFlip.__init__": [[27, 2, 2, 0, "prob", "Probability of a phase flip."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ReplacementChannel.__init__": [[27, 2, 2, 0, "sigma", "The state to be replaced."], [27, 2, 2, 0, "system_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to list(range(# of acted qubits))."]], "quairkit.operator.channel.common.ResetChannel.__init__": [[27, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ThermalRelaxation.__init__": [[27, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [27, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [27, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.custom": [[28, 1, 1, 0, "ChoiRepr", "A custom channel in Choi representation."], [28, 1, 1, 0, "KrausRepr", "A custom channel in Kraus representation."], [28, 1, 1, 0, "StinespringRepr", "A custom channel in Stinespring representation."]], "quairkit.operator.channel.custom.ChoiRepr.__init__": [[28, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [28, 2, 2, 0, "choi_repr", "Choi operator of this channel."], [28, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.channel.custom.KrausRepr.__init__": [[28, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [28, 2, 2, 0, "kraus_repr", "list of Kraus operators of this channel."], [28, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.channel.custom.StinespringRepr.__init__": [[28, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [28, 2, 2, 0, "stinespring_mat", "Stinespring matrix that represents this channel."], [28, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.gate": [[30, 0, 0, 1, "base", ""], [31, 0, 0, 1, "custom", ""], [33, 0, 0, 1, "multi_qubit_gate", ""], [34, 0, 0, 1, "single_qubit_gate", ""], [35, 0, 0, 1, "visual", ""]], "quairkit.operator.gate.base": [[30, 1, 1, 0, "Gate", "Base class for quantum gates."], [30, 1, 1, 0, "ParamGate", "Base class for quantum parameterized gates."]], "quairkit.operator.gate.base.Gate": [[30, 4, 1, 0, "dagger", "Change the dagger and tex info and system_idx of this gate. No changes will be made for some hermitian gates."], [30, 4, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [30, 3, 1, 0, "info", "Information of this gate."], [30, 3, 1, 0, "matrix", "Unitary matrix of this gate"]], "quairkit.operator.gate.base.Gate.__init__": [[30, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [30, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [30, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [30, 2, 2, 0, "matrix", "the matrix of this gate."], [30, 2, 2, 0, "system_idx", "indices of the systems that this gate acts on."]], "quairkit.operator.gate.base.Gate.display_in_circuit": [[30, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [30, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.base.ParamGate": [[30, 4, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [30, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.base.ParamGate.__init__": [[30, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [30, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [30, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [30, 2, 2, 0, "generator", "function that generates the unitary matrix of this gate."], [30, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [30, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [30, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [30, 2, 2, 0, "support_batch", "whether generator support batch inputs."], [30, 2, 2, 0, "system_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.base.ParamGate.display_in_circuit": [[30, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [30, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.custom": [[31, 1, 1, 0, "ControlOracle", "A controlled oracle as a gate."], [31, 1, 1, 0, "ControlParamOracle", "An parameterized oracle as a gate"], [31, 1, 1, 0, "Oracle", "An oracle as a gate."], [31, 1, 1, 0, "ParamOracle", "An parameterized oracle as a gate"], [31, 1, 1, 0, "Permutation", "permutation matrix as a gate."], [31, 1, 1, 0, "UniversalQudits", "A collection of universal qudit gates. One of such a gate requires d^2 - 1 parameters."]], "quairkit.operator.gate.custom.ControlOracle": [[31, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.custom.ControlOracle.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [31, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [31, 2, 2, 0, "index", "control index that activates the matrix."], [31, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [31, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.ControlParamOracle.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [31, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [31, 2, 2, 0, "generator", "function that generates the oracle."], [31, 2, 2, 0, "index", "control index that activates the matrix."], [31, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [31, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [31, 2, 2, 0, "support_batch", "whether the generator supports batched input."], [31, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.Oracle": [[31, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.custom.Oracle.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [31, 2, 2, "quairkit.operator.gate.custom.Oracle", "gate_info", "An oracle as a gate."], [31, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [31, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.ParamOracle.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [31, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [31, 2, 2, 0, "generator", "function that generates the oracle."], [31, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [31, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [31, 2, 2, 0, "support_batch", "whether the generator supports batched input."], [31, 2, 2, 0, "system_idx", "indices of the system on which this gate acts on."]], "quairkit.operator.gate.custom.Permutation": [[31, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.custom.Permutation.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [31, 2, 2, 0, "perm", "A list representing the permutation of subsystems. For example, [1, 0, 2] swaps the first two subsystems."], [31, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.UniversalQudits.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [31, 2, 2, 0, "param", "Parameters of the gates."], [31, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [31, 2, 2, 0, "system_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate": [[33, 1, 1, 0, "CCX", "A collection of CCX (Toffoli) gates."], [33, 1, 1, 0, "CNOT", "A collection of CNOT gates."], [33, 1, 1, 0, "CP", "A collection of controlled P gates."], [33, 1, 1, 0, "CRX", "A collection of controlled rotation gates about the x-axis."], [33, 1, 1, 0, "CRY", "A collection of controlled rotation gates about the y-axis."], [33, 1, 1, 0, "CRZ", "A collection of controlled rotation gates about the z-axis."], [33, 1, 1, 0, "CSWAP", "A collection of CSWAP (Fredkin) gates."], [33, 1, 1, 0, "CU", "A collection of controlled single-qubit rotation gates."], [33, 7, 1, 0, "CX", "alias of CNOT"], [33, 1, 1, 0, "CY", "A collection of controlled Y gates."], [33, 1, 1, 0, "CZ", "A collection of controlled Z gates."], [33, 1, 1, 0, "MS", "A collection of M\u00f8lmer-S\u00f8rensen (MS) gates for trapped ion devices."], [33, 1, 1, 0, "RXX", "A collection of RXX gates."], [33, 1, 1, 0, "RYY", "A collection of RYY gates."], [33, 1, 1, 0, "RZZ", "A collection of RZZ gates."], [33, 1, 1, 0, "SWAP", "A collection of SWAP gates."], [33, 7, 1, 0, "Toffoli", "alias of CCX"]], "quairkit.operator.gate.multi_qubit_gate.CCX.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CNOT.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CP.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRX.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRY.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRZ.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CSWAP.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CU.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CY.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CZ.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.MS.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RXX.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RYY.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RZZ.__init__": [[33, 2, 2, 0, "param", "Parameters of the gates."], [33, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.SWAP.__init__": [[33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate": [[34, 1, 1, 0, "H", "A collection of single-qubit Hadamard gates."], [34, 1, 1, 0, "P", "A collection of single-qubit P gates."], [34, 1, 1, 0, "RX", "A collection of single-qubit rotation gates about the x-axis."], [34, 1, 1, 0, "RY", "A collection of single-qubit rotation gates about the y-axis."], [34, 1, 1, 0, "RZ", "A collection of single-qubit rotation gates about the z-axis."], [34, 1, 1, 0, "S", "A collection of single-qubit S gates."], [34, 1, 1, 0, "Sdg", "A collection of single-qubit S dagger (S inverse) gates."], [34, 1, 1, 0, "T", "A collection of single-qubit T gates."], [34, 1, 1, 0, "Tdg", "A collection of single-qubit T dagger (T inverse) gates."], [34, 1, 1, 0, "U3", "A collection of single-qubit rotation gates."], [34, 1, 1, 0, "X", "A collection of single-qubit X gates."], [34, 1, 1, 0, "Y", "A collection of single-qubit Y gates."], [34, 1, 1, 0, "Z", "A collection of single-qubit Z gates."]], "quairkit.operator.gate.single_qubit_gate.H.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.P.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RX.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RY.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RZ.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.S.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Sdg.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.T.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Tdg.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.U3.__init__": [[34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.X.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Y.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Z.__init__": [[34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.visual": [[35, 5, 1, 0, "get_circuit_plot_param", "The output function of __CIRCUIT_PLOT_PARAM dictionary"], [35, 5, 1, 0, "reset_circuit_plot_param", "The reset function of __CIRCUIT_PLOT_PARAM dictionary"], [35, 5, 1, 0, "scale_circuit_plot_param", "The scale function of __CIRCUIT_PLOT_PARAM dictionary"], [35, 5, 1, 0, "set_circuit_plot_param", "The set function of __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.gate.visual.scale_circuit_plot_param": [[35, 2, 2, 0, "scale", "the scalar for scaling the elements in the figure"]], "quairkit.operator.gate.visual.set_circuit_plot_param": [[35, 2, 2, 0, "kwargs", "parameters to update the __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.special": [[36, 1, 1, 0, "Collapse", "The class to compute the collapse of the quantum state."], [36, 1, 1, 0, "OneWayLOCC", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [36, 1, 1, 0, "QuasiOperation", "A quantum protocol containing quasi-operations."], [36, 1, 1, 0, "ResetState", "The class to reset the quantum state."]], "quairkit.operator.special.Collapse": [[36, 4, 1, 0, "forward", "Compute the collapse of the input state."], [36, 3, 1, 0, "info", "Information of this channel"]], "quairkit.operator.special.Collapse.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [36, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [36, 2, 2, 0, "measure_op", "The measurement operators of the measurement."], [36, 2, 2, 0, "system_idx", "list of systems to be collapsed."]], "quairkit.operator.special.Collapse.forward": [[36, 2, 2, 0, "state", "The input state, which will be collapsed"]], "quairkit.operator.special.OneWayLOCC": [[36, 4, 1, 0, "forward", "Compute the input state passing through the LOCC protocol."], [36, 3, 1, 0, "info", "Information of this operation"], [36, 3, 1, 0, "system_idx", "The system indices of the LOCC protocol."]], "quairkit.operator.special.OneWayLOCC.__init__": [[36, 2, 2, 0, "gate", "a batched Gate instance."], [36, 2, 2, 0, "label", "name of the measured label."], [36, 2, 2, 0, "latex_name", "latex name of the applied operator."], [36, 2, 2, "quairkit.operator.special.OneWayLOCC", "measure_dim", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [36, 2, 2, "quairkit.operator.special.OneWayLOCC", "measure_idx", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [36, 2, 2, 0, "measure_op", "The measurement operators of the measurement."]], "quairkit.operator.special.OneWayLOCC.forward": [[36, 2, 2, 0, "state", "The input state."]], "quairkit.operator.special.QuasiOperation": [[36, 4, 1, 0, "forward", "Compute the input state passing through the quasi-operation."], [36, 3, 1, 0, "info", "Information of this operation"], [36, 3, 1, 0, "probability", "The (quasi-)probability distribution of the quasi-operation."], [36, 3, 1, 0, "system_idx", "The system indices of the quasi-operation."]], "quairkit.operator.special.QuasiOperation.__init__": [[36, 2, 2, 0, "channel", "a batched Channel instance."], [36, 2, 2, 0, "prob", "a 1D (quasi-)probability distribution for the channel argument."], [36, 2, 2, 0, "probability_param", "whether the probability is parameterized."]], "quairkit.operator.special.QuasiOperation.forward": [[36, 2, 2, 0, "state", "The input state."]], "quairkit.operator.special.ResetState": [[36, 4, 1, 0, "forward", "Perform the reset operation on the input quantum state."], [36, 3, 1, 0, "info", "Information of this operation"]], "quairkit.operator.special.ResetState.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "replace_state", "the state to replace the quantum state."], [36, 2, 2, 0, "state_label", "LaTeX label of the reset state, used for printing."], [36, 2, 2, 0, "system_idx", "list of systems to be reset."]], "quairkit.operator.special.ResetState.forward": [[36, 2, 2, 0, "state", "The input quantum state to be reset."]], "quairkit.qinfo": [[37, 5, 1, 0, "NKron", "Calculate the Kronecker product of matrices."], [37, 5, 1, 0, "abs_norm", "Tool for calculation of matrix norm."], [37, 5, 1, 0, "block_enc_herm", "Generate a (qubitized) block encoding of Hermitian mat."], [37, 5, 1, 0, "channel_repr_convert", "Convert the given representation of a channel to the target implementation."], [37, 5, 1, 0, "create_choi_repr", "Create the Choi representation of a linear map with input checks."], [37, 5, 1, 0, "create_matrix", "Create a matrix representation of a linear map without needing to specify the output dimension."], [37, 5, 1, 0, "dagger", "Tool for calculation of matrix dagger."], [37, 5, 1, 0, "decomp_1qubit", "Decompose a single-qubit unitary operator into Z-Y-Z rotation angles."], [37, 5, 1, 0, "decomp_ctrl_1qubit", "Decompose a controlled single-qubit unitary operator into its components."], [37, 5, 1, 0, "diamond_norm", "Calculate the diamond norm of input."], [37, 5, 1, 0, "direct_sum", "Calculate the direct sum of A and B."], [37, 5, 1, 0, "gate_fidelity", "Calculate the fidelity between gates."], [37, 5, 1, 0, "general_state_fidelity", "Calculate the fidelity measure of two general states."], [37, 5, 1, 0, "gradient", "Compute the gradient of a given loss function with respect to its input variable."], [37, 5, 1, 0, "herm_transform", "Function transformation for a Hermitian matrix."], [37, 5, 1, 0, "hessian", "Compute the Hessian matrix of a given loss function with respect to its input variables."], [37, 5, 1, 0, "is_choi", "Support batch input."], [37, 5, 1, 0, "is_density_matrix", "Support batch input"], [37, 5, 1, 0, "is_hermitian", "Support batch input."], [37, 5, 1, 0, "is_linear", "Check if the provided function 'func' is linear."], [37, 5, 1, 0, "is_positive", "Support batch input."], [37, 5, 1, 0, "is_povm", "Check if a set of operators forms a positive operator-valued measure (POVM)."], [37, 5, 1, 0, "is_ppt", "Support batch input."], [37, 5, 1, 0, "is_projector", "Support batch input."], [37, 5, 1, 0, "is_pvm", "Check if a set of operators forms a projection-valued measure (PVM)."], [37, 5, 1, 0, "is_state_vector", "Support batch input."], [37, 5, 1, 0, "is_unitary", "Support batch input."], [37, 5, 1, 0, "kron_power", "Calculate the Kronecker product of identical matrices."], [37, 5, 1, 0, "link", "Calculate the link product of two Choi matrices of quantum channels."], [37, 5, 1, 0, "logarithmic_negativity", "Calculate the Logarithmic Negativity E_N = ||\\rho^{T_A}|| of the input quantum state."], [37, 5, 1, 0, "logm", "Calculate the logarithm of a matrix."], [37, 5, 1, 0, "mana", "Compute the mana of states or channels."], [37, 5, 1, 0, "mutual_information", "Compute the mutual information of a bipartite state."], [37, 5, 1, 0, "negativity", "Compute the Negativity N = ||\\frac{\\rho^{T_A}-1}{2}|| of the input quantum state."], [37, 5, 1, 0, "nkron", "Calculate the Kronecker product of matrices."], [37, 5, 1, 0, "p_norm", "Calculate the Schatten p-norm of a matrix."], [37, 5, 1, 0, "partial_trace", "Calculate the partial trace of the quantum state."], [37, 5, 1, 0, "partial_trace_discontiguous", "Calculate the partial trace of the quantum state with arbitrarily selected subsystem."], [37, 5, 1, 0, "partial_transpose", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [37, 5, 1, 0, "pauli_decomposition", "Decompose the matrix by the Pauli basis."], [37, 5, 1, 0, "pauli_str_convertor", "Concatenate the input observable with coefficient 1."], [37, 5, 1, 0, "permute_systems", "Permute quantum systems based on a permutation list."], [37, 5, 1, 0, "prob_sample", "Sample from a probability distribution."], [37, 5, 1, 0, "purity", "Calculate the purity of a quantum state."], [37, 5, 1, 0, "relative_entropy", "Calculate the relative entropy of two quantum states."], [37, 5, 1, 0, "schmidt_decompose", "Calculate the Schmidt decomposition of a quantum state."], [37, 5, 1, 0, "sqrtm", "Calculate the square root of a matrix."], [37, 5, 1, 0, "stab_nullity", "Tool for calculation of unitary-stabilizer nullity."], [37, 5, 1, 0, "stab_renyi", "Tool for calculation of stabilizer Renyi entropy."], [37, 5, 1, 0, "state_fidelity", "Calculate the fidelity of two quantum states, no extra square is taken."], [37, 5, 1, 0, "trace", "Return the sum along the diagonals of the tensor."], [37, 5, 1, 0, "trace_distance", "Calculate the trace distance of two quantum states."], [37, 5, 1, 0, "trace_norm", "Calculate the trace norm of a matrix."], [37, 5, 1, 0, "von_neumann_entropy", "Calculate the von Neumann entropy of a quantum state."]], "quairkit.qinfo.NKron": [[37, 2, 2, 0, "args", "Other matrices."], [37, 2, 2, 0, "matrix_1st", "The first matrix."]], "quairkit.qinfo.abs_norm": [[37, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.block_enc_herm": [[37, 2, 2, 0, "mat", "matrix to be block encoded"], [37, 2, 2, 0, "num_block_qubits", "ancilla qubits used in block encoding"]], "quairkit.qinfo.channel_repr_convert": [[37, 2, 2, 0, "representation", "Input representation."], [37, 2, 2, 0, "source", "Input form, should be 'choi', 'kraus' or 'stinespring'."], [37, 2, 2, 0, "target", "Target form, should be 'choi', 'kraus' or 'stinespring'."], [37, 2, 2, 0, "tol", "Error tolerance for the conversion from Choi, 10^{-6} by default."]], "quairkit.qinfo.create_choi_repr": [[37, 2, 2, 0, "input_dim", "The dimension of the space in which the linear map operates."], [37, 2, 2, 0, "input_dtype", "The dtype of the input."], [37, 2, 2, 0, "linear_map", "A function representing the linear map, which takes and returns a square matrix."]], "quairkit.qinfo.create_matrix": [[37, 2, 2, 0, "input_dim", "The dimension of the input space."], [37, 2, 2, 0, "input_dtype", "The dtype of the input."], [37, 2, 2, 0, "linear_map", "A function representing the linear map, which takes an input_dim-dimensional vector and returns a vector."]], "quairkit.qinfo.dagger": [[37, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.decomp_1qubit": [[37, 2, 2, 0, "return_global", "If set to True, the global phase angle alpha is also returned."], [37, 2, 2, 0, "unitary", "A batch of 2x2 unitary matrices representing single-qubit gates, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.decomp_ctrl_1qubit": [[37, 2, 2, 0, "unitary", "A 2x2 unitary matrix representing the single-qubit gate, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.diamond_norm": [[37, 2, 2, 0, "channel_repr", "A Channel or a torch.Tensor instance."], [37, 2, 2, 0, "dim_io", "The input and output dimensions."], [37, 2, 2, 0, "kwargs", "Parameters to set cvx."]], "quairkit.qinfo.direct_sum": [[37, 2, 2, 0, "A", "m \\times n matrix"], [37, 2, 2, 0, "B", "p \\times q matrix"]], "quairkit.qinfo.gate_fidelity": [[37, 2, 2, 0, "U", "Quantum gate U in matrix form."], [37, 2, 2, 0, "V", "Quantum gate V in matrix form."]], "quairkit.qinfo.general_state_fidelity": [[37, 2, 2, 0, "rho", "A subnormalized quantum state."], [37, 2, 2, 0, "sigma", "A subnormalized quantum state."]], "quairkit.qinfo.gradient": [[37, 2, 2, 0, "loss_function", "A loss function to compute the gradient."], [37, 2, 2, 0, "n", "The number of iterations for gradient computation."], [37, 2, 2, 0, "var", "A vector of shape (m, 1) as the input variables for the loss function."]], "quairkit.qinfo.herm_transform": [[37, 2, 2, 0, "fcn", "A function f that can be expanded by Taylor series."], [37, 2, 2, 0, "ignore_zero", "Whether to ignore eigenspaces with zero eigenvalue."], [37, 2, 2, 0, "mat", "Hermitian matrix H."]], "quairkit.qinfo.hessian": [[37, 2, 2, 0, "loss_function", "The loss function to compute the Hessian."], [37, 2, 2, 0, "var", "A matrix of shape (n, m) as input variables for the loss function."]], "quairkit.qinfo.is_choi": [[37, 2, 2, 0, "op", "matrix form of the linear operation."]], "quairkit.qinfo.is_density_matrix": [[37, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [37, 2, 2, 0, "rho", "density matrix candidate"]], "quairkit.qinfo.is_hermitian": [[37, 2, 2, 0, "eps", "tolerance of error"], [37, 2, 2, 0, "mat", "hermitian candidate P"]], "quairkit.qinfo.is_linear": [[37, 2, 2, 0, "eps", "An optional tolerance value used to determine if the function's behavior is close enough to linear."], [37, 2, 2, 0, "func", "A callable function to be tested."], [37, 2, 2, 0, "info", "A parameter specifying the shape of the input for 'func'."], [37, 2, 2, "quairkit.qinfo.is_linear", "input_dtype", "Check if the provided function 'func' is linear."]], "quairkit.qinfo.is_positive": [[37, 2, 2, 0, "eps", "tolerance of error"], [37, 2, 2, 0, "mat", "positive operator candidate P"]], "quairkit.qinfo.is_povm": [[37, 2, 2, 0, "eps", "An optional tolerance value."], [37, 2, 2, 0, "set_op", "A set of operators indexed by the first dimension"]], "quairkit.qinfo.is_ppt": [[37, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.is_projector": [[37, 2, 2, 0, "eps", "tolerance of error"], [37, 2, 2, 0, "mat", "projector candidate P"]], "quairkit.qinfo.is_pvm": [[37, 2, 2, 0, "eps", "An optional tolerance value."], [37, 2, 2, 0, "set_op", "A set of operators indexed by the first dimension"]], "quairkit.qinfo.is_state_vector": [[37, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [37, 2, 2, 0, "vec", "state vector candidate x"]], "quairkit.qinfo.is_unitary": [[37, 2, 2, 0, "eps", "tolerance of error"], [37, 2, 2, 0, "mat", "unitary candidate P"]], "quairkit.qinfo.kron_power": [[37, 2, 2, 0, "matrix", "The matrix to be powered."], [37, 2, 2, 0, "n", "The number of identical matrices."]], "quairkit.qinfo.link": [[37, 2, 2, 0, "JE", "Tuple containing the Choi representation of channel E, its label, input dimensions, and output dimensions."], [37, 2, 2, 0, "JF", "Tuple containing the Choi representation of channel F, its label, input dimensions, and output dimensions."]], "quairkit.qinfo.logarithmic_negativity": [[37, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.logm": [[37, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.mana": [[37, 2, 2, 0, "input_str", "\"state\" or \"channel\"."], [37, 2, 2, 0, "matrix", "Quantum state or channel, when \"channel\", it should be the choi matrix of channel."], [37, 2, 2, 0, "out_dim", "Output system dimension, only need to compute mana of channel."]], "quairkit.qinfo.mutual_information": [[37, 2, 2, 0, "dim_A", "Dimension of system A."], [37, 2, 2, 0, "dim_B", "Dimension of system B."], [37, 2, 2, 0, "state", "Input bipartite quantum state with system AB."]], "quairkit.qinfo.negativity": [[37, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.nkron": [[37, 2, 2, 0, "args", "Other matrices."], [37, 2, 2, 0, "matrix_1st", "The first matrix."]], "quairkit.qinfo.p_norm": [[37, 2, 2, 0, "mat", "matrix"], [37, 2, 2, 0, "p", "p-norm parameter"]], "quairkit.qinfo.partial_trace": [[37, 2, 2, 0, "state", "Input quantum state."], [37, 2, 2, 0, "system_dim", "The dimension of all systems."], [37, 2, 2, 0, "trace_idx", "The system indices to be traced out."]], "quairkit.qinfo.partial_trace_discontiguous": [[37, 2, 2, 0, "preserve_qubits", "Remaining qubits; if None, all qubits are preserved."], [37, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.partial_transpose": [[37, 2, 2, 0, "state", "Input quantum state."], [37, 2, 2, 0, "system_dim", "The dimension of all systems."], [37, 2, 2, 0, "transpose_idx", "The system indices to be transposed."]], "quairkit.qinfo.pauli_decomposition": [[37, 2, 2, 0, "mat", "The matrix to be decomposed."]], "quairkit.qinfo.pauli_str_convertor": [[37, 2, 2, 0, "observable", "The observable to be concatenated with coefficient 1."]], "quairkit.qinfo.permute_systems": [[37, 2, 2, 0, "perm_list", "The permutation list."], [37, 2, 2, 0, "state", "A matrix representation of a quantum state."], [37, 2, 2, 0, "system_dim", "A list of dimension sizes of each subsystem."]], "quairkit.qinfo.prob_sample": [[37, 2, 2, 0, "binary", "Whether the sampled result is recorded as binary."], [37, 2, 2, 0, "distribution", "The probability distribution."], [37, 2, 2, 0, "proportional", "Whether the counts are shown in proportion."], [37, 2, 2, 0, "shots", "The number of shots."]], "quairkit.qinfo.purity": [[37, 2, 2, 0, "rho", "Density matrix form of the quantum state."]], "quairkit.qinfo.relative_entropy": [[37, 2, 2, 0, "base", "The base of logarithm."], [37, 2, 2, 0, "rho", "Density matrix form of the quantum state."], [37, 2, 2, 0, "sigma", "Density matrix form of the quantum state."]], "quairkit.qinfo.schmidt_decompose": [[37, 2, 2, 0, "psi", "State vector form of the quantum state, with shape (2**n)."], [37, 2, 2, 0, "sys_A", "Qubit indices to be included in subsystem A."]], "quairkit.qinfo.sqrtm": [[37, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.stab_nullity": [[37, 2, 2, 0, "unitary", "A batch of unitary matrices."]], "quairkit.qinfo.stab_renyi": [[37, 2, 2, 0, "alpha", "The Renyi entropy exponent."], [37, 2, 2, 0, "density", "A batch of density matrices."]], "quairkit.qinfo.state_fidelity": [[37, 2, 2, 0, "rho", "A quantum state."], [37, 2, 2, 0, "sigma", "A quantum state."]], "quairkit.qinfo.trace": [[37, 2, 2, 0, "axis1", "The first axis for the 2-D sub-tensor."], [37, 2, 2, 0, "axis2", "The second axis for the 2-D sub-tensor."], [37, 2, 2, 0, "mat", "Input tensor from which the diagonal is taken."]], "quairkit.qinfo.trace_distance": [[37, 2, 2, 0, "rho", "A quantum state."], [37, 2, 2, 0, "sigma", "A quantum state."]], "quairkit.qinfo.trace_norm": [[37, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.von_neumann_entropy": [[37, 2, 2, 0, "base", "The base of logarithm."], [37, 2, 2, 0, "rho", "Density matrix form of the quantum state."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"], "7": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:property", "4": "py:method", "5": "py:function", "6": "py:data", "7": "py:attribute"}, "terms": {"": [2, 4, 7, 12, 14, 16, 17, 20, 27, 29, 34, 37], "0": [2, 4, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 31, 33, 34, 37], "00": [4, 14, 16, 19, 20, 21, 23], "0000": [14, 16, 17, 18, 19, 37], "0000e": [14, 16, 19], "0000j": [14, 16, 17, 18, 19, 37], "0001": [12, 37], "0010e": [14, 16], "0041j": [14, 16], "0044j": [14, 16], "0057j": [14, 16], "00633": 3, "0072": [14, 17], "0078": [14, 16], "0081": [21, 23], "0085j": [14, 17], "00j": [14, 16, 19], "01": [14, 16, 17, 37], "0100": [14, 16], "0104": [14, 16], "0112j": [14, 16], "0149j": [14, 16], "0160j": [14, 17], "0170": [14, 16], "0180": [14, 16], "0188": [14, 16], "0194j": [14, 16], "0198": [21, 23], "01j": [14, 17, 19, 37], "02": [4, 37], "02109": 27, "0224": [14, 17], "0230j": [14, 16], "0232j": [14, 16], "0251": [14, 16], "0258": [14, 18], "0270j": [14, 16], "0293": [14, 16], "0296": [14, 17], "0299j": [14, 16], "02j": 37, "03": 37, "0303j": [14, 16], "0323j": [14, 16], "0330": [14, 16], "0332j": [14, 16], "0357": [14, 17], "0384e": [14, 16], "0396j": [14, 17], "03j": [14, 17, 37], "04": 37, "0430": [14, 17], "0440j": [14, 17], "0442": [14, 16], "0447": [14, 18], "0449": [14, 16], "0455": [14, 16], "0482j": [14, 16], "0486": [14, 16], "0494j": [14, 16], "04j": 37, "05": 37, "0546": 37, "0572": 37, "0578e": [14, 17], "0598j": [14, 16], "05j": 37, "06": [4, 37], "0609050v2": [14, 17], "0630j": [14, 16], "0651j": [14, 16], "0675": [14, 16], "06j": 37, "07": 37, "0701j": [14, 16], "0720": [14, 16], "0749j": [14, 17], "0768": [21, 23], "0790": [14, 17], "0791j": [14, 16], "07j": 37, "08": [14, 16, 17], "0825": [14, 16], "0827": [14, 16], "0866j": [14, 16], "0874": [14, 16], "0876": 37, "0886j": [14, 17], "0894": [14, 16], "0894e": [14, 17], "0894j": [14, 16], "08j": 37, "09": [14, 17, 37], "0914": [14, 16], "0918j": [14, 16], "0931j": [14, 16], "0941j": [14, 16], "0947j": [14, 17], "0956": [21, 23], "09j": [14, 17], "0j": 37, "1": [2, 3, 4, 7, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 27, 30, 31, 33, 34, 37], "10": [4, 21, 23, 27, 37], "100": [14, 18], "10000000149011612": [14, 15], "1008j": [14, 16], "1017": 27, "102": 27, "1024": 37, "1030": [14, 16], "1038": [14, 17], "1052j": [14, 16], "1053": [14, 16], "10876": 3, "10j": [14, 17], "10th": [27, 37], "11": [14, 20, 21, 23, 37], "1111j": [14, 16], "1123": [14, 16], "1123e": [14, 17], "1128": [14, 17], "1135": [14, 16], "1140": [14, 16], "1148j": [14, 16], "1154j": [14, 16], "1155": [14, 16], "1162": [21, 23], "1163": [14, 17], "1177": [14, 16], "11801365595625102": [14, 17], "1185j": [14, 17], "1194j": [14, 16], "11j": [14, 17, 37], "12": [14, 17, 20], "1215e": [14, 17], "1222": [14, 16], "1232e": [14, 19], "12440505341821817": [21, 23], "1272": [14, 16], "1273": [21, 23], "12777564473712655": [14, 17], "1277j": 37, "13": 37, "1351j": [14, 16], "1356": [14, 17], "1362": [14, 17], "1387": [14, 16], "13j": [14, 17], "14": 37, "1401": [14, 16], "1404j": [14, 17], "1406": [14, 16], "1414": [14, 18], "1416": 37, "1431": [14, 16], "1433j": [14, 16], "1446j": [14, 17], "1459": [14, 16], "1473": [14, 16], "1480j": [14, 16], "1486j": [14, 16], "14j": 37, "15": [3, 4, 14, 16, 37], "1503j": [14, 16], "1504j": [14, 17], "1513": [21, 23], "1546": [14, 16], "1573j": [14, 16], "1575j": [14, 16], "1581": [14, 18], "1581j": [14, 18], "1583": [14, 17], "16": [14, 19, 37], "1624j": [14, 17], "1634j": [14, 17], "1646j": [14, 17], "1647": [14, 16], "1652": [14, 17], "1676": [21, 23], "1677j": [14, 16], "1686": [14, 16], "1692": [14, 17], "16j": [14, 16, 17, 19, 37], "17": [14, 19], "1704": [14, 17], "1706j": [14, 17], "1714": [14, 16], "1744j": [14, 16], "1748": [21, 23], "1748j": [14, 16], "1760": [14, 16], "1774j": [14, 16], "1778j": [14, 16], "17j": [14, 16, 19], "18": 37, "1804": 3, "1817j": [14, 16], "1826": [21, 23], "1841j": [14, 16], "1847j": [14, 16], "1873": [14, 17], "1873j": [14, 16], "1891": [21, 23], "18j": [14, 17], "1903": [14, 16], "1905": 3, "1913j": [14, 16], "1931j": [14, 17], "1940j": [14, 16], "1943j": [14, 16], "1966": 37, "1d": 36, "1e": 37, "1j": [4, 33], "2": [2, 4, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 28, 30, 31, 33, 34, 37], "20": 4, "2000": [14, 18], "20000000298023224": [14, 15], "2001": [14, 17], "2010": 27, "2018e": [14, 17], "2021": [14, 17], "2071": [14, 16], "2080": [14, 16], "2099": [14, 16], "21": 37, "2101": 27, "2138": [14, 16], "2146j": [14, 17], "2150j": [14, 17], "2151": [14, 16], "2180j": [14, 16], "2218": [14, 17], "2229": [21, 23], "2231j": [14, 16], "2236": [14, 18], "2236j": [14, 18], "2238": [14, 17], "2246e": [14, 16, 19], "2298": [14, 17], "2306": [14, 16], "2322": [14, 16], "2324": [14, 16], "2345": [14, 16], "2361": [14, 17], "2388e": [14, 16], "23j": 37, "24": [14, 17, 37], "2414j": [14, 17], "2424": [14, 16], "2431": [14, 16], "2459j": [14, 17], "2460e": [14, 17], "2485": [14, 16], "2489e": [14, 17], "25": [14, 20, 37], "2500": 37, "2516e": [14, 17], "2529j": 37, "2612": [14, 16], "2620": [14, 17], "2620j": 37, "2635": [14, 16], "2655j": [14, 16], "2663": [21, 23], "2665": [21, 23], "2671j": [14, 17], "2677": [14, 17], "2697j": [14, 16], "2703": [14, 16], "2711j": [14, 17], "2712": [14, 16], "2735": [14, 16], "28": [14, 17], "2800": [14, 17], "2804": [14, 17], "2806j": [14, 16], "28233465254251144": [21, 23], "2828": [14, 18], "283185307179586": 2, "2846": [21, 23], "2846j": [14, 16], "2850": [14, 17], "2854054036807161": [21, 23], "2858": [14, 16], "2869j": [14, 16], "29": [14, 17, 37], "2926j": [14, 16], "2963j": [14, 16], "2991j": [14, 16], "2n": [14, 16], "2nd": 37, "2x2": 37, "2x\u2082\u00b2": 37, "3": [4, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 23, 37], "30": [4, 14, 18], "300": [2, 4], "30000001192092896": [14, 15], "3009j": [14, 17], "3023j": [14, 17], "3033j": [14, 17], "3040j": [14, 16], "3056j": [14, 16], "3090j": [14, 16], "3118": [14, 16], "3141e": [14, 16], "3154": 37, "3156": [14, 16], "3162": [14, 18, 37], "3162j": [14, 18], "3189": [14, 17], "31j": [14, 17], "3212j": [14, 16], "3240": [14, 17], "3242": [14, 16], "3267": [14, 17], "3280j": [14, 17], "3289j": [14, 16], "3294": [14, 16], "33": [14, 17], "3312": [21, 23], "3314j": [14, 16], "3364j": [14, 17], "3369j": [14, 16], "3380": [14, 17], "3414": [14, 17], "3451j": [14, 16], "3465j": [14, 16], "3500e": [14, 17], "3538j": [14, 16], "3539j": [14, 16], "3577": 37, "3587": [14, 17], "36": 4, "3601": [14, 18], "3619j": [14, 16], "3627": [14, 17], "3635j": [14, 16], "3671": [14, 16], "37": [14, 17], "37j": [14, 17], "38": [14, 19, 20], "3811": [14, 17], "3825": [14, 16], "3827": [14, 16], "3827j": [14, 16], "3835": [14, 16], "3842e": 37, "3844j": [14, 16], "3854j": [14, 16], "3862": [14, 17], "3887": [14, 17], "3944j": [14, 17], "3959j": [14, 17], "3984j": [14, 16], "3p": [14, 18, 27], "3rd": 37, "3x": [14, 17], "3x\u2083\u00b2": 37, "4": [4, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 34, 37], "4000000059604645": [14, 15], "4003": [14, 16], "4019j": [14, 17], "4038e": [14, 17], "4106j": [14, 17], "4124": [14, 16], "4142135381698608": 37, "4142j": [14, 17], "4166": [14, 17], "4195j": [14, 16], "4229": [14, 16], "4243": [14, 18], "4251": [14, 17], "43": [14, 17], "4309": [14, 16], "4328": [14, 17], "4331": [14, 16], "4385j": [14, 16], "4451e": [14, 17], "4459": [21, 23], "4472": [14, 18], "4472j": [14, 18], "4494": 37, "45": [14, 17], "4546": [14, 17], "4563": [14, 17], "4579": [14, 17], "4602": [14, 16], "4619j": [14, 16], "4751": [14, 17], "4784": [14, 17], "4855e": [14, 17], "4864": [14, 17], "4875": [14, 17], "4886j": [14, 17], "4921": [21, 23], "4925j": [14, 17], "4954": [14, 17], "4999999701976776": 37, "4pt": 4, "5": [4, 14, 15, 16, 17, 18, 19, 20, 37], "50": [4, 14, 18], "500": 4, "5000": [14, 19, 37], "5000725984573364": 37, "5000j": [14, 19, 37], "5076": 37, "5121": [14, 17], "5136": [14, 17], "5158": [14, 16], "5167": [14, 17], "5173j": [14, 16], "5174": [14, 17], "5193e": [14, 17], "5196": [14, 17], "5253j": [14, 17], "5277": [14, 17], "5288": [14, 17], "5296j": [14, 17], "53": 37, "5321": [14, 17], "5347j": [14, 17], "5359": [14, 16], "5372j": [14, 17], "5374j": [14, 16], "5391": [14, 16], "54": 37, "5444j": [14, 17], "5454": [14, 16], "5460": [14, 16], "5477": [14, 18], "5514e": [14, 17], "55j": [14, 17], "5646j": [14, 17], "5658": [21, 22], "57": [4, 14, 17], "5703j": [14, 16], "5708": 37, "5708j": 37, "5772": 2, "5804": [14, 16], "5852j": [14, 17], "5942": [14, 17], "5y": [14, 17], "6": [2, 14, 16, 19, 37], "600": 4, "6003j": [14, 17], "6019637631250563": [14, 17], "6062": [14, 16], "6068": [14, 17], "6095j": [14, 17], "6113": [14, 17], "6178j": [14, 17], "6194e": [14, 16], "6235j": [14, 17], "6294": [14, 17], "63": [14, 17], "6310": [14, 17], "6315": [14, 17], "6316e": [14, 17], "6325": [14, 18], "6385j": [14, 17], "6464j": [14, 16], "6481j": [14, 16], "6546j": [14, 17], "6596e": [14, 16], "6603e": [14, 17], "6620": [14, 17], "67": [14, 17], "6728e": [14, 16], "6740j": [14, 17], "6790j": [14, 17], "6813": 37, "6847e": [14, 17], "6859": [14, 17], "6996": [14, 17], "699999988079071": [14, 15], "7": [14, 15, 16, 17], "7007e": [14, 17], "7008e": [14, 17], "7071": [14, 16, 17, 18, 19, 21, 22, 37], "7071067690849304": 37, "70710688829422": 37, "7071j": [14, 16, 17, 19, 37], "7090": [14, 16, 21, 22], "71": [14, 19, 20], "7121j": [14, 17], "7183": 37, "7277": [14, 17], "7283": [21, 22], "7289": [14, 17], "7298": [14, 17], "72j": [14, 17], "7333": [14, 17], "7456e": [14, 17], "7497j": [14, 17], "75": [14, 20, 37], "7500035113999476": 37, "7771": [21, 23], "7860": [14, 17], "7873e": [14, 17], "7912": [21, 22], "8": [4, 14, 16, 17, 18, 27, 37], "8000": [14, 18], "8001j": [14, 16], "8084j": [14, 17], "81": [3, 4, 14, 16, 37], "8151": [14, 16], "8185e": [14, 17], "8296": [14, 17], "83": [14, 17], "8367": [14, 18], "8370e": [14, 19], "8377j": [14, 17], "8408": [14, 17], "8485": [14, 18], "8562e": 37, "88": [14, 17], "8916j": [14, 17], "8944": [14, 18], "9": [14, 16, 17, 37], "9013e": [14, 17], "9059897222160238": [14, 17], "9104j": 37, "9134e": [14, 16], "92": [14, 19], "9239": [14, 16], "9239j": [14, 16], "9432j": 37, "9486": [14, 16], "9487": [14, 18, 37], "9618": [14, 18], "9704": [14, 17], "9908": [14, 17], "9918": 37, "9987": [14, 18], "999999761581421": 37, "A": [2, 3, 4, 7, 14, 15, 16, 17, 19, 20, 27, 28, 31, 33, 34, 36, 37], "By": 37, "For": [4, 12, 14, 16, 27, 31, 33, 37], "If": [4, 7, 12, 14, 16, 17, 19, 20, 21, 23, 37], "Ising": [14, 15], "It": [2, 14, 20, 37], "Its": [14, 20, 27, 37], "No": 30, "Of": [14, 16], "One": [3, 4, 31], "Such": [14, 17, 27], "The": [1, 2, 3, 4, 6, 7, 8, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37], "These": [14, 19], "To": 4, "_": 4, "__circuit_plot_param": 35, "ab": [3, 27, 37], "about": [4, 33, 34, 36], "abov": 4, "abs_nor": 37, "abs_norm": 37, "academ": 4, "accept": 37, "access": [14, 19], "accord": 2, "act": [2, 4, 7, 26, 27, 28, 30, 31, 36], "acted_system_dim": [26, 28, 30, 31, 36], "activ": [31, 36], "ad": [2, 4], "add": [2, 4], "add_system": 2, "addit": [4, 26], "adjust": 12, "after": 37, "algorithm": [14, 16], "alia": [4, 14, 17, 19, 20, 33], "align": [14, 15, 33, 34], "all": [2, 4, 7, 14, 16, 17, 19, 20, 21, 23, 26, 28, 30, 31, 36, 37], "allow": [12, 21, 23], "along": [14, 19, 37], "alpha": 37, "alpha_": [14, 15], "also": 37, "amplitud": [4, 14, 18, 27], "amplitude_damp": 4, "amplitude_damping_krau": [14, 18], "amplitude_encod": 4, "amplitudedamp": [25, 27], "an": [2, 4, 12, 14, 16, 17, 18, 19, 20, 26, 28, 30, 31, 37], "ancilla": 37, "angl": [4, 37], "angle_encod": 4, "ani": 35, "anniversari": 27, "anoth": 2, "ansatz": [0, 35], "answer": 2, "apostroph": 37, "append": 2, "appli": [2, 3, 4, 31, 33, 34, 36, 37], "applic": 4, "ar": [2, 4, 12, 14, 16, 18, 19, 20, 21, 23, 27, 30, 31, 33, 34, 36, 37], "arbitrarili": 37, "arg": [12, 37], "arg0": 2, "arg1": 2, "argument": [2, 36], "arrai": 37, "arxiv": [3, 14, 17, 27], "assum": [2, 14, 16, 26, 37], "automat": [7, 12], "ax": [30, 37], "axi": [4, 33, 34, 37], "axis1": 37, "axis2": 37, "b": [14, 19, 20, 37], "backend": [5, 8, 12, 14, 17, 19, 20, 21, 22, 23, 37], "backend_list": [8, 9], "base": [2, 5, 14, 16, 24, 25, 29, 37], "basi": [4, 7, 14, 16, 19, 20, 21, 23, 37], "basic": [6, 26, 30], "basic_encod": 4, "basis_encod": 4, "batch": [4, 12, 14, 16, 17, 19, 21, 22, 23, 30, 31, 36, 37], "batch_channel": [14, 17], "batch_result": [21, 22], "been": 27, "begin": [4, 14, 15, 16, 18, 27, 33, 34], "behav": 37, "behavior": [21, 23, 37], "bell": [14, 19, 20, 37], "bell_basi": [14, 19], "bell_diagonal_st": [14, 20], "bell_mana": 37, "bell_stat": [14, 20, 21, 22, 37], "belong": 37, "beta": 37, "beta_": [14, 15], "beta_k": [14, 15], "between": [12, 21, 22, 37], "bf": 4, "binari": 37, "bipartit": 37, "bit": [4, 14, 16, 18, 27], "bit_flip": 4, "bit_flip_krau": [14, 18], "bit_phase_flip": 4, "bit_phase_flip_krau": [14, 18], "bitflip": [25, 27], "bitphaseflip": [25, 27], "block": [4, 14, 17, 37], "block_enc": 37, "block_enc_herm": 37, "bmatrix": [4, 14, 16, 18, 27, 33, 34], "bool": [2, 4, 7, 14, 17, 21, 23, 26, 30, 31, 33, 34, 36, 37], "boolean": 37, "both": [21, 23], "bpf": 4, "bravyi": [14, 17], "broadcast": 12, "built": 2, "c": [4, 14, 19, 37], "c_i": 37, "calcul": [7, 12, 37], "call": 30, "callabl": [4, 14, 16, 30, 31, 37], "cambridg": 27, "can": [2, 4, 6, 7, 12, 14, 17, 19, 20, 21, 22, 23, 26, 28, 30, 31, 37], "candid": 37, "care": 12, "case": [4, 14, 17, 19, 20, 28, 30, 31, 37], "cat": 4, "caus": 37, "cbo9780511976667": 27, "ccx": [4, 14, 16, 29, 33], "ccx_gate": [14, 16], "cd": 37, "cdot": [4, 14, 16], "cfloat": [14, 16], "chang": 30, "channel": [4, 14, 17, 18, 24, 36, 37], "channel_choi": [14, 17], "channel_info": 26, "channel_krau": [14, 17], "channel_repr": 37, "channel_repr_convert": 37, "channel_stinespr": [14, 17], "check": [2, 7, 12, 26, 30, 37], "check_leg": [26, 30], "choi": [4, 14, 17, 18, 26, 28, 37], "choi_channel": 4, "choi_matrix": 37, "choi_oper": [14, 18], "choi_repr": [4, 26, 28], "choirepr": [25, 28, 37], "chuang": 27, "circuit": [0, 2, 3, 14, 17, 30, 31, 33, 35], "class": [2, 3, 4, 7, 8, 9, 12, 21, 22, 23, 26, 27, 28, 30, 31, 33, 34, 36], "classic": 6, "clifford": [14, 17], "clifford_matrix": [14, 17], "close": 37, "cnot": [3, 4, 14, 16, 29, 33], "cnot_gat": [14, 16], "co": [4, 14, 16, 33, 34], "code": [2, 4], "coeffici": [4, 7, 14, 18, 37], "collaps": [4, 24, 36], "collect": [27, 31, 33, 34], "com": 2, "common": [12, 15, 20, 24, 25], "commonli": 4, "compact": [2, 4], "complet": [14, 20, 26, 30], "completely_mixed_comput": [14, 20, 37], "complex": [3, 4], "complex128": [6, 14, 18, 37], "complex64": [4, 6, 37], "complex_block_lay": 4, "complex_entangled_lay": 4, "complexblocklay": [1, 3], "complexentangledlay": [1, 3], "compon": 37, "compos": [14, 19, 21, 23], "compress": 7, "compris": 4, "comput": [4, 14, 15, 19, 20, 21, 22, 23, 27, 36, 37], "computational_st": [14, 20], "concaten": [2, 37], "conj": 37, "consist": [3, 4], "const_t": [4, 14, 18, 27], "construct": [7, 14, 16, 37], "construct_h_matrix": 7, "contain": [1, 4, 7, 14, 17, 36, 37], "control": [4, 31, 33, 37], "control_idx": 4, "control_oracl": 4, "controlledrot": 4, "controloracl": [29, 31], "controlparamoracl": [29, 31], "convent": 37, "convers": 37, "convert": 37, "copi": 35, "copyslic": 37, "coracl": 4, "core": 0, "correct": 37, "correspond": [4, 7, 14, 18, 21, 23, 27, 37], "cos_theta": 4, "could": [7, 30], "count": 37, "cp": [4, 14, 16, 29, 33], "cp_gate": [14, 16], "cr_x": [4, 14, 16], "cr_y": [4, 14, 16], "cr_z": [4, 14, 16], "creat": [7, 37], "create_choi_repr": 37, "create_matrix": 37, "crx": [4, 14, 16, 29, 33], "crx_gate": [14, 16], "cry": [4, 14, 16, 29, 33], "cry_gat": [14, 16], "crz": [4, 14, 16, 29, 33], "crz_gate": [14, 16], "cswap": [4, 14, 16, 29, 33], "cswap_gat": [14, 16], "ctrl": 4, "cu": [4, 14, 16, 29, 33], "cu_gat": [14, 16], "cuda": 6, "current": [2, 6, 9, 27, 36, 37], "custom": [4, 21, 23, 24, 25, 29, 30], "cvx": 37, "cx": [29, 33], "cy": [4, 14, 16, 29, 33], "cy_gat": [14, 16], "cycl": 4, "cz": [4, 14, 16, 29, 33], "cz_gate": [14, 16], "d": [4, 14, 16, 17, 18, 19, 20, 27, 31, 37], "d_": 26, "dag": 37, "dagger": [2, 4, 14, 16, 30, 34, 37], "damp": [4, 14, 18, 27], "dash": 4, "data": [6, 12, 14, 17, 26, 37], "databas": [0, 21, 22, 23], "datatyp": 12, "ddot": [4, 14, 16], "decid": 7, "decim": [2, 4], "decomp_1qubit": 37, "decomp_ctrl_1qubit": 37, "decompos": [7, 21, 23, 37], "decompose_pauli_word": 7, "decompose_with_sit": 7, "decomposit": [4, 37], "def": [4, 14, 16, 37], "default": [2, 3, 4, 7, 9, 12, 14, 16, 17, 19, 20, 21, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "defaultsimul": [9, 12], "defin": [2, 14, 19, 21, 22, 23, 27, 37], "definit": 37, "delta": 37, "denot": [12, 21, 23], "densiti": [14, 17, 20, 26, 37], "density_matrix": [8, 9, 14, 17, 20, 21, 23, 37], "density_op": 37, "depend": 4, "depolar": [4, 14, 18, 25, 27], "depolarizing_choi": 37, "depolarizing_krau": [14, 18], "deprec": 4, "depth": [2, 3, 4], "desir": 36, "desired_result": [21, 23, 36], "detail": [2, 4], "determin": [7, 37], "devic": [6, 27, 33], "diagon": [14, 20, 37], "diagram": 4, "diamond": 37, "diamond_norm": 37, "dict": [9, 21, 23, 26, 30, 31, 35, 37], "dictionari": [35, 37], "differ": [7, 37], "dim": [4, 14, 16, 17, 19, 26, 37], "dim_a": 37, "dim_b": 37, "dim_in": 37, "dim_io": 37, "dim_out": 37, "dimens": [2, 4, 12, 14, 16, 17, 19, 20, 21, 23, 26, 28, 30, 31, 36, 37], "dimension": [14, 16, 37], "dir_sum": 37, "direct": 37, "direct_sum": 37, "disabl": 12, "displai": [2, 4, 30, 35], "display_in_circuit": 30, "dist": 37, "distanc": [21, 37], "distribut": [4, 12, 21, 23, 36, 37], "divid": [14, 17], "dmitri": [14, 17], "dn": 37, "doe": [4, 37], "doi": 27, "dot": [2, 4], "dpi": [2, 4], "draw": 4, "dtype": [4, 6, 14, 16, 18, 37], "dynam": 4, "e": [4, 7, 14, 15, 16, 19, 21, 23, 26, 30, 31, 33, 34, 37], "e_": [14, 20], "e_0": [14, 18, 27], "e_1": [14, 18, 27], "e_2": [14, 18, 27], "e_3": [14, 18, 27], "e_4": [14, 18, 27], "e_k": [14, 18, 27], "e_n": 37, "each": [2, 4, 7, 14, 16, 19, 20, 21, 23, 27, 37], "edg": [14, 15], "edit": [27, 37], "eigen": [21, 23], "eigenbasi": [14, 19], "eigenspac": 37, "eigenvalu": 37, "eigenvector": [14, 19], "eigh": 37, "either": 37, "element": [4, 7, 14, 20, 31, 35, 37], "empti": 4, "encod": [4, 14, 17, 24, 29, 37], "end": [2, 4, 14, 15, 16, 18, 27, 33, 34], "enhanc": 4, "enough": 37, "ensur": 4, "ent": 37, "entangl": [3, 4], "entir": [2, 14, 19], "entropi": 37, "ep": [12, 37], "equal": 27, "equal_dim": 2, "equat": 37, "error": [2, 37], "evolut": 4, "exampl": [4, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 31, 37], "except": [14, 20], "excit": [4, 27], "exclud": 7, "exec_tim": [4, 14, 18, 27], "execut": [4, 14, 18, 27], "exemplifi": 37, "exp": [14, 16, 37], "expand": 37, "expec_v": [21, 23], "expect": [21, 23], "expecv": [21, 23], "experi": 4, "expon": 37, "expos": [14, 17], "extend": 2, "extra": 37, "ey": [4, 14, 16, 37], "eye_g": [14, 16], "f": [4, 14, 15, 16, 17, 18, 19, 20, 21, 23, 37], "f_": 37, "fals": [2, 4, 7, 14, 17, 21, 23, 30, 31, 33, 34, 36, 37], "fcn": 37, "featur": [4, 27], "fh": 37, "fidel": [21, 22, 37], "fidelity_calcul": [21, 22], "figur": [4, 35], "file": [2, 3, 4, 22, 23, 26, 27, 28, 30, 31, 33, 34, 36], "first": [2, 4, 12, 14, 16, 19, 21, 23, 31, 33, 34, 37], "flatten": [2, 37], "flip": [4, 14, 18, 27], "float": [2, 4, 6, 7, 12, 14, 16, 18, 20, 27, 30, 31, 33, 34, 35, 37], "float64": 37, "follow": [3, 6, 7, 14, 17], "form": [2, 4, 7, 14, 16, 17, 18, 20, 30, 33, 34, 37], "format": [2, 4], "formula": 27, "forward": [2, 21, 22, 23, 36], "four": [14, 19], "fourier": [14, 16, 19], "frac": [4, 14, 16, 18, 20, 33, 34, 37], "fredkin": [4, 33], "free": [14, 17], "from": [2, 3, 4, 14, 15, 17, 19, 20, 21, 22, 23, 37], "full": [4, 14, 17, 21, 23], "fulli": 4, "func": 37, "function": [4, 5, 6, 12, 14, 16, 17, 21, 22, 23, 30, 31, 35, 37], "futur": 4, "g": [7, 14, 16, 21, 23], "gad": 4, "gamma": [4, 14, 16, 18, 27, 33, 37], "gamma_": [14, 15], "gate": [2, 3, 4, 14, 16, 18, 24, 26, 27, 36, 37], "gate_fidel": 37, "gate_info": [30, 31], "gate_nam": 4, "gategroup": 4, "gell": [14, 16, 19], "gell_mann": [14, 19], "gener": [2, 3, 4, 12, 14, 16, 17, 18, 19, 20, 27, 30, 31, 37], "general_state_fidel": 37, "generalized_amplitude_damp": 4, "generalized_amplitude_damping_krau": [14, 18], "generalized_depolar": 4, "generalized_depolarizing_krau": [14, 18], "generalizedamplitudedamp": [25, 27], "generalizeddepolar": [25, 27], "get": [2, 6, 9, 14, 19], "get_backend": [8, 9], "get_circuit_plot_param": [29, 35], "get_devic": [5, 6], "get_dtyp": [5, 6], "get_float_dtyp": [5, 6], "get_latex_nam": 2, "get_qasm": 2, "get_se": [5, 6], "ghz": [14, 20], "ghz_state": [14, 20], "ghz_state_inst": [14, 20], "give": [14, 19], "given": [4, 14, 19, 37], "global": [6, 37], "go": 0, "grad": [2, 37], "grad_fn": 37, "gradient": [2, 37], "grai": 4, "group": [14, 17, 19], "grover": [14, 16], "grover_matrix": [14, 16], "grover_op": [14, 16], "h": [4, 14, 16, 29, 34, 37], "h_": [14, 15], "h_gate": [14, 16], "h_heisenberg": [14, 15], "h_xy": [14, 15], "ha": [27, 37], "haar": [14, 17], "haar_density_oper": [14, 17], "haar_orthogon": [14, 17], "haar_state_vector": [14, 17, 37], "haar_unitari": [14, 17], "hadamard": [4, 14, 16, 17, 34, 37], "half": 37, "hamiltonian": [4, 5, 14, 17, 21, 23], "have": [2, 4, 14, 16], "he": 37, "heisenberg": [14, 15, 19], "heisenberg_hamiltonian": [14, 15], "heisenberg_weyl": [14, 19], "herm_transform": 37, "hermitian": [14, 17, 30, 37], "hessian": 37, "high": 37, "hilbert": [14, 16], "histori": [2, 30, 31], "home": 0, "horizont": 30, "http": [2, 3, 4, 27], "i": [2, 3, 4, 6, 7, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 30, 31, 33, 34, 36, 37], "i_a": 37, "i_b": 37, "ident": [4, 14, 16, 37], "identif": 37, "identity_choi": 37, "identity_map": 37, "idx": 2, "ieee": [14, 17], "if_print": [4, 36], "ignor": 37, "ignore_zero": 37, "iix": 7, "imag": [2, 4], "implement": [8, 9, 14, 17, 20, 27, 31, 37], "impli": 37, "import": [14, 15, 21, 22, 23], "inch": [2, 4], "includ": [4, 37], "include_empti": 4, "index": [2, 4, 7, 14, 19, 20, 21, 23, 31, 37], "indic": [2, 3, 4, 7, 14, 19, 21, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "individu": [14, 16], "infer": [14, 19, 20], "info": [4, 26, 30, 31, 36, 37], "inform": [2, 7, 14, 17, 26, 27, 30, 31, 36, 37], "initi": [2, 3, 9], "inner": 4, "input": [2, 4, 7, 12, 14, 16, 21, 22, 23, 26, 27, 30, 31, 36, 37], "input_batch": [21, 22], "input_dim": 37, "input_dtyp": 37, "input_st": [21, 22, 23], "input_state_batch": [21, 22, 23], "input_str": 37, "instal": 4, "instanc": [2, 4, 12, 26, 30, 36, 37], "instantan": 4, "instanti": 7, "int": [2, 3, 4, 6, 7, 12, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "integ": [4, 12, 14, 16, 19, 37], "interfac": [21, 22, 23], "invers": [4, 34], "ion": 33, "iqp": 4, "iqp_encod": 4, "is_choi": 37, "is_dens_mat": 37, "is_density_matrix": 37, "is_hermit": 37, "is_hermitian": 37, "is_lin": 37, "is_linear": 37, "is_po": 37, "is_posit": 37, "is_pov": 37, "is_povm": 37, "is_ppt": 37, "is_proj": 37, "is_projector": 37, "is_pt": 37, "is_pv": 37, "is_pvm": 37, "is_real": [14, 17], "is_st_vec": 37, "is_state_vector": 37, "is_unit": 37, "is_unitari": [14, 17, 37], "ischoi": 37, "ising_hamiltonian": [14, 15], "isometri": 37, "isotrop": [14, 20], "isotropic_st": [14, 20], "isotropic_state_inst": [14, 20], "item": 7, "iter": [2, 4, 7, 14, 16, 18, 21, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "its": [14, 17, 37], "j": [14, 16, 17, 18, 19, 20, 21, 23, 37], "j_result": 37, "je": 37, "jf": 37, "just": 2, "k": [14, 15, 18, 27, 37], "k0": 37, "k1": 37, "keep_stat": [21, 23], "ket": 4, "kp": 37, "krau": [4, 14, 17, 18, 26, 27, 28, 37], "kraus_channel": 4, "kraus_op": [4, 37], "kraus_oper": [14, 18], "kraus_repr": [26, 28], "krausrepr": [25, 28], "kron": [4, 37], "kron_pow": 37, "kroneck": [12, 37], "kwarg": [4, 35, 37], "l": [27, 37], "label": [4, 36, 37], "lambda": [4, 14, 16, 33, 34], "langl": [4, 14, 16, 20, 33], "langle0": [14, 16], "langle00": [14, 20], "langle1": [14, 16], "langle11": [14, 20], "largest": 2, "latex": [2, 4, 36], "latex_nam": [4, 36], "layer": [1, 2, 4, 31, 33, 34], "le": 27, "least": 12, "left": [14, 16, 17, 20], "legal": 37, "legitimaci": 7, "length": [12, 14, 16, 27], "less": 27, "letter": 37, "lgm": 37, "librari": [14, 15, 17, 20, 37], "like": [2, 4], "linalg": 12, "line": 4, "linear": [3, 4, 37], "linear_entangled_lay": 4, "linear_map": 37, "linearentangledlay": [1, 3], "link": 37, "linspac": [14, 16], "list": [2, 3, 4, 7, 12, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 28, 30, 31, 36, 37], "list_unitari": 4, "live": 4, "local": 4, "local_unitari": 4, "locc": [4, 36], "log": 37, "log_": 37, "log_neg": 37, "logarithm": 37, "logarithmic_neg": 37, "logic": [2, 4, 27], "logm": 37, "loss": [0, 37], "loss_funct": 37, "lowercas": 37, "lstick": 4, "lvert": 37, "m": [4, 14, 16, 27, 29, 33, 36, 37], "made": 30, "mai": 37, "make": [21, 22, 23], "mana": 37, "mana_chan": 37, "mann": [14, 16, 19], "map": 37, "maslov": [14, 17], "mat": 37, "mat_repr": 37, "match": 37, "math": [14, 17, 37], "mathbb": [14, 19], "mathcal": 4, "mathemat": 3, "mathit": 4, "matplotlib": [4, 30], "matric": [7, 14, 16, 19, 37], "matrix": [2, 3, 4, 7, 14, 17, 19, 20, 26, 28, 30, 31, 33, 34, 37], "matrix_1st": 37, "max_mix": 37, "maxim": 37, "maximum": 2, "mean": [2, 12, 21, 23, 36], "measur": [2, 4, 14, 17, 21, 36, 37], "measure_basi": 4, "measure_dim": 36, "measure_idx": 36, "measure_op": [21, 23, 36], "merg": 7, "meter": 4, "method": 2, "mi": 37, "microsecond": [14, 18, 27], "mix": [14, 20, 37], "mixtur": 27, "mode": 26, "model": 36, "modul": [1, 2, 6, 7, 8, 9, 21, 24, 25, 29], "more": 37, "ms_gate": [14, 16], "multi": 33, "multi_qubit_g": [24, 29], "multipl": [21, 23], "must": [27, 33, 34, 37], "mutual": 37, "mutual_inform": 37, "m\u00f8lmer": [4, 33], "n": [4, 14, 15, 16, 17, 18, 19, 20, 21, 23, 27, 37], "n_qubit": 7, "n_term": 7, "name": [2, 4, 6, 9, 12, 36], "nanosecond": [14, 18, 27], "natur": 37, "ndarrai": [2, 7, 12, 14, 16, 18, 37], "need": [2, 4, 12, 26, 30, 37], "neg": 37, "neumann": 37, "new": 2, "new_physical_idx": 2, "new_system_dim": 2, "niel": 2, "nielsen": 27, "nkron": [12, 37], "noisi": 26, "non": 37, "none": [2, 3, 4, 6, 7, 9, 12, 14, 16, 17, 19, 20, 21, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "norm": 37, "normal": [2, 4, 14, 17], "notimplementederror": [14, 17, 20, 21, 22, 23, 26, 37], "now": 4, "nulliti": 37, "num_acted_param": [4, 30, 31], "num_acted_qubit": 30, "num_acted_system": 2, "num_block_qubit": 37, "num_new_system": 2, "num_qubit": [2, 4, 14, 16, 17, 18, 19, 20, 21, 23, 27], "num_qutrit": 2, "num_step": 4, "num_system": [2, 4, 14, 17, 19, 20, 21, 22, 23], "number": [2, 3, 4, 7, 12, 14, 16, 17, 18, 19, 20, 21, 23, 26, 27, 30, 31, 37], "numpi": [6, 12, 37], "o": [4, 14, 17, 36], "observ": [7, 14, 17, 19, 21, 23, 37], "obtain": 2, "occupi": 30, "octrl": 4, "of_gat": [14, 16], "omega_n": [14, 16], "omit": 2, "one": [2, 4, 14, 20, 36, 37], "one_st": [14, 20, 21, 22], "onewaylocc": [24, 36], "onli": [2, 4, 14, 17, 19, 26, 36, 37], "op": [2, 21, 23, 37], "openqasm": [2, 4], "oper": [0, 2, 4, 7, 14, 16, 18, 19, 37], "operator_histori": 2, "operator_idx": 2, "operatorinfotyp": [2, 12, 26, 30, 31, 36], "operatorlist": [1, 2], "operatornam": 4, "oplu": [14, 16], "optim": [21, 22, 23], "option": 37, "oracl": [4, 14, 16, 29, 31], "order": [2, 4, 37], "org": [3, 4, 27], "orthogon": [14, 17], "orthogonal_projector": [14, 17], "other": [2, 12, 14, 20, 37], "otherwis": [4, 37], "otim": [4, 14, 16, 17, 33, 37], "out": [26, 37], "out_dim": 37, "outcom": [4, 21, 23], "outer": 37, "output": [2, 4, 14, 18, 21, 22, 26, 35, 37], "output_plot": 4, "over": [21, 23], "overload": 30, "p": [4, 14, 16, 18, 20, 27, 29, 33, 34, 37], "p_": [14, 20], "p_gate": [14, 16], "p_matrix": [14, 16], "p_nor": 37, "p_norm": 37, "packag": 4, "pair": 4, "paper": 3, "param": [2, 3, 4, 30, 31, 33, 34], "param_locc": 4, "param_oracl": 4, "param_quasi": 4, "param_shar": [4, 30, 31, 33, 34], "paramet": [2, 3, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 33, 34, 35, 36, 37], "parameter": [4, 30, 31, 36], "paramg": [29, 30], "paramoracl": [29, 31], "partial": 37, "partial_trac": 37, "partial_trace_discontigu": 37, "partial_transpos": 37, "pass": [2, 36], "path": 4, "pauli": [4, 7, 14, 16, 18, 19, 27, 37], "pauli_basi": [14, 19], "pauli_channel": 4, "pauli_dec": 37, "pauli_decomposit": 37, "pauli_group": [14, 19], "pauli_krau": [14, 18], "pauli_str": [7, 14, 19], "pauli_str_basi": [14, 19], "pauli_str_convertor": 37, "pauli_str_povm": [14, 19], "pauli_term": 37, "pauli_word": 7, "pauli_words_matrix": 7, "pauli_words_r": 7, "paulichannel": [25, 27], "pd": 4, "pdf": 3, "per": [2, 4], "perform": [4, 36], "perm": [4, 14, 16, 31], "perm_list": 37, "permut": [4, 14, 16, 29, 31, 37], "permutation_matrix": [14, 16], "permute_system": 37, "pf": 4, "ph": [14, 17], "phase": [4, 14, 16, 18, 19, 27, 37], "phase_damp": 4, "phase_damping_krau": [14, 18], "phase_flip": 4, "phase_flip_krau": [14, 18], "phase_g": [14, 16], "phase_oper": [14, 16], "phase_space_point": [14, 19], "phasedamp": [25, 27], "phaseflip": [25, 27], "phi": [4, 14, 16, 20, 33, 34], "phi_": [14, 20], "physic": [2, 4, 37], "physical_idx": [2, 4], "pi": [2, 4, 14, 16, 19, 33, 34], "place": [2, 4, 30, 31], "pleas": [4, 27], "plot": [2, 4, 30, 31], "point": [14, 19], "polynomi": 4, "posit": [14, 19, 30, 37], "post": [4, 21, 23], "post_select": 4, "post_stat": [21, 23], "povm": [14, 19, 37], "power": [4, 37], "pp": 37, "ppt": 37, "pre": 21, "prepar": 4, "preserv": [36, 37], "preserve_qubit": 37, "press": 27, "print": [2, 4, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 36, 37], "print_cod": [2, 4], "prob": [4, 12, 14, 18, 20, 21, 23, 27, 36], "prob_list": [14, 18], "prob_sampl": 37, "probabilist": 36, "probability_param": [4, 36], "probabl": [4, 12, 14, 18, 20, 21, 23, 27, 36, 37], "problem": [14, 16], "process": [14, 18, 27], "product": [12, 37], "project": [21, 23, 37], "projector": [14, 17, 37], "proper": 37, "properti": [2, 4, 7, 26, 30, 31, 36], "proport": 37, "protocol": [4, 36], "provid": [21, 26, 30, 37], "psd": 37, "psi": [14, 20, 37], "pt": 37, "ptdi": 37, "public": 4, "pure": [14, 20], "puriti": 37, "push": 4, "pvm": [21, 23, 36, 37], "pvm_tensor": [21, 23], "q": [14, 18, 27, 37], "qasm": 4, "qasm2": 4, "qc": 4, "qft": [14, 16, 19], "qft_basi": [14, 19], "qft_gate": [14, 16], "qft_matrix": [14, 16], "qft_state": [14, 19], "qinfo": 0, "quad": [14, 16], "quadratic_loss": 37, "quantikz": 4, "quantum": [2, 3, 4, 12, 14, 16, 17, 18, 19, 20, 21, 23, 25, 26, 27, 28, 29, 30, 31, 33, 36, 37], "quantumcomput": 2, "quasi": [4, 36], "quasioper": [24, 36], "qubit": [2, 3, 4, 7, 12, 14, 16, 17, 18, 19, 20, 21, 23, 27, 28, 30, 31, 33, 34, 37], "qubit_num": 7, "qubits_idx": [3, 4, 27, 33, 34], "qudit": [4, 14, 16, 19, 31], "qutrit": [2, 12], "r": [4, 14, 20, 26, 27], "r_": [4, 14, 16], "r_state": [14, 20], "r_state_inst": [14, 20], "r_x": [4, 14, 16], "r_xx": [14, 16], "r_y": [4, 14, 16], "r_yi": [14, 16], "r_z": [4, 14, 16], "r_zz": [14, 16], "rais": [6, 14, 17, 20, 21, 22, 23, 26, 30, 33, 34, 37], "rand": 37, "random": [2, 6, 14, 30, 31, 37], "random_channel": [14, 17], "random_clifford": [14, 17], "random_density_matrix": [14, 17], "random_hamiltonian_gener": [14, 17, 21, 23], "random_hermitian": [14, 17], "random_orthogonal_project": [14, 17], "random_pauli_str_gener": [14, 17], "random_projector": [14, 17], "random_st": [14, 17, 21, 22, 23, 37], "random_unitari": [14, 17, 37], "random_unitary_hermitian": [14, 17], "random_unitary_with_hermitian_block": [14, 17], "randomize_param": 2, "randomli": [14, 17], "rang": [26, 27, 30], "rangl": [4, 14, 16, 18, 20, 27, 33, 37], "rangle_": [14, 20], "rank": [14, 17, 21, 23, 26], "real": [3, 4, 14, 17], "real_block_lay": 4, "real_entangled_lay": 4, "realblocklay": [1, 3], "realentangledlay": [1, 3], "recogn": 37, "record": 37, "refer": [2, 14, 17, 27], "referenc": [14, 17], "register_idx": 2, "rel": 37, "rel_ent": 37, "relative_entropi": 37, "relax": [4, 14, 18, 27], "remain": [31, 37], "render": 4, "renyi": 37, "replac": [2, 4, 14, 18, 27, 36], "replace_st": [4, 36], "replacement_choi": [14, 18], "replacementchannel": [25, 27], "report": 2, "repres": [2, 3, 4, 14, 16, 17, 19, 20, 26, 28, 30, 31, 37], "represent": [2, 3, 4, 12, 14, 15, 17, 26, 28, 37], "requir": [3, 4, 30, 31, 37], "requires_grad": 37, "reset": [4, 14, 18, 27, 35, 36], "reset_channel": 4, "reset_circuit_plot_param": [29, 35], "reset_krau": [14, 18], "resetchannel": [25, 27], "resetst": [24, 36], "reshap": 37, "respect": [2, 7, 14, 19, 21, 23, 37], "result": [4, 21, 22, 23, 36, 37], "retriev": [21, 23], "return": [2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 35, 36, 37], "return_glob": 37, "revers": 2, "rho": [4, 27, 37], "rho1": [14, 17], "rho2": [14, 17], "right": [14, 16, 20], "root": 37, "rotat": [3, 4, 14, 16, 33, 34, 37], "rotation_gener": 4, "run": 26, "runtimeerror": 37, "runtimewarn": 37, "rx": [4, 14, 16, 29, 33, 34], "rx_gate": [14, 16], "rxx": [4, 14, 16, 29, 33], "rxx_gate": [14, 16], "ry": [3, 4, 14, 16, 29, 33, 34], "ry_gat": [14, 16], "ryi": [4, 14, 16, 29, 33], "ryy_gat": [14, 16], "rz": [3, 4, 14, 16, 29, 33, 34], "rz_gate": [14, 16], "rzz": [4, 14, 16, 29, 33], "rzz_gate": [14, 16], "s_gate": [14, 16], "s_state": [14, 20], "s_state_inst": [14, 20], "same": [2, 4, 14, 16, 26, 30, 31, 33, 34, 37], "sampl": [2, 14, 17, 37], "satisfi": [14, 16, 27], "save": [4, 6], "save_path": 4, "scalar": 35, "scale": [4, 35], "scale_circuit_plot_param": [29, 35], "schatten": 37, "schmidt": 37, "schmidt_decompos": 37, "sdg": [4, 14, 16, 29, 34], "sdg_gate": [14, 16], "search": [14, 16], "second": [12, 37], "see": [2, 27], "seed": 6, "select": [4, 21, 23, 37], "self": [3, 4], "semi": 37, "sep": 4, "sequenc": [2, 14, 17, 19, 20, 21, 23, 37], "sequenti": 2, "sergei": [14, 17], "seri": 37, "set": [2, 4, 6, 9, 14, 30, 35, 37], "set_backend": [8, 9], "set_circuit_plot_param": [29, 35], "set_devic": [5, 6], "set_dtyp": [5, 6], "set_entangl": 4, "set_op": 37, "set_se": [5, 6], "setup": [12, 21, 23], "shape": [14, 15, 16, 19, 26, 37], "share": [4, 30, 31, 33, 34], "shift": [14, 16], "shift_gat": [14, 16], "shift_oper": [14, 16], "shot": [21, 23, 37], "should": [6, 14, 17, 20, 26, 27, 37], "show": [2, 4], "show_plot": [2, 4], "shown": 37, "sigma": [14, 18, 27, 37], "sigma_k": [14, 18, 27], "sigx_p": 7, "sigy_p": 7, "sigz_p": 7, "simon": [14, 16], "simpli": 7, "simplifi": 7, "simul": [4, 9, 27], "sin": [4, 14, 16, 33, 34], "sin_theta": 4, "singl": [3, 4, 21, 22, 30, 31, 33, 34, 37], "single_qubit_g": [24, 29], "site": 7, "size": [7, 14, 17, 19, 21, 22, 23, 37], "some": 30, "sort": 2, "sourc": [2, 3, 4, 22, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "space": [14, 16, 19, 37], "span": [14, 19], "spars": 7, "special": 24, "specif": [21, 23], "specifi": [4, 12, 14, 16, 21, 23, 26, 30, 37], "spin": 7, "spinop": [5, 7], "sqrt": [4, 14, 16, 18, 20, 27, 33, 34, 37], "sqrtm": 37, "squar": 37, "st": [14, 16, 37], "stab_nul": 37, "stab_renyi": 37, "stabil": 37, "stabilizer_renyi_entropi": 37, "stackexchang": 2, "standard": [2, 4, 14, 19], "start": [2, 4, 30], "state": [2, 4, 5, 14, 17, 18, 19, 21, 22, 23, 27, 36, 37], "state_1st": 12, "state_basi": [14, 19], "state_batch": [21, 23], "state_fidel": 37, "state_label": [4, 36], "state_vector": [8, 9, 14, 17, 19, 20, 21, 23], "statefidel": [21, 22], "stateoper": [2, 9, 14, 18, 20, 21, 23, 37], "statesimul": [2, 4, 9, 12, 14, 17, 18, 19, 20, 21, 23, 36, 37], "std_basi": [14, 19, 21, 23], "step": 4, "stine": 37, "stinespr": [4, 14, 17, 26, 28, 37], "stinespring_channel": 4, "stinespring_mat": 28, "stinespring_repr": [4, 26], "stinespringrepr": [25, 28], "stop_gradi": 2, "str": [2, 4, 6, 7, 9, 12, 14, 17, 19, 21, 23, 26, 27, 31, 33, 34, 36, 37], "string": [2, 4, 7, 14, 16, 19, 21, 23], "strongli": [3, 4], "structur": [14, 17], "style": [2, 4], "sub": [2, 37], "subnorm": 37, "subsystem": [4, 14, 16, 21, 23, 31, 37], "sum": [27, 37], "sum_": [4, 14, 15, 20], "sum_i": 37, "superconduct": 27, "support": [2, 4, 12, 21, 22, 23, 30, 31, 36, 37], "support_batch": [4, 30, 31], "surround": 3, "suzuki": 4, "swap": [4, 14, 16, 29, 31, 33, 37], "swap_gat": [14, 16], "sys_a": 37, "system": [2, 4, 7, 12, 14, 16, 17, 19, 20, 21, 23, 26, 28, 30, 31, 36, 37], "system_dim": [2, 4, 12, 14, 16, 17, 19, 20, 37], "system_idx": [2, 4, 21, 23, 26, 27, 28, 30, 31, 36], "s\u00f8rensen": [4, 33], "t": [4, 14, 16, 19, 29, 34, 37], "t1": 4, "t2": 4, "t_1": [14, 18, 27], "t_2": [14, 18, 27], "t_a": 37, "t_gate": [14, 16], "take": [2, 37], "taken": 37, "targ": 4, "target": [14, 17, 21, 22, 23, 37], "target_batch": [21, 22], "target_st": [21, 22], "target_state_batch": [21, 22], "taylor": 37, "tdg": [4, 14, 16, 29, 34], "tdg_gate": [14, 16], "templat": 3, "tensor": [2, 3, 4, 6, 7, 12, 14, 15, 16, 17, 18, 19, 21, 22, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "tensor_st": [8, 12], "term": [7, 14, 17, 21, 23], "test": 37, "tex": [4, 30], "texliv": 4, "text": [4, 14, 18, 26, 27, 37], "textrm": 4, "th": [14, 20], "than": [27, 37], "thei": [14, 19], "theori": [14, 17, 37], "thermal": [4, 14, 18, 27], "thermal_relax": 4, "thermal_relaxation_krau": [14, 18], "thermalrelax": [25, 27], "theta": [2, 4, 14, 16, 33, 34], "theta2": [4, 33, 34], "thi": [2, 3, 4, 12, 14, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 30, 31, 36, 37], "three": [3, 4, 14, 16, 18, 27, 33], "through": 36, "tikz": 4, "time": [4, 14, 17, 18, 19, 27, 37], "tini": 4, "to_latex": 4, "to_stat": [8, 12], "toffoli": [4, 14, 16, 29, 33], "toffoli_g": [14, 16], "tol": 37, "toler": [12, 37], "tool": 37, "torch": [4, 6, 12, 14, 15, 16, 18, 21, 23, 33, 34, 37], "total": [4, 27, 30], "tr": [27, 37], "tr_dist": 37, "tr_norm": 37, "trace": [21, 22, 37], "trace_dist": [21, 22, 37], "trace_idx": 37, "trace_norm": 37, "tracedist": [21, 22], "trainabl": 2, "transact": [14, 17], "transfer_stat": 2, "transform": [14, 19, 37], "transpil": [2, 4], "transpos": [14, 16, 37], "transpose_idx": 37, "trap": 33, "trotter": 4, "true": [2, 4, 7, 14, 17, 21, 23, 26, 30, 31, 37], "tug": 4, "tupl": [7, 21, 23, 37], "tutori": [14, 17], "two": [2, 3, 4, 7, 12, 14, 16, 18, 21, 23, 27, 31, 33, 37], "type": [2, 4, 6, 7, 9, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 30, 35, 36, 37], "type_repr": 26, "typeerror": [26, 37], "u": [4, 14, 15, 16, 37], "u3": [3, 4, 14, 16, 29, 34], "u3_gat": [14, 16], "u3_matrix": [14, 16], "u_3": [4, 14, 16], "u_perm": [14, 16], "u_qudit_matrix": [14, 16], "uf": [14, 16], "uf_gat": [14, 16], "unexpect": 26, "uni": 4, "uniform": 2, "unitari": [2, 3, 4, 14, 16, 17, 30, 31, 36, 37], "unitary_hermitian": [14, 17], "unitary_matrix": [2, 14, 16], "unitary_matrix_1": [14, 17], "unitary_matrix_2": [14, 17], "unitary_matrix_3": [14, 17], "unitary_stabilizer_nul": 37, "univers": [3, 4, 14, 16, 27, 31], "universal2": [1, 3, 14, 16], "universal2_g": [14, 16], "universal3": [1, 3, 14, 16], "universal3_g": [14, 16], "universal_qudit": [4, 14, 16], "universal_three_qubit": 4, "universal_two_qubit": 4, "universalqudit": [29, 31], "unknown": 4, "unnorm": [14, 19], "unsqueez": 4, "unstructur": [14, 16], "unsupport": [26, 37], "updat": [2, 27, 35], "update_param": 2, "upper": [14, 17], "uppercas": 37, "us": [2, 4, 6, 7, 9, 12, 14, 16, 21, 22, 23, 36, 37], "usag": 37, "use_spars": 7, "user": [7, 21, 23, 30], "util": 4, "uv": [14, 15, 37], "v": [14, 15, 37], "valid": [12, 37], "valu": [21, 22, 23, 27, 37], "valueerror": [6, 26, 30, 33, 34, 37], "var": 37, "variabl": 37, "variat": 1, "variou": 9, "vdot": [4, 14, 16], "vec": [4, 37], "vector": [4, 14, 17, 19, 37], "verifi": 37, "version": 27, "vertic": [4, 14, 15], "via": 4, "visual": [4, 5, 24, 29], "von": 37, "von_neumann_entropi": 37, "w": [14, 20], "w_state": [14, 20], "w_state_inst": [14, 20], "wai": [4, 36], "want": 36, "we": [2, 4, 36], "weakli": [3, 4], "weyl": [14, 19], "when": [4, 14, 19, 30, 33, 37], "where": [4, 14, 15, 18, 19, 26, 27, 36, 37], "whether": [2, 4, 7, 14, 17, 21, 23, 26, 30, 31, 33, 34, 36, 37], "which": [2, 3, 4, 7, 21, 22, 23, 26, 27, 28, 30, 31, 33, 34, 36, 37], "whose": [4, 14, 17, 20, 37], "width": 30, "wire": 4, "wireoverrid": 4, "within": 37, "without": 37, "word": 7, "written": 4, "wrong": [14, 17, 20, 21, 22, 23], "www": 4, "x": [4, 7, 14, 16, 18, 19, 21, 23, 27, 29, 30, 33, 34, 37], "x0": [14, 15, 17, 21, 23], "x1": [14, 15, 37], "x2": [14, 15, 17], "x3": 7, "x_gate": [14, 16], "x_i": [4, 7], "x_k": [14, 15], "x_u": [14, 15], "x_v": [14, 15], "xx": [4, 14, 16], "xy": [14, 15, 21, 23], "xy_fidel": 37, "xy_hamiltonian": [14, 15], "x\u2081\u00b2": 37, "y": [4, 14, 16, 18, 19, 21, 23, 27, 29, 33, 34, 37], "y0": [14, 15, 17, 21, 23], "y1": [14, 15], "y2": [14, 15, 37], "y_gate": [14, 16], "y_i": 7, "y_u": [14, 15], "y_v": [14, 15], "yield": 2, "you": [4, 21, 22, 23, 36], "your": 4, "yy": [4, 14, 16], "yz": [21, 23], "z": [4, 7, 14, 16, 17, 18, 19, 21, 23, 27, 29, 33, 34, 37], "z0": [7, 14, 15, 17, 21, 23, 37], "z1": [7, 14, 15, 17, 37], "z2": [14, 15, 17], "z_gate": [14, 16], "z_i": 7, "z_u": [14, 15], "z_v": [14, 15], "zero": [2, 4, 14, 20, 37], "zero_st": [14, 20, 37], "ziz": 7, "zxzz": 7, "zz": [4, 14, 16], "zzix": 7, "zzx": 7}, "titles": ["Welcome to QuAIRKit\u2019s documentation!", "quairkit.ansatz", "quairkit.ansatz.container", "quairkit.ansatz.layer", "quairkit.circuit", "quairkit.core", "quairkit.core.base", "quairkit.core.hamiltonian", "quairkit.core.state", "quairkit.core.state.backend", "quairkit.core.state.backend.density_matrix", "quairkit.core.state.backend.state_vector", "quairkit.core.state.state", "quairkit.core.visual", "quairkit.database", "quairkit.database.hamiltonian", "quairkit.database.matrix", "quairkit.database.random", "quairkit.database.representation", "quairkit.database.set", "quairkit.database.state", "quairkit.loss", "quairkit.loss.distance", "quairkit.loss.measure", "quairkit.operator", "quairkit.operator.channel", "quairkit.operator.channel.base", "quairkit.operator.channel.common", "quairkit.operator.channel.custom", "quairkit.operator.gate", "quairkit.operator.gate.base", "quairkit.operator.gate.custom", "quairkit.operator.gate.encoding", "quairkit.operator.gate.multi_qubit_gate", "quairkit.operator.gate.single_qubit_gate", "quairkit.operator.gate.visual", "quairkit.operator.special", "quairkit.qinfo"], "titleterms": {"": 0, "ansatz": [1, 2, 3], "backend": [9, 10, 11], "base": [6, 26, 30], "channel": [25, 26, 27, 28], "circuit": 4, "common": 27, "contain": 2, "core": [5, 6, 7, 8, 9, 10, 11, 12, 13], "custom": [28, 31], "databas": [14, 15, 16, 17, 18, 19, 20], "density_matrix": 10, "distanc": 22, "document": 0, "encod": 32, "gate": [29, 30, 31, 32, 33, 34, 35], "hamiltonian": [7, 15], "layer": 3, "loss": [21, 22, 23], "matrix": 16, "measur": 23, "multi_qubit_g": 33, "note": [2, 3, 4, 6, 7, 12, 21, 23, 26, 27, 30, 37], "oper": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "qinfo": 37, "quairkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "random": 17, "represent": 18, "set": 19, "single_qubit_g": 34, "special": 36, "state": [8, 9, 10, 11, 12, 20], "state_vector": 11, "visual": [13, 35], "warn": [4, 37], "welcom": 0}})