{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Constructing Quantum Circuits in QuAIRKit\n",
    "\n",
    "QuAIRKit uses the `Circuit` class to represent quantum circuits. In this tutorial, we will learn how to manipulate quantum circuits in QuAIRKit.\n",
    "\n",
    "**Table of Contents**\n",
    "\n",
    "- [Constructing quantum circuits](#Constructing-Quantum-Circuits)\n",
    "  - [Add operations](#Add-operaions)\n",
    "  - [Add circuit templates](#Add-circuit-templates)\n",
    "  - [Operator management](#Operator-management)\n",
    "  - [Execution](#Execution)\n",
    "- [Other properties](#Other-properties)\n",
    "- [Training noisy ground state preparation](Training-noisy-ground-state-preparation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
    "import time\n",
    "from quairkit import Circuit\n",
    "from quairkit.database import *\n",
    "from quairkit.operator import RZ\n",
    "from quairkit.qinfo import *"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Constructing quantum circuits\n",
    "\n",
    "In QuAIRKit, circuits can be generated with or without specifying the total number of qubits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "num_qubits = 3\n",
    "\n",
    "cir = Circuit() # Create a dynamic circuit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add gates\n",
    "\n",
    "Constant gates can be directly called from the attributes of the `Circuit` class. The semantic rule for specifying the locations added operations is as follows:\n",
    "\n",
    "- No inputs: The operations are added across all qubits.\n",
    "- `int`: The single-qubit operation is added to the specified qubit.\n",
    "- `List[int]`: The single-qubit operation is added across the specified qubits, or the multi-qubit operation is added across the specified qubits.\n",
    "- `List[List[int]]`: The multi-qubit operation is added across different groups of specified qubits.\n",
    "\n",
    "```python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 324x165 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.h(0) # Add Hadamard gate to qubit 0\n",
    "cir.x([0, 1]) # Add X gate to qubit 0 and 1\n",
    "cir.cx([0, 2]) # Add CNOT gate to qubit 0 and 2\n",
    "cir.swap([[1, 2], [0, 2]]) # Add SWAP gate to qubit 1 and 2, and qubit 0 and 2\n",
    "cir.z() # Add Z gate to all qubits\n",
    "cir.cy() # Add CY gate in cycle\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "When the number of qubits is not specified, the total number of qubits will be changed as operations are added to the circuit. However, in this case, one cannot add the first operation without specifying the location."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n"
     ]
    }
   ],
   "source": [
    "print(cir.num_qubits)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For parametrized gates, `Circuit` can add the gate with randomly generated parameters, or you can specify them as keyword arguments."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 789x165 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.rx() # Add Rx gate to all qubits with random parameters\n",
    "cir.rx([0, 1], param=np.arange(2)) # Add RX gate to the first two qubits with specified parameters\n",
    "\n",
    "cir.u3([0]) # Add universal single qubit gate\n",
    "cir.universal_two_qubits([0, 1]) # Add universal two qubits gate\n",
    "cir.universal_three_qubits([0, 1, 2]) # Add universal three qubits gate\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also add custom gates by specifying the matrix representation of the gate."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 909x165 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir.oracle(dagger(qft_matrix(3)), qubits_idx=[0, 1, 2], latex_name=r'$\\text{QFT}^\\dagger$')\n",
    "cir.control_oracle(random_unitary(2), qubits_idx=[0, 1, 2], gate_name='O')\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar construction semantic applies to noisy operations such as depolarizing channel, where the related plot logic is not supported yet."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [],
   "source": [
    "cir.depolarizing(0.1) # Add depolarizing noise with probability 0.1\n",
    "cir.bit_phase_flip(0.2) # Add bit-phase flip noise with probability 0.2\n",
    "\n",
    "sigma = random_state(3)\n",
    "cir.choi_channel(replacement_choi(sigma), qubits_idx=[0, 1, 2]) # Add replacement channel\n",
    "cir.kraus_channel(reset_kraus([0.1, 0.2]), qubits_idx=[1, 2]) # Add reset channel"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "More available operations can be found in the [API document](www.quairkit.com)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Add circuit templates\n",
    "\n",
    "If you find it hard to construct the training circuit from scratch, you can use the predefined circuit templates in QuAIRKit. Note that the templates are only available for the circuits with a known number of qubits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1759x165 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir = Circuit(num_qubits)\n",
    "\n",
    "cir.linear_entangled_layer(depth=1)\n",
    "\n",
    "cir.real_block_layer(depth=1)\n",
    "cir.real_entangled_layer(depth=1)\n",
    "\n",
    "cir.complex_block_layer(depth=1)\n",
    "cir.complex_entangled_layer(depth=1)\n",
    "\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Operator management\n",
    "\n",
    "`Circuit` is essentially a list of `Operator` objects. Thus, you can access the operations by indexing the `Circuit` object."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The matrix of the gate at the 5th position is\n",
      " tensor([[[-0.9971+0.j, -0.0765+0.j],\n",
      "         [ 0.0765+0.j, -0.9971+0.j]],\n",
      "\n",
      "        [[-0.9955+0.j, -0.0943+0.j],\n",
      "         [ 0.0943+0.j, -0.9955+0.j]]], grad_fn=<SqueezeBackward1>)\n"
     ]
    }
   ],
   "source": [
    "print('The matrix of the gate at the 5th position is\\n', cir[4].matrix)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You can also add or remove the operations for advanced setup."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The quantum circuit after adding gates is: \n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 294x165 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The quantum circuit after removing gates is:\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 204x165 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "cir = Circuit(3)\n",
    "\n",
    "# Set parameters and customize quantum gates. Here we select Ry, Rx, Rz gates\n",
    "param = np.random.rand(2)\n",
    "\n",
    " # By default, randomly generates a set of parameters\n",
    "rz_gate = RZ(param=param, qubits_idx=[1, 2])\n",
    "\n",
    "# Add quantum gates\n",
    "cir.ry([0, 2])\n",
    "cir.rx([0, 1])\n",
    "cir.insert(index=2, module=rz_gate)  # index where to insert\n",
    "\n",
    "print('The quantum circuit after adding gates is: ')\n",
    "cir.plot()\n",
    "\n",
    "cir.pop(1)  # Remove Rx gate\n",
    "print('The quantum circuit after removing gates is:')\n",
    "cir.plot()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Execution\n",
    "\n",
    "The `Circuit` object can be executed by calling the object itself."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The output state for inputting zero state is: \n",
      "---------------------------------------------------\n",
      " Backend: state_vector\n",
      " System dimension: [2, 2, 2]\n",
      " System sequence: [2, 1, 0]\n",
      "[-0.29+0.26j -0.05+0.05j  0.  +0.j    0.  +0.j    0.88-0.21j  0.16-0.04j\n",
      "  0.  +0.j    0.  +0.j  ]\n",
      "---------------------------------------------------\n",
      "\n",
      "The output state for inputting sigma is: \n",
      "---------------------------------------------------\n",
      " Backend: density_matrix\n",
      " System dimension: [2, 2, 2]\n",
      " System sequence: [2, 1, 0]\n",
      "[[ 0.09-0.j    0.06+0.03j -0.02-0.04j -0.01-0.03j  0.02+0.04j  0.07+0.11j\n",
      "  -0.01+0.05j  0.12+0.05j]\n",
      " [ 0.06-0.03j  0.06+0.j   -0.04+0.01j -0.02-0.04j  0.05+0.03j  0.07+0.04j\n",
      "   0.02+0.04j  0.1 -0.j  ]\n",
      " [-0.02+0.04j -0.04-0.01j  0.16+0.j   -0.06+0.06j -0.03-0.12j -0.05+0.07j\n",
      "  -0.04-0.09j -0.04-0.j  ]\n",
      " [-0.01+0.03j -0.02+0.04j -0.06-0.06j  0.08-0.j   -0.06+0.08j -0.02-0.03j\n",
      "  -0.04+0.04j -0.05+0.06j]\n",
      " [ 0.02-0.04j  0.05-0.03j -0.03+0.12j -0.06-0.08j  0.13-0.j   -0.01+0.01j\n",
      "   0.08-0.j    0.08-0.03j]\n",
      " [ 0.07-0.11j  0.07-0.04j -0.05-0.07j -0.02+0.03j -0.01-0.01j  0.23+0.j\n",
      "   0.  +0.06j  0.13-0.11j]\n",
      " [-0.01-0.05j  0.02-0.04j -0.04+0.09j -0.04-0.04j  0.08+0.j    0.  -0.06j\n",
      "   0.07-0.j    0.03-0.06j]\n",
      " [ 0.12-0.05j  0.1 +0.j   -0.04+0.j   -0.05-0.06j  0.08+0.03j  0.13+0.11j\n",
      "   0.03+0.06j  0.19+0.j  ]]\n",
      "---------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "output_state = cir() # Run the circuit with initial state |0>\n",
    "print('The output state for inputting zero state is:', output_state)\n",
    "\n",
    "output_state = cir(sigma) # Run the circuit with initial state sigma\n",
    "print('The output state for inputting sigma is:', output_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Other properties\n",
    "\n",
    "Circuit have other properties for further information and manipulation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The circuit depth is 2\n",
      "The unitary matrix of this circuit is\n",
      " tensor([[-0.2855+0.2624j, -0.6660+0.6122j,  0.0000+0.0000j,  0.0000+0.0000j,\n",
      "          0.0513-0.0472j,  0.1197-0.1100j,  0.0000+0.0000j,  0.0000+0.0000j],\n",
      "        [ 0.8807-0.2067j, -0.3775+0.0886j,  0.0000+0.0000j,  0.0000+0.0000j,\n",
      "         -0.1583+0.0372j,  0.0678-0.0159j,  0.0000+0.0000j,  0.0000+0.0000j],\n",
      "        [ 0.0000+0.0000j,  0.0000+0.0000j, -0.3775-0.0886j, -0.8807-0.2067j,\n",
      "          0.0000+0.0000j,  0.0000+0.0000j,  0.0678+0.0159j,  0.1583+0.0372j],\n",
      "        [ 0.0000+0.0000j,  0.0000+0.0000j,  0.6660+0.6122j, -0.2855-0.2624j,\n",
      "          0.0000+0.0000j,  0.0000+0.0000j, -0.1197-0.1100j,  0.0513+0.0472j],\n",
      "        [-0.0513+0.0472j, -0.1197+0.1100j,  0.0000+0.0000j,  0.0000+0.0000j,\n",
      "         -0.2855+0.2624j, -0.6660+0.6122j,  0.0000+0.0000j,  0.0000+0.0000j],\n",
      "        [ 0.1583-0.0372j, -0.0678+0.0159j,  0.0000+0.0000j,  0.0000+0.0000j,\n",
      "          0.8807-0.2067j, -0.3775+0.0886j,  0.0000+0.0000j,  0.0000+0.0000j],\n",
      "        [ 0.0000+0.0000j,  0.0000+0.0000j, -0.0678-0.0159j, -0.1583-0.0372j,\n",
      "          0.0000+0.0000j,  0.0000+0.0000j, -0.3775-0.0886j, -0.8807-0.2067j],\n",
      "        [ 0.0000+0.0000j,  0.0000+0.0000j,  0.1197+0.1100j, -0.0513-0.0472j,\n",
      "          0.0000+0.0000j,  0.0000+0.0000j,  0.6660+0.6122j, -0.2855-0.2624j]],\n",
      "       grad_fn=<ViewBackward0>)\n"
     ]
    }
   ],
   "source": [
    "print('The circuit depth is', cir.depth)\n",
    "print('The unitary matrix of this circuit is\\n', cir.unitary_matrix())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The trainable parameters of entire circuit is tensor([0.3557, 3.9515])\n",
      "The trainable parameters of entire circuit is tensor([1., 1.])\n"
     ]
    }
   ],
   "source": [
    "print('The trainable parameters of entire circuit is', cir.param)\n",
    "cir.update_param(torch.ones_like(cir.param)) # Update the parameters of the circuit\n",
    "print('The trainable parameters of entire circuit is', cir.param)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It is worth noting that `Circuit` is inherently a subclass of `torch.Module`, which means that it can be used as a part of the neural network model in PyTorch."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training noisy ground state preparation\n",
    "\n",
    "In this demo, we will prepare the ground state of a randomly generated Hamiltonian. In particular, we suppose the output state contains a depolarizing channel with error parameter 0.1. The loss function is defined as the expectation value of the circuit with respect to the Hamiltonian."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [],
   "source": [
    "hamiltonian = random_hamiltonian_generator(num_qubits)\n",
    "\n",
    "# construct QNN\n",
    "cir = Circuit(num_qubits)\n",
    "cir.complex_entangled_layer(depth=20)\n",
    "cir.depolarizing(0.1)\n",
    "\n",
    "# define loss function\n",
    "loss_fcn = lambda circuit: circuit().expec_val(hamiltonian)\n",
    "\n",
    "# set optimizer\n",
    "LR, NUM_ITR = 0.1, 200\n",
    "opt = torch.optim.Adam(lr=LR, params=cir.parameters())\n",
    "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(opt, 'min', factor=0.5) # activate scheduler"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter: 0, loss: -0.14351884, avg_time: 0.0351s\n",
      "iter: 20, loss: -1.08153820, avg_time: 0.0249s\n",
      "iter: 40, loss: -1.15248334, avg_time: 0.0225s\n",
      "iter: 60, loss: -1.15756059, avg_time: 0.0252s\n",
      "iter: 80, loss: -1.15914619, avg_time: 0.0228s\n",
      "iter: 100, loss: -1.15918970, avg_time: 0.0234s\n",
      "iter: 120, loss: -1.15919995, avg_time: 0.0230s\n",
      "iter: 140, loss: -1.15920043, avg_time: 0.0223s\n",
      "iter: 160, loss: -1.15920222, avg_time: 0.0230s\n",
      "iter: 180, loss: -1.15873241, avg_time: 0.0230s\n",
      "iter: 199, loss: -1.14867520, avg_time: 0.0213s\n"
     ]
    }
   ],
   "source": [
    "loss_list, time_list = [], []\n",
    "\n",
    "for itr in range(NUM_ITR):\n",
    "    start_time = time.time()\n",
    "    opt.zero_grad()\n",
    "\n",
    "    loss = loss_fcn(cir) # compute loss\n",
    "\n",
    "    loss.backward()\n",
    "    opt.step()\n",
    "    scheduler.step(loss)\n",
    "\n",
    "    loss = loss.item()\n",
    "    loss_list.append(loss)\n",
    "    time_list.append(time.time() - start_time)\n",
    "\n",
    "    if itr % 20 == 0 or itr == NUM_ITR - 1:\n",
    "        print(f\"iter: {itr}, loss: {loss:.8f}, avg_time: {np.mean(time_list):.4f}s\")\n",
    "        time_list = []"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "quair",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
