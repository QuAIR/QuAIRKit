{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": false
   },
   "source": [
    "# Rediscovering Simon's algorithm with PQC\n",
    "\n",
    "<em style=\"color:gray;\">Copyright (c) 2025 QuAIR team. All Rights Reserved.</em>\n",
    "\n",
    "**Table of contents**\n",
    "\n",
    "- [Introduction](#Introduction)\n",
    "  - [Simon's problem (classical version)](#Simon's-problem-(classical-version))\n",
    "  - [Simon's problem (quantum version)](#Simon's-problem-(quantum-version))\n",
    "- [Simon's algorithm](#Simon's-algorithm)\n",
    "  - [Implement Simon's algorithm with QuAIRKit](#Implement-Simon's-algorithm-with-QuAIRKit)\n",
    "  - [Begin experiment](#Begin-experiment)\n",
    "- [References](#References)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:45.937517Z",
     "start_time": "2025-05-08T02:07:43.399110100Z"
    }
   },
   "outputs": [],
   "source": [
    "from typing import Callable\n",
    "import numpy as np\n",
    "\n",
    "import torch\n",
    "import quairkit as qkit\n",
    "from quairkit import Circuit\n",
    "from quairkit.database import *\n",
    "from quairkit.loss import *\n",
    "from quairkit.qinfo import *\n",
    "\n",
    "import time"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction\n",
    "Simon's algorithm is a quantum algorithm for obtaining the period of a vectorial Boolean function with polynomial time complexity, achieving exponential speedup over classical algorithms [1]. \n",
    "\n",
    "\n",
    "Although Simon's algorithm has few general applications, it inspired the discovery of Shor's algorithm. In fact, the two problems solved by these two algorithms are both special cases of the abelian hidden subgroup problem.\n",
    "Before presenting Simon's algorithm, let's first review Simon's problem."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simon's problem (classical version)\n",
    "\n",
    "Input: a function $f: \\{0, 1\\}^n \\to \\{0, 1\\}^n$ that satisfies for all $n$-bit string $x$ and $y$: $f(x) = f(y)$ if and only if $x = y$ or $x = y \\oplus s$ for some $n$-bit string $s$.\n",
    "\n",
    "Output: determine $s \\in \\{0, 1\\}^n$."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Any classical algorithm solving this should require $\\Omega(2^{n/2})$ queries, while Simon's algorithm solves it in $\\mathcal{O}(n) $ quantum queries [2].\n",
    "\n",
    "Such function $f$ can be randomly generated via the following function."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:45.951728500Z",
     "start_time": "2025-05-08T02:07:45.937517Z"
    }
   },
   "outputs": [],
   "source": [
    "def simon_function(n: int, s: int) -> Callable[[int], int]:\n",
    "    r\"\"\"Generates a function f such that :math:`f(x) = f(y)` if and only if :math:`y = x` or :math:`y = x \\oplus s`.\n",
    "\n",
    "    Args:\n",
    "        n: the number of bits in the input and output strings.\n",
    "        s: an integer represented by an n-bit string representing the secret string in Simon's problem.\n",
    "\n",
    "    Returns:\n",
    "        A matrix f mapping integers to integers satisfying Simon's problem properties.\n",
    "    \"\"\"\n",
    "    # generate a random permutation of 0, 1, ..., 2^n-1\n",
    "    all_x = np.arange(2 ** n)\n",
    "    np.random.shuffle(all_x)\n",
    "    \n",
    "    mapping = {}\n",
    "    outputs_used = set()\n",
    "    \n",
    "    # generate a mapping, which implements function f\n",
    "    for x in all_x:\n",
    "        if x in mapping:\n",
    "            continue\n",
    "        \n",
    "        # Generate a random output not used before\n",
    "        while True:\n",
    "            fx = np.random.randint(2 ** n)\n",
    "            if fx not in outputs_used:\n",
    "                outputs_used.add(fx)\n",
    "                break\n",
    "        \n",
    "        # since f(x) = f(x \\oplus s)\n",
    "        mapping[x] = fx\n",
    "        mapping[x ^ s] = fx\n",
    "\n",
    "    # Define the function f using the mapping\n",
    "    def f(input_int: int) -> int:\n",
    "        return mapping[input_int]\n",
    "\n",
    "    return f"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of a function $f$ for $n = 2$ and $s = 11$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:45.995837300Z",
     "start_time": "2025-05-08T02:07:45.951728500Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " x | f(x)\n",
      "00 | 10\n",
      "01 | 01\n",
      "10 | 01\n",
      "11 | 10\n"
     ]
    }
   ],
   "source": [
    "n = 2\n",
    "s_str = '11'\n",
    "# get function f with n and s_str\n",
    "example_f = simon_function(n, int(s_str, 2))\n",
    "# print the value of f(x) for every x\n",
    "print(\" x | f(x)\")\n",
    "for x in range(2 ** n): \n",
    "    result = bin(example_f(x))[2:].zfill(n)\n",
    "    x = bin(x)[2:].zfill(n)\n",
    "    print(f\"{x} | {result}\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can find that $f(00) =  f(00 \\oplus 11)$, $f(01)=f(01\\oplus 11)$, etc."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's go over the quantum version of Simon's problem."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Simon's problem (quantum version)\n",
    "\n",
    "Input: an access to unitary $U_f$ that implements the function $f$.\n",
    "\n",
    "Output: an $n$-bit string $y$ such that $y \\cdot s = 0$, where $\\cdot$ is the inner product over $\\mathbb{Z}_2$, i.e. the bitwise inner product of $y$ and $s$."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now it's time to present the steps of Simon's algorithm."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simon's algorithm\n",
    "We begin to show how to find this hidden integer $s$.\n",
    "1. Initialize $2n$ qubits as two quantum registers of length $n$, simplified as $\\ket{0}^{\\otimes n}\\ket{0}^{\\otimes n}=\\ket{0}\\ket{0}$.\n",
    "\n",
    "2. Apply Hadamard gates to first register to get \n",
    "$$\n",
    "(H^{\\otimes n} \\otimes I) \\ket{0}\\ket{0} = \\frac{1}{2^{n/2}} \\sum_{x=0}^{2^n-1}\\ket{x}\\ket{0}.\\tag{1}\n",
    "$$\n",
    "\n",
    "3. Query the blackbox unitary $U_f$ to get\n",
    "$$\n",
    "U_f\\,\\frac{1}{2^{n/2}} \\sum_{x=0}^{2^n-1}\\ket{x}\\ket{0} = \\frac{1}{2^{n/2}} \\sum_{x=0}^{2^n-1}\\ket{x}\\ket{f(x)}.\\tag{2}\n",
    "$$\n",
    "\n",
    "4. Apply Hadamard gates to first register again, and the state becomes\n",
    "$$\n",
    "(H^{\\otimes n} \\otimes I)\\, \\frac{1}{2^{n/2}} \\sum_{x=0}^{2^n-1}\\ket{x}\\ket{f(x)}\n",
    "=\\frac{1}{2^n} \\sum_{y=0}^{2^n-1}\\sum_{x=0}^{2^n-1} (-1)^{x \\cdot y}\\ket{y} \\ket{f(x)}.\\tag{3}\n",
    "$$\n",
    "Here we consider the amplitude of $\\ket{y} \\ket{f(x)}$. Due to $f(x)=f(x\\oplus s)$, sum the only two terms that attribute to the amplitude of $\\ket{y} \\ket{f(x)}$ as \n",
    "$$\n",
    "\\frac{1}{2^n}\\Bigl( (-1)^{x\\cdot y} +(-1)^{(x\\oplus s)\\cdot y}\\Bigr).\\tag{4}\n",
    "$$\n",
    "With the distributive law as $(x\\oplus s)\\cdot y=x\\cdot y \\oplus s\\cdot y$, we get \n",
    "$$\n",
    "\\begin{aligned}\n",
    "\\frac{1}{2^n}\\Bigl( (-1)^{x\\cdot y} +(-1)^{(x\\oplus s)\\cdot y}\\Bigr)\n",
    "& = \\frac{1}{2^n}\\bigl( (-1)^{x\\cdot y} +(-1)^{x\\cdot y \\oplus s\\cdot y}\\bigr)\\\\\n",
    "& = \\frac{1}{2^n}\\bigl( (-1)^{x\\cdot y} +(-1)^{x\\cdot y} (-1)^{s\\cdot y}\\bigr)\\\\\n",
    "& = \\frac{1}{2^n}(-1)^{x\\cdot y} \\bigl( 1 + (-1)^{s\\cdot y} \\bigr).\n",
    "\\end{aligned}\n",
    "$$\n",
    "This shows that no outcome $y$ with $s\\cdot y=1$ is observable, whereas outcomes satisfying $s\\cdot y=0$ occur with probability $2^{2-2n}$.\n",
    "\n",
    "5. Repeat Step 1 to 4 to obtain a list of $y$ satisfying $s\\cdot y=0$, which can be used to get $s$ by solving a system of linear equations."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Implement Simon's algorithm with QuAIRKit\n",
    "First, we should construct a $U_f$ for later usage. Here is an example that implements the oracle for this $f$:\n",
    "| $x$ | $f(x)$ |\n",
    "|------|---------|\n",
    "| $00$ | $00$|\n",
    "| $01$ | $01$|\n",
    "| $10$ | $00$|\n",
    "| $11$ | $01$|\n",
    "\n",
    "We can find $f(x)=f(x\\oplus 10)$.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:45.996844400Z",
     "start_time": "2025-05-08T02:07:45.968389900Z"
    }
   },
   "outputs": [],
   "source": [
    "def oracle_example() -> Circuit:\n",
    "    r\"\"\"generate this oracle with n = 2 and s = '10'.\n",
    "    \n",
    "    Returns:\n",
    "        the circuit for Simon's problem with n = 2 and s = '10'.\n",
    "    \n",
    "    \"\"\"\n",
    "    n = 2\n",
    "    qc = Circuit(2 * n)\n",
    "    qc.cx([0, 1])  # the effect of this oracle is exactly only a cnot gate.\n",
    "    return qc"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we construct the Simon's circuit in Step 1 to Step 4."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:46.005917Z",
     "start_time": "2025-05-08T02:07:45.983826200Z"
    }
   },
   "outputs": [],
   "source": [
    "def simon_circuit(n: int, oracle: Circuit) -> Circuit:\n",
    "    r\"\"\" Simon's circuit for corresponding oracle.\n",
    "    \n",
    "    Args:\n",
    "        n: the number of qubits in the Simon's problem.\n",
    "        oracle: the oracle circuit implementing the Simon's problem.\n",
    "    \n",
    "    Returns:\n",
    "        A circuit implementing Simon's algorithm.\n",
    "    \n",
    "    \"\"\"\n",
    "    simon_cir = Circuit(2 * n)  # Step 1\n",
    "    simon_cir.h(list(range(n)))  # Step 2\n",
    "    simon_cir.extend(oracle)  # Step 3\n",
    "    simon_cir.h(list(range(n)))  # Step 4\n",
    "    return simon_cir"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can plot the circuit like this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:50.946843300Z",
     "start_time": "2025-05-08T02:07:45.998916100Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the diagram of the quantum circuit in this case:\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# plot this circuit\n",
    "print(\"the diagram of the quantum circuit in this case:\")\n",
    "cir = simon_circuit(2, oracle_example())\n",
    "cir.plot()"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Using PQC to rediscover Simon's algorithm\n",
    "Parameterized quantum circuits (PQC) are circuits with tunable parameters, like rotation angles. They are central to hybrid algorithms like QAOA.\n",
    "\n",
    "We begin by using PQC to rediscover Simon’s problem.\n",
    "\n",
    "Define $P^\\perp(s) = \\sum_{y: y \\cdot s = 0} \\ket{y}\\bra{y}$. We expect the measurement outcome of this circuit to be orthogonal to $s$. That is, applying the projector $I - P^\\perp(s)$ to the output state should output 0.\n",
    "Then the loss function is defined as\n",
    "$$\n",
    "\\begin{aligned}\n",
    "\\mathcal{L}(\\theta) &= \\textrm{Average probability of measurement outcome } \\in \\{y: y \\cdot s \\neq 0 \\} \\\\\n",
    "&= \\frac{1}{N} \\sum_{i=0}^{N - 1} \\left| \\left(I - P^\\perp(s_i)\\right) \\cdot C_\\theta(f_i) \\ket{0} \\right|^2\n",
    ", \n",
    "\\end{aligned}\n",
    "$$\n",
    "where $C_\\theta(f_i)$ is the output unitary of the parameterized comb $C_\\theta$ with input unitary $U_{f_i}$."
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first randomly generate `list_f`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:50.961843100Z",
     "start_time": "2025-05-08T02:07:50.946843300Z"
    }
   },
   "outputs": [],
   "source": [
    "num_data = 1000  # number of data\n",
    "\n",
    "# Generate a batch of random secret strings and corresponding functions.\n",
    "dim = 2 ** n\n",
    "list_s = np.random.randint(dim, size=num_data)\n",
    "list_f = [simon_function(n, s) for s in list_s]"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Prepare the corresponding batch of unitaries, `list_Uf`, using the previously generated functions. Note that `Uf` can implement the unitary of a given function $f$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.056478Z",
     "start_time": "2025-05-08T02:07:50.961843100Z"
    }
   },
   "outputs": [],
   "source": [
    "list_Uf = torch.stack([Uf(f, n) for f in list_f])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The corresponding Simon’s circuit is constructed as follows. Note that a batch of unitaries is taken as input for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.090441100Z",
     "start_time": "2025-05-08T02:07:51.058443900Z"
    }
   },
   "outputs": [],
   "source": [
    "simon_cir = Circuit(2 * n)  # Step 1\n",
    "simon_cir.h(list(range(n)))  # Step 2\n",
    "simon_cir.oracle(list_Uf, list(range(2 * n)), latex_name=r'$U_f$')  # Step 3\n",
    "simon_cir.h(list(range(n)))  # Step 4"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To save memory for large $n$, rather than perform direct matrix multiplication, we use batched projection-valued measurement to compute the loss function. See the measurement tutorial in QuAIRKit for more usage details.\n",
    "\n",
    "In the following, these PVMs are constructed as measuring '0' gives $P^\\perp(s_i)$ and '1' for the others. Then the loss function is computed by the average probability of getting '1'.\n",
    "\n",
    "First, we construct the projector $P^\\perp(s)$ for a given $s$."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.111442Z",
     "start_time": "2025-05-08T02:07:51.088441800Z"
    }
   },
   "outputs": [],
   "source": [
    "def prep_proj(s: int) -> torch.Tensor:\n",
    "    r\"\"\"Generate P^\\perp_s for a given s.\n",
    "    \n",
    "    Args:\n",
    "        s: an integer representing an $n$-bit string.\n",
    "    \n",
    "    Returns:\n",
    "        the projection matrix P^\\perp(s).\n",
    "    \"\"\"\n",
    "    assert 0 <= s < dim\n",
    "    \n",
    "    D = torch.zeros(dim)  # initialize D as a zero vector\n",
    "    # iterate over all y in the range of dim\n",
    "    for y in range(dim):\n",
    "        dot_product = (y & s).bit_count() % 2\n",
    "        # if the product is 0, then the item in D is 1\n",
    "        if dot_product == 0:\n",
    "            D[y] = 1\n",
    "    return torch.diag(D)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we generate the corresponding POVM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.138450800Z",
     "start_time": "2025-05-08T02:07:51.106441900Z"
    }
   },
   "outputs": [],
   "source": [
    "prep = torch.stack([prep_proj(s) for s in list_s])\n",
    "# Generate a batch of POVMs.\n",
    "pvm = torch.stack([prep, torch.eye(dim) - prep]).permute([1, 0, 2, 3])"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we define the loss function with this POVM."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.171442500Z",
     "start_time": "2025-05-08T02:07:51.137440700Z"
    }
   },
   "outputs": [],
   "source": [
    "M = Measure(pvm)\n",
    "\n",
    "def loss_fcn(circuit: Circuit) -> torch.Tensor:\n",
    "    r\"\"\"Compute the loss function for the given circuit.\n",
    "\n",
    "    Args:\n",
    "        circuit: the quantum circuit to be evaluated.\n",
    "    \n",
    "    Returns:\n",
    "        the loss value for the given circuit.\n",
    "    \n",
    "    \"\"\"\n",
    "    output_state = circuit()\n",
    "    prob = M(output_state, system_idx=list(range(n)), desired_result='0')\n",
    "    # The loss is the probability of measuring |0> in the first n qubits.\n",
    "    return 1 - prob.mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We first verify that the loss function for the original circuit in Simon's algorithm is 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.245923200Z",
     "start_time": "2025-05-08T02:07:51.169441800Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The loss of simon's circuit is tensor(5.9605e-08).\n"
     ]
    }
   ],
   "source": [
    "print(\"The loss of simon's circuit is \"+str(loss_fcn(simon_cir))+\".\")  # loss of simon's circuit"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Begin experiment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.250924500Z",
     "start_time": "2025-05-08T02:07:51.202441200Z"
    }
   },
   "outputs": [],
   "source": [
    "LR = 0.1  # learning rate\n",
    "NUM_ITR = 100  # number of iterations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The ansatz of PQC is selected as the universal two-qubit gate. We will show that these gates will be trained to have the same effect as the original circuit in Simon's algorithm."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:51.251926900Z",
     "start_time": "2025-05-08T02:07:51.217442700Z"
    }
   },
   "outputs": [],
   "source": [
    "# construct the circuit\n",
    "cir = Circuit(2 * n)  # Step 1\n",
    "cir.universal_two_qubits(list(range(n)))  # the ansatz, or to say Step 2\n",
    "cir.oracle(list_Uf, list(range(2 * n)), latex_name=r'U_f')  # oracle, or to say Step 3\n",
    "cir.universal_two_qubits(list(range(n)))  # the ansatz, or to say Step 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:53.233680100Z",
     "start_time": "2025-05-08T02:07:51.251926900Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "iter: 0, loss: 0.33749145, lr: 1.00E-01, avg_time: 0.1053s\n",
      "iter: 20, loss: 0.00686681, lr: 1.00E-01, avg_time: 0.0250s\n",
      "iter: 40, loss: 0.00163364, lr: 1.00E-01, avg_time: 0.0762s\n",
      "iter: 60, loss: 0.00013971, lr: 5.00E-02, avg_time: 0.0902s\n",
      "iter: 80, loss: 0.00001949, lr: 5.00E-02, avg_time: 0.0716s\n",
      "iter: 99, loss: 0.00000197, lr: 5.00E-02, avg_time: 0.0598s\n"
     ]
    }
   ],
   "source": [
    "loss_list, time_list = [], []  # record loss\n",
    "\n",
    "opt = torch.optim.Adam(lr=LR, params=cir.parameters()) # cir is a Circuit type\n",
    "scheduler = torch.optim.lr_scheduler.ReduceLROnPlateau(opt, 'min', factor=0.5) # activate scheduler\n",
    "\n",
    "# training\n",
    "for itr in range(NUM_ITR):\n",
    "    start_time = time.time()\n",
    "    opt.zero_grad()\n",
    "\n",
    "    loss = loss_fcn(cir) # compute loss\n",
    "\n",
    "    loss.backward()  # backward propagation\n",
    "    opt.step()\n",
    "\n",
    "    # get loss\n",
    "    loss = loss.item()\n",
    "    scheduler.step(loss) # activate scheduler\n",
    "    \n",
    "    loss_list.append(loss)\n",
    "    time_list.append(time.time() - start_time)\n",
    "\n",
    "    # print loss\n",
    "    if itr % 20 == 0 or itr == NUM_ITR - 1:\n",
    "        print(f\"iter: {itr}, loss: {loss:.8f}, lr: {scheduler.get_last_lr()[0]:.2E}, avg_time: {np.mean(time_list):.4f}s\")\n",
    "        time_list = []"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And we can see the circuit like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:54.598503Z",
     "start_time": "2025-05-08T02:07:53.234727Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the diagram of the quantum circuit after trained:\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"the diagram of the quantum circuit after trained:\")\n",
    "cir.plot(style=\"detailed\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## References\n",
    "\n",
    "[1] M. A. Shafique, A. Munir and I. Latif, \"Quantum Computing: Circuits, Algorithms, and Applications,\" in IEEE Access, vol. 12, pp. 22296-22314, 2024, doi: 10.1109/ACCESS.2024.3362955.\n",
    "\n",
    "[2] J. Eisert, M.M. Wolf. \"Quantum computing.\" arXiv preprint arXiv:quant-ph/0401019 (2004).\n",
    "\n",
    "[3] Peter Shor, [Lecture Note 18](https://math.mit.edu/~shor/435-LN/Lecture_18.pdf), 2022"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "*Table: A reference of notation conventions in this tutorial.*\n",
    "\n",
    "| Symbol        | Variant          | Description                               |\n",
    "|:---------------:|:------------------:|-------------------------------------------|\n",
    "|$f$| |boolean function|\n",
    "|$n$| |number of bits|\n",
    "|$s$|$x$, $y$|$n$-bit string|\n",
    "|$H$| |Hadamard gate|\n",
    "|$U$|$U_f$|unitary matrix|\n",
    "|$P^\\perp(s)$| |projector onto space orthogonal to $s$|\n",
    "|$\\theta$| |parameters of circuit|\n",
    "|$\\mathcal{L}(\\theta)$| |loss function w.r.t. $\\theta$|\n",
    "|$C_\\theta(f_i)$ | |output unitary of the parameterized comb $C_\\theta$ with input unitary $U_{f_i}$|\n",
    "|$I$| | identity matrix|"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-05-08T02:07:54.656762400Z",
     "start_time": "2025-05-08T02:07:54.598503Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "---------VERSION---------\n",
      "quairkit: 0.4.2\n",
      "torch: 2.8.0+cu128\n",
      "torch cuda: 12.8\n",
      "numpy: 2.2.6\n",
      "scipy: 1.15.3\n",
      "matplotlib: 3.10.6\n",
      "---------SYSTEM---------\n",
      "Python version: 3.10.18\n",
      "OS: Linux\n",
      "OS version: #1 SMP Tue Nov 5 00:21:55 UTC 2024\n",
      "---------DEVICE---------\n",
      "CPU:  13th Gen Intel(R) Core(TM) i9-13980HX\n",
      "GPU: (0) NVIDIA GeForce RTX 4090 Laptop GPU\n"
     ]
    }
   ],
   "source": [
    "qkit.print_info()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "api",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.18"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
