Search.setIndex({"alltitles": {"Note": [[3, null], [4, null], [4, null], [4, null], [4, null], [4, null], [4, null], [5, null], [5, null], [5, null], [5, null], [7, null], [8, null], [10, null], [10, null], [10, null], [10, null], [10, null], [10, null], [10, null], [11, null], [12, null], [13, null], [13, null], [24, null], [27, null], [28, null], [28, null], [28, null], [28, null], [31, null], [31, null], [37, null], [38, null], [38, null], [38, null], [38, null], [38, null], [38, null]], "QuAIRKit": [[1, "id1"]], "Warning": [[38, null]], "Welcome to QuAIRKit\u2019s documentation!": [[0, null]], "quairkit": [[1, null]], "quairkit.ansatz": [[2, null]], "quairkit.ansatz.container": [[3, null]], "quairkit.ansatz.layer": [[4, null]], "quairkit.circuit": [[5, null]], "quairkit.core": [[6, null]], "quairkit.core.base": [[7, null]], "quairkit.core.hamiltonian": [[8, null]], "quairkit.core.state": [[9, null]], "quairkit.core.state.backend": [[10, null]], "quairkit.core.state.backend.density_matrix": [[11, null]], "quairkit.core.state.backend.state_vector": [[12, null]], "quairkit.core.state.state": [[13, null]], "quairkit.core.visual": [[14, null]], "quairkit.database": [[15, null]], "quairkit.database.hamiltonian": [[16, null]], "quairkit.database.matrix": [[17, null]], "quairkit.database.random": [[18, null]], "quairkit.database.representation": [[19, null]], "quairkit.database.set": [[20, null]], "quairkit.database.state": [[21, null]], "quairkit.loss": [[22, null]], "quairkit.loss.distance": [[23, null]], "quairkit.loss.measure": [[24, null]], "quairkit.operator": [[25, null]], "quairkit.operator.channel": [[26, null]], "quairkit.operator.channel.base": [[27, null]], "quairkit.operator.channel.common": [[28, null]], "quairkit.operator.channel.custom": [[29, null]], "quairkit.operator.gate": [[30, null]], "quairkit.operator.gate.base": [[31, null]], "quairkit.operator.gate.custom": [[32, null]], "quairkit.operator.gate.encoding": [[33, null]], "quairkit.operator.gate.multi_qubit_gate": [[34, null]], "quairkit.operator.gate.single_qubit_gate": [[35, null]], "quairkit.operator.gate.visual": [[36, null]], "quairkit.operator.special": [[37, null]], "quairkit.qinfo": [[38, null]], "tutorials": [[39, null]]}, "docurls": ["index.html", "quairkit.html", "quairkit.ansatz.html", "quairkit.ansatz.container.html", "quairkit.ansatz.layer.html", "quairkit.circuit.html", "quairkit.core.html", "quairkit.core.base.html", "quairkit.core.hamiltonian.html", "quairkit.core.state.html", "quairkit.core.state.backend.html", "quairkit.core.state.backend.density_matrix.html", "quairkit.core.state.backend.state_vector.html", "quairkit.core.state.state.html", "quairkit.core.visual.html", "quairkit.database.html", "quairkit.database.hamiltonian.html", "quairkit.database.matrix.html", "quairkit.database.random.html", "quairkit.database.representation.html", "quairkit.database.set.html", "quairkit.database.state.html", "quairkit.loss.html", "quairkit.loss.distance.html", "quairkit.loss.measure.html", "quairkit.operator.html", "quairkit.operator.channel.html", "quairkit.operator.channel.base.html", "quairkit.operator.channel.common.html", "quairkit.operator.channel.custom.html", "quairkit.operator.gate.html", "quairkit.operator.gate.base.html", "quairkit.operator.gate.custom.html", "quairkit.operator.gate.encoding.html", "quairkit.operator.gate.multi_qubit_gate.html", "quairkit.operator.gate.single_qubit_gate.html", "quairkit.operator.gate.visual.html", "quairkit.operator.special.html", "quairkit.qinfo.html", "tutorials.html"], "envversion": {"nbsphinx": 4, "sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "indexentries": {"abs_norm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.abs_norm", false]], "amplitude_damping() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.amplitude_damping", false]], "amplitude_damping_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.amplitude_damping_kraus", false]], "amplitudedamping (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.AmplitudeDamping", false]], "amplitudeencoding (class in quairkit.operator.gate.encoding)": [[33, "quairkit.operator.gate.encoding.AmplitudeEncoding", false]], "angleencoding (class in quairkit.operator.gate.encoding)": [[33, "quairkit.operator.gate.encoding.AngleEncoding", false]], "append() (quairkit.ansatz.container.operatorlist method)": [[3, "quairkit.ansatz.container.OperatorList.append", false]], "are_qubits() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.are_qubits", false]], "are_qutrits() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.are_qutrits", false]], "backend (class in quairkit.core.base)": [[7, "quairkit.core.base.Backend", false]], "backend (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.backend", false]], "basisencoding (class in quairkit.operator.gate.encoding)": [[33, "quairkit.operator.gate.encoding.BasisEncoding", false]], "bell_basis() (in module quairkit.database.set)": [[20, "quairkit.database.set.bell_basis", false]], "bell_diagonal_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.bell_diagonal_state", false]], "bell_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.bell_state", false]], "bit_flip() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.bit_flip", false]], "bit_flip_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.bit_flip_kraus", false]], "bit_phase_flip() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.bit_phase_flip", false]], "bit_phase_flip_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.bit_phase_flip_kraus", false]], "bitflip (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.BitFlip", false]], "bitphaseflip (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.BitPhaseFlip", false]], "block_enc_herm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.block_enc_herm", false]], "bra (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.bra", false]], "ccx (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CCX", false]], "ccx() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.ccx", false]], "channel (class in quairkit.operator.channel.base)": [[27, "quairkit.operator.channel.base.Channel", false]], "channel_repr_convert() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.channel_repr_convert", false]], "check() (quairkit.core.state.backend.state static method)": [[10, "quairkit.core.state.backend.State.check", false]], "choi_channel() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.choi_channel", false]], "choi_repr (quairkit.operator.channel.base.channel property)": [[27, "quairkit.operator.channel.base.Channel.choi_repr", false]], "choirepr (class in quairkit.operator.channel.custom)": [[29, "quairkit.operator.channel.custom.ChoiRepr", false]], "circuit (class in quairkit.circuit)": [[5, "quairkit.circuit.Circuit", false]], "clone() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.clone", false]], "cnot (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CNOT", false]], "cnot() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cnot", false]], "cnot() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cnot", false]], "cnot_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cnot_gate", false]], "coefficients (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.coefficients", false]], "collapse (class in quairkit.operator.special)": [[37, "quairkit.operator.special.Collapse", false]], "collapse() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.collapse", false]], "completely_mixed_computational() (in module quairkit.database.state)": [[21, "quairkit.database.state.completely_mixed_computational", false]], "complex_block_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.complex_block_layer", false]], "complex_entangled_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.complex_entangled_layer", false]], "complexblocklayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.ComplexBlockLayer", false]], "complexentangledlayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.ComplexEntangledLayer", false]], "computational_basis() (in module quairkit.database.state)": [[21, "quairkit.database.state.computational_basis", false]], "construct_h_matrix() (quairkit.core.hamiltonian.hamiltonian method)": [[8, "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix", false]], "control_oracle() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.control_oracle", false]], "controloracle (class in quairkit.operator.gate.custom)": [[32, "quairkit.operator.gate.custom.ControlOracle", false]], "cp (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CP", false]], "cp() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cp", false]], "cp() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cp", false]], "cp_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cp_gate", false]], "create_choi_repr() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.create_choi_repr", false]], "create_matrix() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.create_matrix", false]], "crx (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CRX", false]], "crx() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.crx", false]], "crx() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.crx", false]], "crx_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.crx_gate", false]], "cry (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CRY", false]], "cry() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cry", false]], "cry() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cry", false]], "cry_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cry_gate", false]], "crz (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CRZ", false]], "crz() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.crz", false]], "crz() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.crz", false]], "crz_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.crz_gate", false]], "cswap (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CSWAP", false]], "cswap() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cswap", false]], "cswap() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cswap", false]], "cswap_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cswap_gate", false]], "cu (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CU", false]], "cu() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cu", false]], "cu() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cu", false]], "cu_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cu_gate", false]], "cx (in module quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CX", false]], "cy (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CY", false]], "cy() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cy", false]], "cy() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cy", false]], "cy_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cy_gate", false]], "cz (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.CZ", false]], "cz() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cz", false]], "cz() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.cz", false]], "cz_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.cz_gate", false]], "dagger() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.dagger", false]], "data (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.data", false]], "decomp_1qubit() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.decomp_1qubit", false]], "decomp_ctrl_1qubit() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.decomp_ctrl_1qubit", false]], "decompose_pauli_words() (quairkit.core.hamiltonian.hamiltonian method)": [[8, "quairkit.core.hamiltonian.Hamiltonian.decompose_pauli_words", false]], "decompose_with_sites() (quairkit.core.hamiltonian.hamiltonian method)": [[8, "quairkit.core.hamiltonian.Hamiltonian.decompose_with_sites", false]], "density_matrix (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.density_matrix", false]], "depolarizing (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.Depolarizing", false]], "depolarizing() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.depolarizing", false]], "depolarizing_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.depolarizing_kraus", false]], "depth (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.depth", false]], "device (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.device", false]], "diamond_norm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.diamond_norm", false]], "dim (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.dim", false]], "direct_sum() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.direct_sum", false]], "display_in_circuit() (quairkit.operator.gate.base.gate method)": [[31, "quairkit.operator.gate.base.Gate.display_in_circuit", false]], "display_in_circuit() (quairkit.operator.gate.base.paramgate method)": [[31, "quairkit.operator.gate.base.ParamGate.display_in_circuit", false]], "dtype (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.dtype", false]], "evolve() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.evolve", false]], "expand() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.expand", false]], "expand_as() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.expand_as", false]], "expec_val() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.expec_val", false]], "expecval (class in quairkit.loss.measure)": [[24, "quairkit.loss.measure.ExpecVal", false]], "extend() (quairkit.ansatz.container.operatorlist method)": [[3, "quairkit.ansatz.container.OperatorList.extend", false]], "extend() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.extend", false]], "eye() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.eye", false]], "eye_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.eye_gate", false]], "fit() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.fit", false]], "forward() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.forward", false]], "forward() (quairkit.loss.distance.statefidelity method)": [[23, "quairkit.loss.distance.StateFidelity.forward", false]], "forward() (quairkit.loss.distance.tracedistance method)": [[23, "quairkit.loss.distance.TraceDistance.forward", false]], "forward() (quairkit.loss.measure.expecval method)": [[24, "quairkit.loss.measure.ExpecVal.forward", false]], "forward() (quairkit.loss.measure.measure method)": [[24, "quairkit.loss.measure.Measure.forward", false]], "forward() (quairkit.operator.special.collapse method)": [[37, "quairkit.operator.special.Collapse.forward", false]], "forward() (quairkit.operator.special.partialstate method)": [[37, "quairkit.operator.special.PartialState.forward", false]], "forward() (quairkit.operator.special.resetstate method)": [[37, "quairkit.operator.special.ResetState.forward", false]], "func() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.func", false]], "gate (class in quairkit.operator.gate.base)": [[31, "quairkit.operator.gate.base.Gate", false]], "gate_fidelity() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.gate_fidelity", false]], "gate_history (quairkit.ansatz.layer.layer property)": [[4, "quairkit.ansatz.layer.Layer.gate_history", false]], "gate_history (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.gate_history", false]], "gate_history_generation() (quairkit.operator.gate.base.gate method)": [[31, "quairkit.operator.gate.base.Gate.gate_history_generation", false]], "gate_history_generation() (quairkit.operator.gate.base.paramgate method)": [[31, "quairkit.operator.gate.base.ParamGate.gate_history_generation", false]], "gell_mann() (in module quairkit.database.set)": [[20, "quairkit.database.set.gell_mann", false]], "generalized_amplitude_damping() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.generalized_amplitude_damping", false]], "generalized_amplitude_damping_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.generalized_amplitude_damping_kraus", false]], "generalized_depolarizing() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.generalized_depolarizing", false]], "generalized_depolarizing_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.generalized_depolarizing_kraus", false]], "generalizedamplitudedamping (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.GeneralizedAmplitudeDamping", false]], "generalizeddepolarizing (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.GeneralizedDepolarizing", false]], "get_backend() (in module quairkit.core.base)": [[7, "quairkit.core.base.get_backend", false]], "get_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.get_circuit_plot_param", false]], "get_device() (in module quairkit.core.base)": [[7, "quairkit.core.base.get_device", false]], "get_dtype() (in module quairkit.core.base)": [[7, "quairkit.core.base.get_dtype", false]], "get_float_dtype() (in module quairkit.core.base)": [[7, "quairkit.core.base.get_float_dtype", false]], "get_seed() (in module quairkit.core.base)": [[7, "quairkit.core.base.get_seed", false]], "ghz_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.ghz_state", false]], "grad (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.grad", false]], "gradient() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.gradient", false]], "grover_matrix() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.grover_matrix", false]], "h (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.H", false]], "h() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.h", false]], "h() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.h", false]], "h_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.h_gate", false]], "haar_density_operator() (in module quairkit.database.random)": [[18, "quairkit.database.random.haar_density_operator", false]], "haar_orthogonal() (in module quairkit.database.random)": [[18, "quairkit.database.random.haar_orthogonal", false]], "haar_state_vector() (in module quairkit.database.random)": [[18, "quairkit.database.random.haar_state_vector", false]], "haar_unitary() (in module quairkit.database.random)": [[18, "quairkit.database.random.haar_unitary", false]], "hamiltonian (class in quairkit.core.hamiltonian)": [[8, "quairkit.core.hamiltonian.Hamiltonian", false]], "heisenberg_hamiltonian() (in module quairkit.database.hamiltonian)": [[16, "quairkit.database.hamiltonian.heisenberg_hamiltonian", false]], "heisenberg_weyl() (in module quairkit.database.set)": [[20, "quairkit.database.set.heisenberg_weyl", false]], "herm_transform() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.herm_transform", false]], "hessian() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.hessian", false]], "image_to_density_matrix() (in module quairkit.core.state.state)": [[13, "quairkit.core.state.state.image_to_density_matrix", false]], "index_select() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.index_select", false]], "iqpencoding (class in quairkit.operator.gate.encoding)": [[33, "quairkit.operator.gate.encoding.IQPEncoding", false]], "is_choi() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_choi", false]], "is_density_matrix() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_density_matrix", false]], "is_hermitian() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_hermitian", false]], "is_linear() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_linear", false]], "is_positive() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_positive", false]], "is_ppt() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_ppt", false]], "is_projector() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_projector", false]], "is_state_vector() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_state_vector", false]], "is_unitary() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.is_unitary", false]], "isdynamic (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.isdynamic", false]], "ising_hamiltonian() (in module quairkit.database.hamiltonian)": [[16, "quairkit.database.hamiltonian.ising_hamiltonian", false]], "isotropic_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.isotropic_state", false]], "ket (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.ket", false]], "kraus_channel() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.kraus_channel", false]], "kraus_repr (quairkit.operator.channel.base.channel property)": [[27, "quairkit.operator.channel.base.Channel.kraus_repr", false]], "krausrepr (class in quairkit.operator.channel.custom)": [[29, "quairkit.operator.channel.custom.KrausRepr", false]], "layer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.Layer", false]], "linear_entangled_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.linear_entangled_layer", false]], "linearentangledlayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.LinearEntangledLayer", false]], "logarithmic_negativity() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.logarithmic_negativity", false]], "logm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.logm", false]], "matrix (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.matrix", false]], "matrix (quairkit.operator.gate.base.gate property)": [[31, "quairkit.operator.gate.base.Gate.matrix", false]], "measure (class in quairkit.loss.measure)": [[24, "quairkit.loss.measure.Measure", false]], "measure() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.measure", false]], "mixedstate (class in quairkit.core.state.backend.density_matrix)": [[11, "quairkit.core.state.backend.density_matrix.MixedState", false]], "module": [[1, "module-quairkit", false], [2, "module-quairkit.ansatz", false], [3, "module-quairkit.ansatz.container", false], [4, "module-quairkit.ansatz.layer", false], [5, "module-quairkit.circuit", false], [6, "module-quairkit.core", false], [7, "module-quairkit.core.base", false], [8, "module-quairkit.core.hamiltonian", false], [9, "module-quairkit.core.state", false], [10, "module-quairkit.core.state.backend", false], [11, "module-quairkit.core.state.backend.density_matrix", false], [12, "module-quairkit.core.state.backend.state_vector", false], [13, "module-quairkit.core.state.state", false], [14, "module-quairkit.core.visual", false], [15, "module-quairkit.database", false], [16, "module-quairkit.database.hamiltonian", false], [17, "module-quairkit.database.matrix", false], [18, "module-quairkit.database.random", false], [19, "module-quairkit.database.representation", false], [20, "module-quairkit.database.set", false], [21, "module-quairkit.database.state", false], [22, "module-quairkit.loss", false], [23, "module-quairkit.loss.distance", false], [24, "module-quairkit.loss.measure", false], [25, "module-quairkit.operator", false], [26, "module-quairkit.operator.channel", false], [27, "module-quairkit.operator.channel.base", false], [28, "module-quairkit.operator.channel.common", false], [29, "module-quairkit.operator.channel.custom", false], [30, "module-quairkit.operator.gate", false], [31, "module-quairkit.operator.gate.base", false], [32, "module-quairkit.operator.gate.custom", false], [33, "module-quairkit.operator.gate.encoding", false], [34, "module-quairkit.operator.gate.multi_qubit_gate", false], [35, "module-quairkit.operator.gate.single_qubit_gate", false], [36, "module-quairkit.operator.gate.visual", false], [37, "module-quairkit.operator.special", false], [38, "module-quairkit.qinfo", false]], "ms (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.MS", false]], "ms() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.ms", false]], "ms() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.ms", false]], "ms_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.ms_gate", false]], "n_qubits (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.n_qubits", false]], "n_terms (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.n_terms", false]], "negativity() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.negativity", false]], "nkron() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.NKron", false]], "normalize() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.normalize", false]], "num_qubits (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.num_qubits", false]], "num_qubits (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.num_qubits", false]], "num_systems (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.num_systems", false]], "numel() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.numel", false]], "numpy() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.numpy", false]], "of() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.Of", false]], "of_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.Of_gate", false]], "one_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.one_state", false]], "oper_history (quairkit.ansatz.container.operatorlist property)": [[3, "quairkit.ansatz.container.OperatorList.oper_history", false]], "operator (class in quairkit.core.base)": [[7, "quairkit.core.base.Operator", false]], "operatorlist (class in quairkit.ansatz.container)": [[3, "quairkit.ansatz.container.OperatorList", false]], "oracle (class in quairkit.operator.gate.custom)": [[32, "quairkit.operator.gate.custom.Oracle", false]], "oracle() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.oracle", false]], "p (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.P", false]], "p() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.p", false]], "p() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.p", false]], "p_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.p_gate", false]], "p_norm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.p_norm", false]], "param (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.param", false]], "paramgate (class in quairkit.operator.gate.base)": [[31, "quairkit.operator.gate.base.ParamGate", false]], "paramoracle (class in quairkit.operator.gate.custom)": [[32, "quairkit.operator.gate.custom.ParamOracle", false]], "partial_trace() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.partial_trace", false]], "partial_trace_discontiguous() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.partial_trace_discontiguous", false]], "partial_transpose() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.partial_transpose", false]], "partial_transpose_2() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.partial_transpose_2", false]], "partialstate (class in quairkit.operator.special)": [[37, "quairkit.operator.special.PartialState", false]], "pauli_basis() (in module quairkit.database.set)": [[20, "quairkit.database.set.pauli_basis", false]], "pauli_channel() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.pauli_channel", false]], "pauli_decomposition() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.pauli_decomposition", false]], "pauli_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.pauli_kraus", false]], "pauli_str (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.pauli_str", false]], "pauli_str_basis() (in module quairkit.database.set)": [[20, "quairkit.database.set.pauli_str_basis", false]], "pauli_str_convertor() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.pauli_str_convertor", false]], "pauli_str_povm() (in module quairkit.database.set)": [[20, "quairkit.database.set.pauli_str_povm", false]], "pauli_words (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.pauli_words", false]], "pauli_words_matrix (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_matrix", false]], "pauli_words_r (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_r", false]], "paulichannel (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.PauliChannel", false]], "permute_systems() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.permute_systems", false]], "phase() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.phase", false]], "phase_damping() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.phase_damping", false]], "phase_damping_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.phase_damping_kraus", false]], "phase_flip() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.phase_flip", false]], "phase_flip_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.phase_flip_kraus", false]], "phase_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.phase_gate", false]], "phase_space_point() (in module quairkit.database.set)": [[20, "quairkit.database.set.phase_space_point", false]], "phasedamping (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.PhaseDamping", false]], "phaseflip (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.PhaseFlip", false]], "plot() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.plot", false]], "plot_density_matrix_graph() (in module quairkit.core.visual)": [[14, "quairkit.core.visual.plot_density_matrix_graph", false]], "plot_multi_qubits_state_in_bloch_sphere() (in module quairkit.core.visual)": [[14, "quairkit.core.visual.plot_multi_qubits_state_in_bloch_sphere", false]], "plot_rotation_in_bloch_sphere() (in module quairkit.core.visual)": [[14, "quairkit.core.visual.plot_rotation_in_bloch_sphere", false]], "plot_state_in_bloch_sphere() (in module quairkit.core.visual)": [[14, "quairkit.core.visual.plot_state_in_bloch_sphere", false]], "prob_sample() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.prob_sample", false]], "purestate (class in quairkit.core.state.backend.state_vector)": [[12, "quairkit.core.state.backend.state_vector.PureState", false]], "purity() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.purity", false]], "qaoalayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.QAOALayer", false]], "qaoalayerweighted (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.QAOALayerWeighted", false]], "qft_basis() (in module quairkit.database.set)": [[20, "quairkit.database.set.qft_basis", false]], "qft_matrix() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.qft_matrix", false]], "quairkit": [[1, "module-quairkit", false]], "quairkit.ansatz": [[2, "module-quairkit.ansatz", false]], "quairkit.ansatz.container": [[3, "module-quairkit.ansatz.container", false]], "quairkit.ansatz.layer": [[4, "module-quairkit.ansatz.layer", false]], "quairkit.circuit": [[5, "module-quairkit.circuit", false]], "quairkit.core": [[6, "module-quairkit.core", false]], "quairkit.core.base": [[7, "module-quairkit.core.base", false]], "quairkit.core.hamiltonian": [[8, "module-quairkit.core.hamiltonian", false]], "quairkit.core.state": [[9, "module-quairkit.core.state", false]], "quairkit.core.state.backend": [[10, "module-quairkit.core.state.backend", false]], "quairkit.core.state.backend.density_matrix": [[11, "module-quairkit.core.state.backend.density_matrix", false]], "quairkit.core.state.backend.state_vector": [[12, "module-quairkit.core.state.backend.state_vector", false]], "quairkit.core.state.state": [[13, "module-quairkit.core.state.state", false]], "quairkit.core.visual": [[14, "module-quairkit.core.visual", false]], "quairkit.database": [[15, "module-quairkit.database", false]], "quairkit.database.hamiltonian": [[16, "module-quairkit.database.hamiltonian", false]], "quairkit.database.matrix": [[17, "module-quairkit.database.matrix", false]], "quairkit.database.random": [[18, "module-quairkit.database.random", false]], "quairkit.database.representation": [[19, "module-quairkit.database.representation", false]], "quairkit.database.set": [[20, "module-quairkit.database.set", false]], "quairkit.database.state": [[21, "module-quairkit.database.state", false]], "quairkit.loss": [[22, "module-quairkit.loss", false]], "quairkit.loss.distance": [[23, "module-quairkit.loss.distance", false]], "quairkit.loss.measure": [[24, "module-quairkit.loss.measure", false]], "quairkit.operator": [[25, "module-quairkit.operator", false]], "quairkit.operator.channel": [[26, "module-quairkit.operator.channel", false]], "quairkit.operator.channel.base": [[27, "module-quairkit.operator.channel.base", false]], "quairkit.operator.channel.common": [[28, "module-quairkit.operator.channel.common", false]], "quairkit.operator.channel.custom": [[29, "module-quairkit.operator.channel.custom", false]], "quairkit.operator.gate": [[30, "module-quairkit.operator.gate", false]], "quairkit.operator.gate.base": [[31, "module-quairkit.operator.gate.base", false]], "quairkit.operator.gate.custom": [[32, "module-quairkit.operator.gate.custom", false]], "quairkit.operator.gate.encoding": [[33, "module-quairkit.operator.gate.encoding", false]], "quairkit.operator.gate.multi_qubit_gate": [[34, "module-quairkit.operator.gate.multi_qubit_gate", false]], "quairkit.operator.gate.single_qubit_gate": [[35, "module-quairkit.operator.gate.single_qubit_gate", false]], "quairkit.operator.gate.visual": [[36, "module-quairkit.operator.gate.visual", false]], "quairkit.operator.special": [[37, "module-quairkit.operator.special", false]], "quairkit.qinfo": [[38, "module-quairkit.qinfo", false]], "qubit_history (quairkit.circuit.circuit property)": [[5, "quairkit.circuit.Circuit.qubit_history", false]], "r_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.r_state", false]], "random_channel() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_channel", false]], "random_density_matrix() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_density_matrix", false]], "random_hamiltonian_generator() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_hamiltonian_generator", false]], "random_hermitian() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_hermitian", false]], "random_orthogonal_projection() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_orthogonal_projection", false]], "random_pauli_str_generator() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_pauli_str_generator", false]], "random_state() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_state", false]], "random_unitary() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_unitary", false]], "random_unitary_hermitian() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_unitary_hermitian", false]], "random_unitary_with_hermitian_block() (in module quairkit.database.random)": [[18, "quairkit.database.random.random_unitary_with_hermitian_block", false]], "randomize_param() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.randomize_param", false]], "rank (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.rank", false]], "real_block_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.real_block_layer", false]], "real_entangled_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.real_entangled_layer", false]], "realblocklayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.RealBlockLayer", false]], "realentangledlayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.RealEntangledLayer", false]], "relative_entropy() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.relative_entropy", false]], "replacement_choi() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.replacement_choi", false]], "replacementchannel (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.ReplacementChannel", false]], "reset_channel() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.reset_channel", false]], "reset_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.reset_circuit_plot_param", false]], "reset_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.reset_kraus", false]], "reset_sequence() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.reset_sequence", false]], "resetchannel (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.ResetChannel", false]], "resetstate (class in quairkit.operator.special)": [[37, "quairkit.operator.special.ResetState", false]], "rx (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.RX", false]], "rx() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rx", false]], "rx() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.rx", false]], "rx_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rx_gate", false]], "rxx (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.RXX", false]], "rxx() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rxx", false]], "rxx() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.rxx", false]], "rxx_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rxx_gate", false]], "ry (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.RY", false]], "ry() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.ry", false]], "ry() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.ry", false]], "ry_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.ry_gate", false]], "ryy (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.RYY", false]], "ryy() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.ryy", false]], "ryy() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.ryy", false]], "ryy_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.ryy_gate", false]], "rz (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.RZ", false]], "rz() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rz", false]], "rz() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.rz", false]], "rz_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rz_gate", false]], "rzz (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.RZZ", false]], "rzz() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rzz", false]], "rzz() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.rzz", false]], "rzz_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.rzz_gate", false]], "s (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.S", false]], "s() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.s", false]], "s() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.s", false]], "s_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.s_gate", false]], "s_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.s_state", false]], "scale_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.scale_circuit_plot_param", false]], "schmidt_decompose() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.schmidt_decompose", false]], "sdg (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Sdg", false]], "sdg() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.sdg", false]], "sdg() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.sdg", false]], "sdg_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.sdg_gate", false]], "set_backend() (in module quairkit.core.base)": [[7, "quairkit.core.base.set_backend", false]], "set_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[36, "quairkit.operator.gate.visual.set_circuit_plot_param", false]], "set_device() (in module quairkit.core.base)": [[7, "quairkit.core.base.set_device", false]], "set_dtype() (in module quairkit.core.base)": [[7, "quairkit.core.base.set_dtype", false]], "set_gate_info() (quairkit.operator.gate.base.gate method)": [[31, "quairkit.operator.gate.base.Gate.set_gate_info", false]], "set_seed() (in module quairkit.core.base)": [[7, "quairkit.core.base.set_seed", false]], "shift() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.shift", false]], "shift_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.shift_gate", false]], "sigx_p (quairkit.core.hamiltonian.spinops property)": [[8, "quairkit.core.hamiltonian.SpinOps.sigx_p", false]], "sigy_p (quairkit.core.hamiltonian.spinops property)": [[8, "quairkit.core.hamiltonian.SpinOps.sigy_p", false]], "sigz_p (quairkit.core.hamiltonian.spinops property)": [[8, "quairkit.core.hamiltonian.SpinOps.sigz_p", false]], "sites (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.sites", false]], "spinops (class in quairkit.core.hamiltonian)": [[8, "quairkit.core.hamiltonian.SpinOps", false]], "sqrtm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.sqrtm", false]], "state (class in quairkit.core.state.backend)": [[10, "quairkit.core.state.backend.State", false]], "state_fidelity() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.state_fidelity", false]], "statefidelity (class in quairkit.loss.distance)": [[23, "quairkit.loss.distance.StateFidelity", false]], "std_basis() (in module quairkit.database.set)": [[20, "quairkit.database.set.std_basis", false]], "stinespring_channel() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.stinespring_channel", false]], "stinespring_repr (quairkit.operator.channel.base.channel property)": [[27, "quairkit.operator.channel.base.Channel.stinespring_repr", false]], "stinespringrepr (class in quairkit.operator.channel.custom)": [[29, "quairkit.operator.channel.custom.StinespringRepr", false]], "superposition_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.superposition_layer", false]], "superpositionlayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.SuperpositionLayer", false]], "swap (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.SWAP", false]], "swap() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.swap", false]], "swap() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.swap", false]], "swap_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.swap_gate", false]], "system_dim (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.system_dim", false]], "system_seq (quairkit.core.state.backend.density_matrix.mixedstate property)": [[11, "quairkit.core.state.backend.density_matrix.MixedState.system_seq", false]], "system_seq (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.system_seq", false]], "system_seq (quairkit.core.state.backend.state_vector.purestate property)": [[12, "quairkit.core.state.backend.state_vector.PureState.system_seq", false]], "t (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.T", false]], "t() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.t", false]], "t() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.t", false]], "t_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.t_gate", false]], "tdg (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Tdg", false]], "tdg() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.tdg", false]], "tdg() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.tdg", false]], "tdg_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.tdg_gate", false]], "tensor_state() (in module quairkit.core.state.state)": [[13, "quairkit.core.state.state.tensor_state", false]], "terms (quairkit.core.hamiltonian.hamiltonian property)": [[8, "quairkit.core.hamiltonian.Hamiltonian.terms", false]], "thermal_relaxation() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.thermal_relaxation", false]], "thermal_relaxation_kraus() (in module quairkit.database.representation)": [[19, "quairkit.database.representation.thermal_relaxation_kraus", false]], "thermalrelaxation (class in quairkit.operator.channel.common)": [[28, "quairkit.operator.channel.common.ThermalRelaxation", false]], "to() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.to", false]], "to_state() (in module quairkit.core.state.state)": [[13, "quairkit.core.state.state.to_state", false]], "toffoli (in module quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.Toffoli", false]], "toffoli() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.toffoli", false]], "toffoli_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.toffoli_gate", false]], "trace() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.trace", false]], "trace() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.trace", false]], "trace_distance() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.trace_distance", false]], "trace_norm() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.trace_norm", false]], "tracedistance (class in quairkit.loss.distance)": [[23, "quairkit.loss.distance.TraceDistance", false]], "transfer_static() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.transfer_static", false]], "transform() (quairkit.core.state.backend.state method)": [[10, "quairkit.core.state.backend.State.transform", false]], "u3 (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.U3", false]], "u3() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.u3", false]], "u3() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.u3", false]], "u3_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.u3_gate", false]], "uf() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.Uf", false]], "uf_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.Uf_gate", false]], "unitary_matrix() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.unitary_matrix", false]], "universal2() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.universal2", false]], "universal2_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.universal2_gate", false]], "universal3() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.universal3", false]], "universal3_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.universal3_gate", false]], "universal_qudit() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.universal_qudit", false]], "universal_qudits() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.universal_qudits", false]], "universal_three_qubits() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.universal_three_qubits", false]], "universal_two_qubits() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.universal_two_qubits", false]], "universalqudits (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", false]], "universalthreequbits (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.UniversalThreeQubits", false]], "universaltwoqubits (class in quairkit.operator.gate.multi_qubit_gate)": [[34, "quairkit.operator.gate.multi_qubit_gate.UniversalTwoQubits", false]], "update_param() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.update_param", false]], "vec (quairkit.core.state.backend.state property)": [[10, "quairkit.core.state.backend.State.vec", false]], "von_neumann_entropy() (in module quairkit.qinfo)": [[38, "quairkit.qinfo.von_neumann_entropy", false]], "w_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.w_state", false]], "weak_superposition_layer() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.weak_superposition_layer", false]], "weaksuperpositionlayer (class in quairkit.ansatz.layer)": [[4, "quairkit.ansatz.layer.WeakSuperpositionLayer", false]], "x (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.X", false]], "x() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.x", false]], "x() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.x", false]], "x_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.x_gate", false]], "xy_hamiltonian() (in module quairkit.database.hamiltonian)": [[16, "quairkit.database.hamiltonian.xy_hamiltonian", false]], "y (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Y", false]], "y() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.y", false]], "y() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.y", false]], "y_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.y_gate", false]], "z (class in quairkit.operator.gate.single_qubit_gate)": [[35, "quairkit.operator.gate.single_qubit_gate.Z", false]], "z() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.z", false]], "z() (quairkit.circuit.circuit method)": [[5, "quairkit.circuit.Circuit.z", false]], "z_gate() (in module quairkit.database.matrix)": [[17, "quairkit.database.matrix.z_gate", false]], "zero_state() (in module quairkit.database.state)": [[21, "quairkit.database.state.zero_state", false]]}, "objects": {"": [[1, 0, 0, 1, "quairkit", ""]], "quairkit": [[2, 0, 0, 1, "ansatz", ""], [5, 0, 0, 1, "circuit", ""], [6, 0, 0, 1, "core", ""], [15, 0, 0, 1, "database", ""], [22, 0, 0, 1, "loss", ""], [25, 0, 0, 1, "operator", ""], [38, 0, 0, 1, "qinfo", ""]], "quairkit.ansatz": [[3, 0, 0, 1, "container", ""], [4, 0, 0, 1, "layer", ""]], "quairkit.ansatz.container": [[3, 1, 1, 0, "OperatorList", "Sequential container."]], "quairkit.ansatz.container.OperatorList": [[3, 3, 1, 0, "append", "Appends an given operator to the end."], [3, 3, 1, 0, "extend", "Appends an given operator to the end."], [3, 4, 1, 0, "oper_history", "Return the operator history of this Sequential"]], "quairkit.ansatz.container.OperatorList.__init__": [[3, 2, 2, "quairkit.ansatz.container.OperatorList", "operators", "Sequential container."]], "quairkit.ansatz.container.OperatorList.append": [[3, 2, 2, "quairkit.ansatz.container.OperatorList.append", "op", "Appends an given operator to the end."]], "quairkit.ansatz.container.OperatorList.extend": [[3, 2, 2, "quairkit.ansatz.container.OperatorList.extend", "sequential", "Appends an given operator to the end."]], "quairkit.ansatz.layer": [[4, 1, 1, 0, "ComplexBlockLayer", "Weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [4, 1, 1, 0, "ComplexEntangledLayer", "Strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [4, 1, 1, 0, "Layer", "Base class for Layers."], [4, 1, 1, 0, "LinearEntangledLayer", "Linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [4, 1, 1, 0, "QAOALayer", "QAOA driving layers"], [4, 1, 1, 0, "QAOALayerWeighted", "QAOA driving layers with weights"], [4, 1, 1, 0, "RealBlockLayer", "Weakly entangled layers consisting of Ry gates and CNOT gates."], [4, 1, 1, 0, "RealEntangledLayer", "Strongly entangled layers consisting of Ry gates and CNOT gates."], [4, 1, 1, 0, "SuperpositionLayer", "Layers of Hadamard gates."], [4, 1, 1, 0, "WeakSuperpositionLayer", "Layers of Ry gates with a rotation angle \\pi/4."]], "quairkit.ansatz.layer.ComplexBlockLayer.__init__": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.ComplexEntangledLayer.__init__": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.Layer": [[4, 4, 1, 0, "gate_history", "list of gates information of this layer"]], "quairkit.ansatz.layer.Layer.__init__": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this layer is applied."]], "quairkit.ansatz.layer.LinearEntangledLayer.__init__": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.QAOALayer.__init__": [[4, 2, 2, 0, "depth", "depth of layer"], [4, 2, 2, 0, "edges", "edges of the graph"], [4, 2, 2, 0, "nodes", "nodes of the graph"]], "quairkit.ansatz.layer.QAOALayerWeighted.__init__": [[4, 2, 2, 0, "depth", "depth of layer"], [4, 2, 2, 0, "edges", "edges of the graph with weights"], [4, 2, 2, 0, "nodes", "nodes of the graph with weights"]], "quairkit.ansatz.layer.RealBlockLayer.__init__": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.RealEntangledLayer.__init__": [[4, 2, 2, 0, "depth", "Number of layers."], [4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.SuperpositionLayer.__init__": [[4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.WeakSuperpositionLayer.__init__": [[4, 2, 2, 0, "num_qubits", "Total number of qubits."], [4, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.circuit": [[5, 1, 1, 0, "Circuit", "Quantum circuit."]], "quairkit.circuit.Circuit": [[5, 3, 1, 0, "amplitude_damping", "Add amplitude damping channels."], [5, 3, 1, 0, "bit_flip", "Add bit flip channels."], [5, 3, 1, 0, "bit_phase_flip", "Add bit phase flip channels."], [5, 3, 1, 0, "ccx", "Add CCX (Toffoli) gates."], [5, 3, 1, 0, "choi_channel", "Add custom channels in the Choi representation."], [5, 3, 1, 0, "cnot", "Add CNOT gates."], [5, 3, 1, 0, "collapse", "list of qubits to be collapsed. Defaults to 'full'."], [5, 3, 1, 0, "complex_block_layer", "Add weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [5, 3, 1, 0, "complex_entangled_layer", "Add strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [5, 3, 1, 0, "control_oracle", "Add a controlled oracle gate."], [5, 3, 1, 0, "cp", "Add controlled P gates."], [5, 3, 1, 0, "crx", "Add controlled rotation gates about the x-axis."], [5, 3, 1, 0, "cry", "Add controlled rotation gates about the y-axis."], [5, 3, 1, 0, "crz", "Add controlled rotation gates about the z-axis."], [5, 3, 1, 0, "cswap", "Add CSWAP (Fredkin) gates."], [5, 3, 1, 0, "cu", "Add controlled single-qubit rotation gates."], [5, 3, 1, 0, "cy", "Add controlled Y gates."], [5, 3, 1, 0, "cz", "Add controlled Z gates."], [5, 3, 1, 0, "depolarizing", "Add depolarizing channels."], [5, 4, 1, 0, "depth", "Depth of gate sequences."], [5, 3, 1, 0, "extend", "extend for quantum circuit"], [5, 3, 1, 0, "forward", "forward the input"], [5, 4, 1, 0, "gate_history", "List of gates information of circuit"], [5, 3, 1, 0, "generalized_amplitude_damping", "Add generalized amplitude damping channels."], [5, 3, 1, 0, "generalized_depolarizing", "Add a general depolarizing channel."], [5, 4, 1, 0, "grad", "Gradients with respect to the flattened parameters."], [5, 3, 1, 0, "h", "Add single-qubit Hadamard gates."], [5, 4, 1, 0, "isdynamic", "Whether the circuit is dynamic"], [5, 3, 1, 0, "kraus_channel", "Add custom channels in the Kraus representation."], [5, 3, 1, 0, "linear_entangled_layer", "Add linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [5, 3, 1, 0, "ms", "Add M\u00f8lmer-S\u00f8rensen (MS) gates."], [5, 4, 1, 0, "num_qubits", "Number of qubits."], [5, 3, 1, 0, "oracle", "Add an oracle gate."], [5, 3, 1, 0, "p", "Add single-qubit P gates."], [5, 4, 1, 0, "param", "Flattened parameters in the circuit."], [5, 3, 1, 0, "pauli_channel", "Add Pauli channels."], [5, 3, 1, 0, "phase_damping", "Add phase damping channels."], [5, 3, 1, 0, "phase_flip", "Add phase flip channels."], [5, 3, 1, 0, "plot", "display the circuit using matplotlib"], [5, 4, 1, 0, "qubit_history", "gate information on each qubit"], [5, 3, 1, 0, "randomize_param", "Randomize parameters of the circuit based on the initializer.  Current we only support Uniform and Normal initializer."], [5, 3, 1, 0, "real_block_layer", "Add weakly entangled layers consisting of Ry gates and CNOT gates."], [5, 3, 1, 0, "real_entangled_layer", "Add strongly entangled layers consisting of Ry gates and CNOT gates."], [5, 3, 1, 0, "reset_channel", "Add reset channels."], [5, 3, 1, 0, "rx", "Add single-qubit rotation gates about the x-axis."], [5, 3, 1, 0, "rxx", "Add RXX gates."], [5, 3, 1, 0, "ry", "Add single-qubit rotation gates about the y-axis."], [5, 3, 1, 0, "ryy", "Add RYY gates."], [5, 3, 1, 0, "rz", "Add single-qubit rotation gates about the z-axis."], [5, 3, 1, 0, "rzz", "Add RZZ gates."], [5, 3, 1, 0, "s", "Add single-qubit S gates."], [5, 3, 1, 0, "sdg", "Add single-qubit S dagger (S inverse) gates."], [5, 3, 1, 0, "stinespring_channel", "Add custom channels in the Stinespring representation."], [5, 3, 1, 0, "superposition_layer", "Add layers of Hadamard gates."], [5, 3, 1, 0, "swap", "Add SWAP gates."], [5, 3, 1, 0, "t", "Add single-qubit T gates."], [5, 3, 1, 0, "tdg", "Add single-qubit T dagger (T inverse) gates."], [5, 3, 1, 0, "thermal_relaxation", "Add thermal relaxation channels."], [5, 3, 1, 0, "transfer_static", "set stop_gradient of all parameters of the circuit as True"], [5, 3, 1, 0, "u3", "Add single-qubit rotation gates."], [5, 3, 1, 0, "unitary_matrix", "Get the unitary matrix form of the circuit."], [5, 3, 1, 0, "universal_qudits", "TODO add description"], [5, 3, 1, 0, "universal_three_qubits", "Add universal three-qubit gates. One of such a gate requires 81 parameters."], [5, 3, 1, 0, "universal_two_qubits", "Add universal two-qubit gates. One of such a gate requires 15 parameters."], [5, 3, 1, 0, "update_param", "Replace parameters of all/one layer(s) by theta."], [5, 3, 1, 0, "weak_superposition_layer", "Add layers of Ry gates with a rotation angle \\pi/4."], [5, 3, 1, 0, "x", "Add single-qubit X gates."], [5, 3, 1, 0, "y", "Add single-qubit Y gates."], [5, 3, 1, 0, "z", "Add single-qubit Z gates."]], "quairkit.circuit.Circuit.__init__": [[5, 2, 2, 0, "num_qubits", "Number of qubits."]], "quairkit.circuit.Circuit.amplitude_damping": [[5, 2, 2, 0, "gamma", "Damping probability."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.bit_flip": [[5, 2, 2, 0, "prob", "Probability of a bit flip."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.bit_phase_flip": [[5, 2, 2, 0, "prob", "Probability of a bit phase flip."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.ccx": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.choi_channel": [[5, 2, 2, 0, "choi_repr", "Choi representation of this channel."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.cnot": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.collapse": [[5, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [5, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [5, 2, 2, 0, "measure_basis", "The basis of the measurement."], [5, 2, 2, 0, "qubits_idx", "list of qubits to be collapsed."]], "quairkit.circuit.Circuit.complex_block_layer": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.complex_entangled_layer": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.control_oracle": [[5, 2, 2, 0, "gate_name", "name of this oracle."], [5, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [5, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [5, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cp": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crx": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cry": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crz": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cswap": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cu": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cy": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cz": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.depolarizing": [[5, 2, 2, 0, "prob", "Parameter of the depolarizing channel."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.extend": [[5, 2, 2, 0, "cir", "a Circuit or a Sequential"]], "quairkit.circuit.Circuit.forward": [[5, 2, 2, 0, "state", "initial state"]], "quairkit.circuit.Circuit.generalized_amplitude_damping": [[5, 2, 2, 0, "gamma", "Damping probability."], [5, 2, 2, 0, "prob", "Excitation probability."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.generalized_depolarizing": [[5, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli basis."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channel is applied."]], "quairkit.circuit.Circuit.h": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.kraus_channel": [[5, 2, 2, 0, "kraus_oper", "Kraus representation of this channel."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.linear_entangled_layer": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ms": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.oracle": [[5, 2, 2, 0, "gate_name", "name of this oracle."], [5, 2, 2, 0, "latex_name", "latex name of this oracle, default to be the gate name."], [5, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [5, 2, 2, 0, "plot_width", "width of this gate in circuit plot, default to be proportional with the gate name."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.p": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.pauli_channel": [[5, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.phase_damping": [[5, 2, 2, 0, "gamma", "Parameter of the phase damping channel."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.phase_flip": [[5, 2, 2, 0, "prob", "Probability of a phase flip."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.plot": [[5, 2, 2, 0, "dpi", "dots per inches, here is resolution ratio"], [5, 2, 2, 0, "output", "whether return the matplotlib.figure.Figure instance"], [5, 2, 2, 0, "save_path", "the save path of image"], [5, 2, 2, 0, "scale", "scale coefficient of figure, default to 1.0"], [5, 2, 2, 0, "show", "whether execute plt.show()"], [5, 2, 2, 0, "tex", "a bool flag which controls latex fonts of gate display, default to False."]], "quairkit.circuit.Circuit.randomize_param": [[5, 2, 2, 0, "arg0", "first argument of the initializer."], [5, 2, 2, 0, "arg1", "first argument of the initializer."], [5, 2, 2, 0, "initializer_type", "The type of the initializer."]], "quairkit.circuit.Circuit.real_block_layer": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.real_entangled_layer": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.reset_channel": [[5, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.rx": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rxx": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ry": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ryy": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rz": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rzz": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.s": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.sdg": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.stinespring_channel": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."], [5, 2, 2, 0, "stinespring_repr", "Stinespring representation of this channel."]], "quairkit.circuit.Circuit.superposition_layer": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.swap": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.t": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.tdg": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.thermal_relaxation": [[5, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [5, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels are applied."]], "quairkit.circuit.Circuit.u3": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_qudits": [[5, 2, 2, "quairkit.circuit.Circuit.universal_qudits", "param", "TODO add description"], [5, 2, 2, "quairkit.circuit.Circuit.universal_qudits", "param_sharing", "TODO add description"], [5, 2, 2, "quairkit.circuit.Circuit.universal_qudits", "qubits_idx", "TODO add description"]], "quairkit.circuit.Circuit.universal_three_qubits": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_two_qubits": [[5, 2, 2, 0, "param", "Parameters of the gates."], [5, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.update_param": [[5, 2, 2, 0, "idx", "Index of replacement."], [5, 2, 2, 0, "theta", "New parameters"]], "quairkit.circuit.Circuit.weak_superposition_layer": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.x": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.y": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.z": [[5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.core": [[7, 0, 0, 1, "base", ""], [8, 0, 0, 1, "hamiltonian", ""], [9, 0, 0, 1, "state", ""], [14, 0, 0, 1, "visual", ""]], "quairkit.core.base": [[7, 1, 1, 0, "Backend", "Backend classifier in the QuAIRKit."], [7, 1, 1, 0, "Operator", "The basic class to implement the operation in QuAIRKit."], [7, 5, 1, 0, "get_backend", "Get the current backend of QuAIRKit."], [7, 5, 1, 0, "get_device", "Get the current device to save the tensor."], [7, 5, 1, 0, "get_dtype", "Return currently used data type."], [7, 5, 1, 0, "get_float_dtype", "Return currently used float data type."], [7, 5, 1, 0, "get_seed", "Get the currently used seed of QuAIRKit."], [7, 5, 1, 0, "set_backend", "Set the backend implementation of QuAIRKit."], [7, 5, 1, 0, "set_device", "Set the device to save the tensor."], [7, 5, 1, 0, "set_dtype", "Set the data type ."], [7, 5, 1, 0, "set_seed", "Set the global seed of QuAIRKit."]], "quairkit.core.base.Backend.__init__": [[7, 2, 2, "quairkit.core.base.Backend", "value", "Backend classifier in the QuAIRKit."]], "quairkit.core.base.Operator.__init__": [[7, 2, 2, 0, "backend", "The backend implementation of the operator. Defaults to None, which means to use the default backend implementation."], [7, 2, 2, 0, "dtype", "The data type of the operator. Defaults to None, which means to use the default data type."]], "quairkit.core.base.set_backend": [[7, 2, 2, 0, "backend", "The name of the backend."]], "quairkit.core.base.set_device": [[7, 2, 2, 0, "device", "The name of the device."]], "quairkit.core.base.set_dtype": [[7, 2, 2, 0, "dtype", "The dtype can be complex64 and complex128."]], "quairkit.core.base.set_seed": [[7, 2, 2, 0, "seed", "the random seed used in QuAIRKit."]], "quairkit.core.hamiltonian": [[8, 1, 1, 0, "Hamiltonian", "Hamiltonian class in QuAIRKit."], [8, 1, 1, 0, "SpinOps", "The spin operators in matrix forms, could be used to construct Hamiltonian matrix or spin observables."]], "quairkit.core.hamiltonian.Hamiltonian": [[8, 4, 1, 0, "coefficients", "The coefficient of each term in the Hamiltonian, i.e. [1.0, 2.0]."], [8, 3, 1, 0, "construct_h_matrix", "Construct a matrix form of the Hamiltonian in Z-basis."], [8, 3, 1, 0, "decompose_pauli_words", "Decompose pauli_str into coefficients and Pauli strings."], [8, 3, 1, 0, "decompose_with_sites", "Decompose pauli_str into coefficients, a simplified form of Pauli strings, and the indices of qubits on which the Pauli operators act on."], [8, 4, 1, 0, "matrix", "The matrix form of the Hamiltonian."], [8, 4, 1, 0, "n_qubits", "Number of qubits."], [8, 4, 1, 0, "n_terms", "Number of terms of the hamiltonian."], [8, 4, 1, 0, "pauli_str", "The Pauli string corresponding to the hamiltonian."], [8, 4, 1, 0, "pauli_words", "The Pauli word of each term, i.e. ['ZIZ', 'IIX']."], [8, 4, 1, 0, "pauli_words_matrix", "The list of matrices with respect to simplied Pauli words."], [8, 4, 1, 0, "pauli_words_r", "A list of Pauli word (exclude I), i.e. ['ZXZZ', 'Z', 'X']."], [8, 4, 1, 0, "sites", "A list of qubits index corresponding to the hamiltonian."], [8, 4, 1, 0, "terms", "All items in hamiltonian, i.e. [['Z0, Z1'], ['I']]."]], "quairkit.core.hamiltonian.Hamiltonian.__init__": [[8, 2, 2, 0, "compress", "Determines whether the input list will be automatically merged (e.g."], [8, 2, 2, 0, "pauli_str", "A list of Hamiltonian information, e.g."]], "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix": [[8, 2, 2, 0, "qubit_num", "The number of qubits."]], "quairkit.core.hamiltonian.SpinOps": [[8, 4, 1, 0, "sigx_p", "A list of S^x_i operators, different elements correspond to different indices i."], [8, 4, 1, 0, "sigy_p", "A list of S^y_i operators, different elements correspond to different indices i."], [8, 4, 1, 0, "sigz_p", "A list of S^z_i operators, different elements correspond to different indices i."]], "quairkit.core.hamiltonian.SpinOps.__init__": [[8, 2, 2, 0, "size", "Size of the system (number of qubits)."], [8, 2, 2, 0, "use_sparse", "Decide whether to use the sparse matrix to calculate."]], "quairkit.core.state": [[10, 0, 0, 1, "backend", ""], [13, 0, 0, 1, "state", ""]], "quairkit.core.state.backend": [[10, 1, 1, 0, "State", "The abstract base class for quantum states in QuAIRKit."], [11, 0, 0, 1, "density_matrix", ""], [12, 0, 0, 1, "state_vector", ""]], "quairkit.core.state.backend.State": [[10, 3, 1, 0, "are_qubits", "Whether all systems are qubits"], [10, 3, 1, 0, "are_qutrits", "Whether all systems are qutrits"], [10, 4, 1, 0, "backend", "The backend of this state."], [10, 4, 1, 0, "bra", "Dagger of the ket form."], [10, 3, 1, 0, "check", "Assert whether the input data is valid for the specific State class."], [10, 3, 1, 0, "clone", "Return a copy of the quantum state."], [10, 4, 1, 0, "data", "The data tensor of this state"], [10, 4, 1, 0, "density_matrix", "The density matrix representation of this state."], [10, 4, 1, 0, "device", "The device of this state"], [10, 4, 1, 0, "dim", "The dimension of this state"], [10, 4, 1, 0, "dtype", "The data type of this state"], [10, 3, 1, 0, "evolve", "Evolve this state with unitary operators."], [10, 3, 1, 0, "expand", "Expand the batch dimension of the State."], [10, 3, 1, 0, "expand_as", "Expand this tensor to the same size as other."], [10, 3, 1, 0, "expec_val", "The expectation value of the observable with respect to the quantum state."], [10, 3, 1, 0, "fit", "Convert the data to the specified backend."], [10, 3, 1, 0, "index_select", "Indexing elements from the State batch along the given dimension."], [10, 4, 1, 0, "ket", "The ket form of this state"], [10, 3, 1, 0, "measure", "Measure the quantum state"], [10, 3, 1, 0, "normalize", "Normalize this state"], [10, 4, 1, 0, "num_qubits", "The number of qubits of this state, when all systems are qubits"], [10, 4, 1, 0, "num_systems", "The number of systems"], [10, 3, 1, 0, "numel", "The number of elements in this data"], [10, 3, 1, 0, "numpy", "Get the data in numpy."], [10, 4, 1, 0, "rank", "The rank of the state."], [10, 3, 1, 0, "reset_sequence", "reset the system order to default sequence i.e. from 1 to n."], [10, 4, 1, 0, "system_dim", "The list of dimensions for each system"], [10, 4, 1, 0, "system_seq", "The system order of this state"], [10, 3, 1, 0, "to", "Change the property of the data tensor, and return a copy of this State"], [10, 3, 1, 0, "trace", "(Partial) trace of the state"], [10, 3, 1, 0, "transform", "Apply a general linear operator to the state."], [10, 4, 1, 0, "vec", "\\textrm{vec}(|i \\rangle\\langle j|)=|j, i \\rangle"]], "quairkit.core.state.backend.State.__init__": [[10, 2, 2, 0, "data", "tensor array for quantum state(s)."], [10, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [10, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.backend.State.check": [[10, 2, 2, 0, "data", "tensor array for quantum state(s)."], [10, 2, 2, 0, "sys_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer."]], "quairkit.core.state.backend.State.evolve": [[10, 2, 2, 0, "sys_idx", "the system indices to be acted on."], [10, 2, 2, 0, "unitary", "the unitary operator."]], "quairkit.core.state.backend.State.expand": [[10, 2, 2, 0, "batch_dim", "the new batch dimension"]], "quairkit.core.state.backend.State.expand_as": [[10, 2, 2, 0, "other", "the state/tensor to be expanded to."]], "quairkit.core.state.backend.State.expec_val": [[10, 2, 2, 0, "decompose", "If decompose is True, it will return the expectation value of each term."], [10, 2, 2, 0, "hamiltonian", "Input observable."], [10, 2, 2, "quairkit.core.state.backend.State.expec_val", "shots", "The expectation value of the observable with respect to the quantum state."]], "quairkit.core.state.backend.State.fit": [[10, 2, 2, 0, "state_backend", "the target backend of the state."]], "quairkit.core.state.backend.State.index_select": [[10, 2, 2, 0, "dim", "the dimension in which we index"], [10, 2, 2, 0, "index", "the 1-D tensor containing the indices to index"]], "quairkit.core.state.backend.State.measure": [[10, 2, 2, 0, "is_povm", "whether the measurement is a POVM."], [10, 2, 2, 0, "keep_state", "whether to keep the state after measurement."], [10, 2, 2, 0, "measured_op", "measurement operator."], [10, 2, 2, 0, "sys_idx", "the system indices to be measured."]], "quairkit.core.state.backend.State.to": [[10, 2, 2, 0, "device", "the new device of the state."], [10, 2, 2, 0, "dtype", "the new data type of the state."]], "quairkit.core.state.backend.State.trace": [[10, 2, 2, 0, "sys_idx", "the subsystem indices to be traced out."]], "quairkit.core.state.backend.State.transform": [[10, 2, 2, 0, "op", "the input operator."], [10, 2, 2, 0, "repr_type", "the representation type of input operator."], [10, 2, 2, 0, "sys_idx", "the qubit indices to be applied."]], "quairkit.core.state.backend.density_matrix": [[11, 1, 1, 0, "MixedState", "The mixed state class."]], "quairkit.core.state.backend.density_matrix.MixedState": [[11, 4, 1, 0, "system_seq", "The system order of this state"]], "quairkit.core.state.backend.density_matrix.MixedState.__init__": [[11, 2, 2, 0, "data", "tensor array (in density matrix representation) for quantum mixed state(s)."], [11, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [11, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.backend.state_vector": [[12, 1, 1, 0, "PureState", "The pure state class."]], "quairkit.core.state.backend.state_vector.PureState": [[12, 4, 1, 0, "system_seq", "The system order of this state"]], "quairkit.core.state.backend.state_vector.PureState.__init__": [[12, 2, 2, 0, "data", "tensor array in vector representation for quantum pure state(s)."], [12, 2, 2, 0, "sys_dim", "a list of dimensions for each system."], [12, 2, 2, 0, "system_seq", "the system order of this state."]], "quairkit.core.state.state": [[13, 5, 1, 0, "image_to_density_matrix", "Encode image to density matrix"], [13, 5, 1, 0, "tensor_state", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [13, 5, 1, 0, "to_state", "The function to generate a specified state instance."]], "quairkit.core.state.state.image_to_density_matrix": [[13, 2, 2, 0, "image_filepath", "Path to the image file."]], "quairkit.core.state.state.tensor_state": [[13, 2, 2, "quairkit.core.state.state.tensor_state", "args", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [13, 2, 2, 0, "state_a", "State"], [13, 2, 2, 0, "state_b", "State"]], "quairkit.core.state.state.to_state": [[13, 2, 2, 0, "data", "a representation of the quantum state in allowable backend, or an instance of the State class."], [13, 2, 2, 0, "dtype", "Used to specify the data dtype of the data."], [13, 2, 2, 0, "state_backend", "The backend of the state."], [13, 2, 2, 0, "sys_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer."]], "quairkit.core.visual": [[14, 5, 1, 0, "plot_density_matrix_graph", "Density matrix visualization tools"], [14, 5, 1, 0, "plot_multi_qubits_state_in_bloch_sphere", "Displaying the quantum state on the Bloch sphere which has multi qubits."], [14, 5, 1, 0, "plot_rotation_in_bloch_sphere", "Plot the rotation starting from the initial quantum state on the Bloch sphere."], [14, 5, 1, 0, "plot_state_in_bloch_sphere", "Plot the input quantum state on the Bloch sphere."]], "quairkit.core.visual.plot_density_matrix_graph": [[14, 2, 2, 0, "density_matrix", "The state vector or density matrix of quantum state with multi qubits, requiring the number of qubits greater than 1"], [14, 2, 2, 0, "size", "Bar width, between 0 and 1, default is 0.3."]], "quairkit.core.visual.plot_multi_qubits_state_in_bloch_sphere": [[14, 2, 2, 0, "filename", "The name of the picture to be stored."], [14, 2, 2, 0, "save_gif", "Whether to store the gif."], [14, 2, 2, 0, "save_pic", "Whether to store the picture."], [14, 2, 2, 0, "set_color", "To set the specified color, consult the cmap table."], [14, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [14, 2, 2, 0, "state", "List of the input quantum states in the state vector form or the density matrix form."], [14, 2, 2, 0, "view_angle", "View angle."], [14, 2, 2, 0, "view_dist", "View distance."], [14, 2, 2, 0, "which_qubits", "Index of qubits to display, default to be fully displayed."]], "quairkit.core.visual.plot_rotation_in_bloch_sphere": [[14, 2, 2, 0, "color_scheme", "initial color, trace color, and end color, respectively."], [14, 2, 2, 0, "filename", "The name of the gif file to be stored."], [14, 2, 2, 0, "init_state", "Initial quantum state in the state vector form or the density matrix form."], [14, 2, 2, 0, "rotating_angle", "Rotation angle [theta, phi, lam]."], [14, 2, 2, 0, "save_gif", "Whether to store the gif."], [14, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [14, 2, 2, 0, "view_angle", "The first element is the angle [0-360] to the x-y plane, and the second element is the angle [0-360] to the x-z plane."], [14, 2, 2, 0, "view_dist", "View distance."]], "quairkit.core.visual.plot_state_in_bloch_sphere": [[14, 2, 2, 0, "filename", "The name of the gif file to be stored."], [14, 2, 2, 0, "save_gif", "Whether to store the gif."], [14, 2, 2, 0, "set_color", "To set the specified color, consult the cmap table."], [14, 2, 2, 0, "show_arrow", "Whether to show an arrow for each vector."], [14, 2, 2, 0, "state", "List of the input quantum states in the state vector form or the density matrix form."], [14, 2, 2, 0, "view_angle", "View angle."], [14, 2, 2, 0, "view_dist", "View distance."]], "quairkit.database": [[16, 0, 0, 1, "hamiltonian", ""], [17, 0, 0, 1, "matrix", ""], [18, 0, 0, 1, "random", ""], [19, 0, 0, 1, "representation", ""], [20, 0, 0, 1, "set", ""], [21, 0, 0, 1, "state", ""]], "quairkit.database.hamiltonian": [[16, 5, 1, 0, "heisenberg_hamiltonian", "Compute the Heisenberg Hamiltonian"], [16, 5, 1, 0, "ising_hamiltonian", "Compute the Ising Hamiltonian"], [16, 5, 1, 0, "xy_hamiltonian", "Compute the Ising Hamiltonian"]], "quairkit.database.hamiltonian.heisenberg_hamiltonian": [[16, 2, 2, 0, "edges", "A tensor E shape=[3, V, V], where E[0][u][v] is alpha_{uv}, E[1][u][v] is beta_{uv} and E[2][u][v] is gamma_{uv}."]], "quairkit.database.hamiltonian.ising_hamiltonian": [[16, 2, 2, 0, "edges", "A tensor E shape=[V, V], where E[u][v] is gamma_{uv}."], [16, 2, 2, 0, "vertices", "A tensor E shape=[V], where V[k] is beta_{k}."]], "quairkit.database.hamiltonian.xy_hamiltonian": [[16, 2, 2, 0, "edges", "A tensor E shape=[2, V, V], where E[0][u][v] is alpha_{uv} and E[1][u][v] is beta_{uv}."]], "quairkit.database.matrix": [[17, 5, 1, 0, "Of", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [17, 5, 1, 0, "Of_gate", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [17, 5, 1, 0, "Uf", "Construct the unitary matrix maps |x\\rangle|y\\rangle to |x\\rangle|y\\oplus f(x)\\rangle based on a boolean function f."], [17, 5, 1, 0, "Uf_gate", "Construct the unitary matrix maps |x\\rangle|y\\rangle to |x\\rangle|y\\oplus f(x)\\rangle based on a boolean function f."], [17, 5, 1, 0, "cnot", "Generate the matrix"], [17, 5, 1, 0, "cnot_gate", "Generate the matrix"], [17, 5, 1, 0, "cp", "Generate the matrix"], [17, 5, 1, 0, "cp_gate", "Generate the matrix"], [17, 5, 1, 0, "crx", "Generate the matrix"], [17, 5, 1, 0, "crx_gate", "Generate the matrix"], [17, 5, 1, 0, "cry", "Generate the matrix"], [17, 5, 1, 0, "cry_gate", "Generate the matrix"], [17, 5, 1, 0, "crz", "Generate the matrix"], [17, 5, 1, 0, "crz_gate", "Generate the matrix"], [17, 5, 1, 0, "cswap", "Generate the matrix"], [17, 5, 1, 0, "cswap_gate", "Generate the matrix"], [17, 5, 1, 0, "cu", "Generate the matrix"], [17, 5, 1, 0, "cu_gate", "Generate the matrix"], [17, 5, 1, 0, "cy", "Generate the matrix"], [17, 5, 1, 0, "cy_gate", "Generate the matrix"], [17, 5, 1, 0, "cz", "Generate the matrix"], [17, 5, 1, 0, "cz_gate", "Generate the matrix"], [17, 5, 1, 0, "eye", "Generate the matrix"], [17, 5, 1, 0, "eye_gate", "Generate the matrix"], [17, 5, 1, 0, "func", "Construct the unitary matrix maps |x\\rangle to (-1)^{f(x)}|x\\rangle based on a boolean function f."], [17, 5, 1, 0, "grover_matrix", "Construct the Grover operator based on oracle."], [17, 5, 1, 0, "h", "Generate the matrix"], [17, 5, 1, 0, "h_gate", "Generate the matrix"], [17, 5, 1, 0, "ms", "Generate the matrix"], [17, 5, 1, 0, "ms_gate", "Generate the matrix"], [17, 5, 1, 0, "p", "Generate the matrix"], [17, 5, 1, 0, "p_gate", "Generate the matrix"], [17, 5, 1, 0, "phase", "Generate phase operator for qudit"], [17, 5, 1, 0, "phase_gate", "Generate phase operator for qudit"], [17, 5, 1, 0, "qft_matrix", "Construct the quantum fourier transpose (QFT) gate."], [17, 5, 1, 0, "rx", "Generate the matrix"], [17, 5, 1, 0, "rx_gate", "Generate the matrix"], [17, 5, 1, 0, "rxx", "Generate the matrix"], [17, 5, 1, 0, "rxx_gate", "Generate the matrix"], [17, 5, 1, 0, "ry", "Generate the matrix"], [17, 5, 1, 0, "ry_gate", "Generate the matrix"], [17, 5, 1, 0, "ryy", "Generate the matrix"], [17, 5, 1, 0, "ryy_gate", "Generate the matrix"], [17, 5, 1, 0, "rz", "Generate the matrix"], [17, 5, 1, 0, "rz_gate", "Generate the matrix"], [17, 5, 1, 0, "rzz", "Generate the matrix"], [17, 5, 1, 0, "rzz_gate", "Generate the matrix"], [17, 5, 1, 0, "s", "Generate the matrix"], [17, 5, 1, 0, "s_gate", "Generate the matrix"], [17, 5, 1, 0, "sdg", "Generate the matrix"], [17, 5, 1, 0, "sdg_gate", "Generate the matrix"], [17, 5, 1, 0, "shift", "Generate shift operator for qudit"], [17, 5, 1, 0, "shift_gate", "Generate shift operator for qudit"], [17, 5, 1, 0, "swap", "Generate the matrix"], [17, 5, 1, 0, "swap_gate", "Generate the matrix"], [17, 5, 1, 0, "t", "Generate the matrix"], [17, 5, 1, 0, "t_gate", "Generate the matrix"], [17, 5, 1, 0, "tdg", "Generate the matrix"], [17, 5, 1, 0, "tdg_gate", "Generate the matrix"], [17, 5, 1, 0, "toffoli", "Generate the matrix"], [17, 5, 1, 0, "toffoli_gate", "Generate the matrix"], [17, 5, 1, 0, "u3", "Generate the matrix"], [17, 5, 1, 0, "u3_gate", "Generate the matrix"], [17, 5, 1, 0, "universal2", "Generate the matrix"], [17, 5, 1, 0, "universal2_gate", "Generate the matrix"], [17, 5, 1, 0, "universal3", "Generate the matrix"], [17, 5, 1, 0, "universal3_gate", "Generate the matrix"], [17, 5, 1, 0, "universal_qudit", "Generalized GellMann matrix basis were used to construct the universal gate for qudits"], [17, 5, 1, 0, "x", "Generate the matrix"], [17, 5, 1, 0, "x_gate", "Generate the matrix"], [17, 5, 1, 0, "y", "Generate the matrix"], [17, 5, 1, 0, "y_gate", "Generate the matrix"], [17, 5, 1, 0, "z", "Generate the matrix"], [17, 5, 1, 0, "z_gate", "Generate the matrix"]], "quairkit.database.matrix.Of": [[17, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [17, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Of_gate": [[17, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [17, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Uf": [[17, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [17, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.Uf_gate": [[17, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [17, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.cnot": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cnot_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cp": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cp_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crx": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crx_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cry": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cry_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crz": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.crz_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cswap": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cswap_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cu": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cu_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.cy": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cy_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cz": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.cz_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.eye": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.eye_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.func": [[17, 2, 2, 0, "f", "a boolean function f that maps \\{ 0,1 \\}^{n} to \\{ 0,1 \\};"], [17, 2, 2, 0, "n", "the length of input \\{ 0,1 \\}^{n};"]], "quairkit.database.matrix.grover_matrix": [[17, 2, 2, 0, "oracle", "the input oracle A to be rotated."]], "quairkit.database.matrix.h": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.h_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.ms": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.ms_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.p": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.p_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.phase": [[17, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.phase_gate": [[17, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.qft_matrix": [[17, 2, 2, 0, "dtype", "the data type you used, default type is torch.complex64"], [17, 2, 2, 0, "num_qubits", "number of qubits n st."]], "quairkit.database.matrix.rx": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rx_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rxx": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rxx_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ry": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ry_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ryy": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.ryy_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rz": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rz_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rzz": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.rzz_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.s": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.s_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.sdg": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.sdg_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.shift": [[17, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.shift_gate": [[17, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.swap": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.swap_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.t": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.t_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.tdg": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.tdg_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.toffoli": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.toffoli_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.u3": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.u3_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal2": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal2_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal3": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal3_gate": [[17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.universal_qudit": [[17, 2, 2, 0, "dimension", "the dimension of the qudit"], [17, 2, 2, 0, "theta", "the parameter of this matrix."]], "quairkit.database.matrix.x": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.x_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.y": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.y_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.z": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.matrix.z_gate": [[17, 2, 2, 0, "dtype", "the dtype of this matrix."]], "quairkit.database.random": [[18, 5, 1, 0, "haar_density_operator", "randomly generate a density matrix following Haar random"], [18, 5, 1, 0, "haar_orthogonal", "randomly generate an orthogonal matrix following Haar random, referenced by arXiv:math-ph/0609050v2"], [18, 5, 1, 0, "haar_state_vector", "randomly generate a state vector following Haar random"], [18, 5, 1, 0, "haar_unitary", "randomly generate a unitary following Haar random, referenced by arXiv:math-ph/0609050v2"], [18, 5, 1, 0, "random_channel", "Generate a random channel from its Stinespring representation"], [18, 5, 1, 0, "random_density_matrix", "randomly generate an num_qubits-qubit state in density matrix form"], [18, 5, 1, 0, "random_hamiltonian_generator", "Generate a random Hamiltonian."], [18, 5, 1, 0, "random_hermitian", "randomly generate a 2^n \\times 2^n hermitian matrix"], [18, 5, 1, 0, "random_orthogonal_projection", "randomly generate a 2^n \\times 2^n rank-1 orthogonal projector"], [18, 5, 1, 0, "random_pauli_str_generator", "Generate a random observable in list form."], [18, 5, 1, 0, "random_state", "Generate a random quantum state."], [18, 5, 1, 0, "random_unitary", "randomly generate a 2^n \\times 2^n unitary"], [18, 5, 1, 0, "random_unitary_hermitian", "randomly generate a 2^n \\times 2^n hermitian unitary"], [18, 5, 1, 0, "random_unitary_with_hermitian_block", "randomly generate a unitary 2^n \\times 2^n matrix that is a block encoding of a 2^{n/2} \\times 2^{n/2} Hermitian matrix"]], "quairkit.database.random.haar_density_operator": [[18, 2, 2, 0, "is_real", "whether the density matrix is real, default to be False"], [18, 2, 2, 0, "num_qubits", "number of qubits n"], [18, 2, 2, 0, "rank", "rank of density matrix, default to be None refering to full ranks"]], "quairkit.database.random.haar_orthogonal": [[18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.haar_state_vector": [[18, 2, 2, 0, "is_real", "whether the vector is real, default to be False"], [18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.haar_unitary": [[18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_channel": [[18, 2, 2, 0, "num_qubits", "number of qubits n"], [18, 2, 2, 0, "rank", "rank of this Channel."], [18, 2, 2, 0, "size", "batch size."], [18, 2, 2, 0, "target", "target representation, should to be 'choi', 'kraus' or 'stinespring'"]], "quairkit.database.random.random_density_matrix": [[18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_hamiltonian_generator": [[18, 2, 2, 0, "num_qubits", "Number of qubits."], [18, 2, 2, 0, "terms", "Number of terms in the Hamiltonian."]], "quairkit.database.random.random_hermitian": [[18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_orthogonal_projection": [[18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_pauli_str_generator": [[18, 2, 2, 0, "num_qubits", "Number of qubits."], [18, 2, 2, 0, "terms", "Number of terms in the observable."]], "quairkit.database.random.random_state": [[18, 2, 2, 0, "is_real", "If the quantum state only contains the real number."], [18, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."], [18, 2, 2, 0, "rank", "The rank of the density matrix."], [18, 2, 2, 0, "size", "Batch size."]], "quairkit.database.random.random_unitary": [[18, 2, 2, 0, "num_qubits", "number of qubits n"], [18, 2, 2, 0, "size", "batch size."]], "quairkit.database.random.random_unitary_hermitian": [[18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.random.random_unitary_with_hermitian_block": [[18, 2, 2, 0, "is_unitary", "whether the hermitian block is a unitary divided by 2 (for tutorial only)"], [18, 2, 2, 0, "num_qubits", "number of qubits n"]], "quairkit.database.representation": [[19, 5, 1, 0, "amplitude_damping_kraus", "Kraus representation of an amplitude damping channel with form"], [19, 5, 1, 0, "bit_flip_kraus", "Kraus representation of a bit flip channel with form"], [19, 5, 1, 0, "bit_phase_flip_kraus", "Kraus representation of a bit-phase flip channel with form"], [19, 5, 1, 0, "depolarizing_kraus", "Kraus representation of a depolarizing channel with form"], [19, 5, 1, 0, "generalized_amplitude_damping_kraus", "Kraus representation of a generalized amplitude damping channel with form"], [19, 5, 1, 0, "generalized_depolarizing_kraus", "Kraus representation of a generalized depolarizing channel with form"], [19, 5, 1, 0, "pauli_kraus", "Kraus representation of a pauli channel"], [19, 5, 1, 0, "phase_damping_kraus", "Kraus representation of a phase damping channel with form"], [19, 5, 1, 0, "phase_flip_kraus", "Kraus representation of a phase flip channel with form"], [19, 5, 1, 0, "replacement_choi", "Choi representation of a replacement channel"], [19, 5, 1, 0, "reset_kraus", "Kraus representation of a reset channel with form"], [19, 5, 1, 0, "thermal_relaxation_kraus", "Kraus representation of a thermal relaxation channel"]], "quairkit.database.representation.amplitude_damping_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.bit_flip_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.bit_phase_flip_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.depolarizing_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_amplitude_damping_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "gamma", "coefficient \\gamma."], [19, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_depolarizing_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "num_qubits", "number of qubits n of this channel."], [19, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.pauli_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "prob", "a list of three probabilities corresponding to X, Y, Z gate p."]], "quairkit.database.representation.phase_damping_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.phase_flip_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.replacement_choi": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "sigma", "output state of this channel."]], "quairkit.database.representation.reset_kraus": [[19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "prob", "list of two probabilities of resetting to state |0\\rangle and |1\\rangle."]], "quairkit.database.representation.thermal_relaxation_kraus": [[19, 2, 2, 0, "const_t", "list of T_1 and T_2 relaxation time in microseconds."], [19, 2, 2, 0, "dtype", "data type."], [19, 2, 2, 0, "exec_time", "quantum gate execution time in the process of relaxation in nanoseconds."]], "quairkit.database.set": [[20, 5, 1, 0, "bell_basis", "Generate the Bell basis for a 2-qubit system, with each basis state accessible along the first dimension of a tensor."], [20, 5, 1, 0, "gell_mann", "Generate a set of Gell-Mann matrices for a given dimension. These matrices span the entire space dim-by-dim matrices, and they generalize the Pauli operators when dim = 2 and the Gell-Mann operators when dim = 3."], [20, 5, 1, 0, "heisenberg_weyl", "The Heisenberg-Weyl operators are defined as T(a,b) = e^{-(d+1) pi i a b/ d}Z^a X^b."], [20, 5, 1, 0, "pauli_basis", "Generate a Pauli basis."], [20, 5, 1, 0, "pauli_str_basis", "Get the state basis with respect to the Pauli string"], [20, 5, 1, 0, "pauli_str_povm", "Get the povm with respect to the Pauli string"], [20, 5, 1, 0, "phase_space_point", "Generate phase space point operator for qudit"], [20, 5, 1, 0, "qft_basis", "Compute the eigenvectors (eigenbasis) of the Quantum Fourier Transform (QFT) matrix."], [20, 5, 1, 0, "std_basis", "Generate all standard basis states for a given number of qubits."]], "quairkit.database.set.gell_mann": [[20, 2, 2, 0, "dim", "a positive integer indicating the dimension."]], "quairkit.database.set.heisenberg_weyl": [[20, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.pauli_basis": [[20, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_str_basis": [[20, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.pauli_str_povm": [[20, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.phase_space_point": [[20, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.qft_basis": [[20, 2, 2, 0, "num_qubits", "Number of qubits n such that N = 2^n."]], "quairkit.database.set.std_basis": [[20, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state": [[21, 5, 1, 0, "bell_diagonal_state", "Generate a bell diagonal state."], [21, 5, 1, 0, "bell_state", "Generate a bell state."], [21, 5, 1, 0, "completely_mixed_computational", "Generate the density matrix of the completely mixed state."], [21, 5, 1, 0, "computational_basis", "Generate a computational basis state |e_{i}\\rangle , whose i-th element is 1 and all the other elements are 0."], [21, 5, 1, 0, "ghz_state", "Generate a GHZ-state."], [21, 5, 1, 0, "isotropic_state", "Generate the isotropic state."], [21, 5, 1, 0, "one_state", "The function to generate a one state."], [21, 5, 1, 0, "r_state", "Generate an R-state."], [21, 5, 1, 0, "s_state", "Generate the S-state."], [21, 5, 1, 0, "w_state", "Generate a W-state."], [21, 5, 1, 0, "zero_state", "The function to generate a zero state."]], "quairkit.database.state.bell_diagonal_state": [[21, 2, 2, 0, "prob", "The prob of each bell state."]], "quairkit.database.state.bell_state": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.completely_mixed_computational": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.computational_basis": [[21, 2, 2, 0, "index", "Index i of the computational basis state :math`|e_{i}rangle` ."], [21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.ghz_state": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained izn the quantum state."]], "quairkit.database.state.isotropic_state": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."], [21, 2, 2, 0, "prob", "The parameter of the isotropic state to be generated."]], "quairkit.database.state.one_state": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.r_state": [[21, 2, 2, 0, "prob", "The parameter of the R-state to be generated."]], "quairkit.database.state.s_state": [[21, 2, 2, 0, "prob", "The parameter of the S-state to be generated."]], "quairkit.database.state.w_state": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.database.state.zero_state": [[21, 2, 2, 0, "num_qubits", "The number of qubits contained in the quantum state."]], "quairkit.loss": [[23, 0, 0, 1, "distance", ""], [24, 0, 0, 1, "measure", ""]], "quairkit.loss.distance": [[23, 1, 1, 0, "StateFidelity", "The class of the loss function to compute the state fidelity."], [23, 1, 1, 0, "TraceDistance", "The class of the loss function to compute the trace distance."]], "quairkit.loss.distance.StateFidelity": [[23, 3, 1, 0, "forward", "Compute the state fidelity between the input state and the target state."]], "quairkit.loss.distance.StateFidelity.__init__": [[23, 2, 2, 0, "target_state", "The target state to be used to compute the state fidelity."]], "quairkit.loss.distance.StateFidelity.forward": [[23, 2, 2, 0, "state", "The input state which will be used to compute the state fidelity with the target state."]], "quairkit.loss.distance.TraceDistance": [[23, 3, 1, 0, "forward", "Compute the trace distance between the input state and the target state."]], "quairkit.loss.distance.TraceDistance.__init__": [[23, 2, 2, 0, "target_state", "The target state to be used to compute the trace distance."]], "quairkit.loss.distance.TraceDistance.forward": [[23, 2, 2, 0, "state", "The input state which will be used to compute the trace distance with the target state."]], "quairkit.loss.measure": [[24, 1, 1, 0, "ExpecVal", "The class of the loss function to compute the expectation value for the observable."], [24, 1, 1, 0, "Measure", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.ExpecVal": [[24, 3, 1, 0, "forward", "Compute the expectation value of the observable with respect to the input state."]], "quairkit.loss.measure.ExpecVal.__init__": [[24, 2, 2, 0, "hamiltonian", "The input observable."]], "quairkit.loss.measure.ExpecVal.forward": [[24, 2, 2, 0, "decompose", "Defaults to False."], [24, 2, 2, 0, "state", "The input state which will be used to compute the expectation value."]], "quairkit.loss.measure.Measure": [[24, 3, 1, 0, "forward", "Compute the probability of measurement to the input state."]], "quairkit.loss.measure.Measure.__init__": [[24, 2, 2, "quairkit.loss.measure.Measure", "measure_op", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.Measure.forward": [[24, 2, 2, 0, "desired_result", "Specify the results of the measurement to return."], [24, 2, 2, 0, "keep_state", "Whether return the measured state."], [24, 2, 2, 0, "qubits_idx", "The index of the qubits to be measured."], [24, 2, 2, 0, "state", "The quantum state to be measured."]], "quairkit.operator": [[26, 0, 0, 1, "channel", ""], [30, 0, 0, 1, "gate", ""], [37, 0, 0, 1, "special", ""]], "quairkit.operator.channel": [[27, 0, 0, 1, "base", ""], [28, 0, 0, 1, "common", ""], [29, 0, 0, 1, "custom", ""]], "quairkit.operator.channel.base": [[27, 1, 1, 0, "Channel", "Basic class for quantum channels."]], "quairkit.operator.channel.base.Channel": [[27, 4, 1, 0, "choi_repr", "Choi representation of a channel"], [27, 4, 1, 0, "kraus_repr", "Kraus representation of a channel"], [27, 4, 1, 0, "stinespring_repr", "Stinespring representation of a channel"]], "quairkit.operator.channel.base.Channel.__init__": [[27, 2, 2, 0, "check_legality", "whether check the completeness of the representation if provided."], [27, 2, 2, 0, "num_acted_qubits", "the number of qubits that this channel acts on."], [27, 2, 2, 0, "num_qubits", "total number of qubits."], [27, 2, 2, 0, "qubits_idx", "indices of the qubits on which this channel acts on."], [27, 2, 2, 0, "representation", "the representation of this channel."], [27, 2, 2, 0, "type_repr", "type of a representation."]], "quairkit.operator.channel.common": [[28, 1, 1, 0, "AmplitudeDamping", "A collection of amplitude damping channels."], [28, 1, 1, 0, "BitFlip", "A collection of bit flip channels."], [28, 1, 1, 0, "BitPhaseFlip", "A collection of bit phase flip channels."], [28, 1, 1, 0, "Depolarizing", "A collection of depolarizing channels."], [28, 1, 1, 0, "GeneralizedAmplitudeDamping", "A collection of generalized amplitude damping channels."], [28, 1, 1, 0, "GeneralizedDepolarizing", "A generalized depolarizing channel."], [28, 1, 1, 0, "PauliChannel", "A collection of Pauli channels."], [28, 1, 1, 0, "PhaseDamping", "A collection of phase damping channels."], [28, 1, 1, 0, "PhaseFlip", "A collection of phase flip channels."], [28, 1, 1, 0, "ReplacementChannel", "A collection of quantum replacement channels."], [28, 1, 1, 0, "ResetChannel", "A collection of reset channels."], [28, 1, 1, 0, "ThermalRelaxation", "A collection of thermal relaxation channels."]], "quairkit.operator.channel.common.AmplitudeDamping.__init__": [[28, 2, 2, 0, "gamma", "Damping probability."], [28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitFlip.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Probability of a bit flip."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitPhaseFlip.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Probability of a bit phase flip."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.Depolarizing.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Parameter of the depolarizing channels."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedAmplitudeDamping.__init__": [[28, 2, 2, 0, "gamma", "Damping probability."], [28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Excitation probability."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedDepolarizing.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "probability p."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."]], "quairkit.operator.channel.common.PauliChannel.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseDamping.__init__": [[28, 2, 2, 0, "gamma", "Parameter of the phase damping channels."], [28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseFlip.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Probability of a phase flip."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ReplacementChannel.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."], [28, 2, 2, 0, "sigma", "The state to be replaced."]], "quairkit.operator.channel.common.ResetChannel.__init__": [[28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ThermalRelaxation.__init__": [[28, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [28, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [28, 2, 2, 0, "num_qubits", "Total number of qubits."], [28, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.custom": [[29, 1, 1, 0, "ChoiRepr", "A custom channel in Choi representation."], [29, 1, 1, 0, "KrausRepr", "A custom channel in Kraus representation."], [29, 1, 1, 0, "StinespringRepr", "A custom channel in Stinespring representation."]], "quairkit.operator.channel.custom.ChoiRepr.__init__": [[29, 2, 2, 0, "choi_repr", "Choi operator of this channel."], [29, 2, 2, 0, "num_qubits", "Total number of qubits."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this channel acts."]], "quairkit.operator.channel.custom.KrausRepr.__init__": [[29, 2, 2, 0, "kraus_repr", "list of Kraus operators of this channel."], [29, 2, 2, 0, "num_qubits", "Total number of qubits."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this channel acts."]], "quairkit.operator.channel.custom.StinespringRepr.__init__": [[29, 2, 2, 0, "num_qubits", "Total number of qubits."], [29, 2, 2, 0, "qubits_idx", "Indices of the qubits on which this channel acts."], [29, 2, 2, 0, "stinespring_mat", "Stinespring matrix that represents this channel."]], "quairkit.operator.gate": [[31, 0, 0, 1, "base", ""], [32, 0, 0, 1, "custom", ""], [33, 0, 0, 1, "encoding", ""], [34, 0, 0, 1, "multi_qubit_gate", ""], [35, 0, 0, 1, "single_qubit_gate", ""], [36, 0, 0, 1, "visual", ""]], "quairkit.operator.gate.base": [[31, 1, 1, 0, "Gate", "Base class for quantum gates."], [31, 1, 1, 0, "ParamGate", "Base class for quantum parameterized gates."]], "quairkit.operator.gate.base.Gate": [[31, 3, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [31, 3, 1, 0, "gate_history_generation", "determine self.gate_history"], [31, 4, 1, 0, "matrix", "Unitary matrix of this gate"], [31, 3, 1, 0, "set_gate_info", "the interface to set self.gate_info"]], "quairkit.operator.gate.base.Gate.__init__": [[31, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [31, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit."], [31, 2, 2, 0, "matrix", "the matrix of this gate."], [31, 2, 2, 0, "num_acted_qubits", "the number of qubits that this gate acts on."], [31, 2, 2, 0, "num_qubits", "total number of qubits."], [31, 2, 2, 0, "qubits_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.base.Gate.display_in_circuit": [[31, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [31, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.base.Gate.set_gate_info": [[31, 2, 2, 0, "kwargs", "parameters to set self.gate_info"]], "quairkit.operator.gate.base.ParamGate": [[31, 3, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [31, 3, 1, 0, "gate_history_generation", "determine self.gate_history when gate is parameterized"]], "quairkit.operator.gate.base.ParamGate.__init__": [[31, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [31, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [31, 2, 2, 0, "generator", "function that generates the unitary matrix of this gate."], [31, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [31, 2, 2, 0, "num_acted_qubits", "the number of qubits that this gate acts on."], [31, 2, 2, 0, "num_qubits", "total number of qubits."], [31, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [31, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [31, 2, 2, 0, "qubits_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.base.ParamGate.display_in_circuit": [[31, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [31, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.custom": [[32, 1, 1, 0, "ControlOracle", "A controlled oracle as a gate."], [32, 1, 1, 0, "Oracle", "An oracle as a gate."], [32, 1, 1, 0, "ParamOracle", "An parameterized oracle as a gate"]], "quairkit.operator.gate.custom.ControlOracle.__init__": [[32, 2, 2, "quairkit.operator.gate.custom.ControlOracle", "gate_info", "A controlled oracle as a gate."], [32, 2, 2, 0, "num_qubits", "Total number of qubits."], [32, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.custom.Oracle.__init__": [[32, 2, 2, "quairkit.operator.gate.custom.Oracle", "gate_info", "An oracle as a gate."], [32, 2, 2, 0, "num_qubits", "Total number of qubits."], [32, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.custom.ParamOracle.__init__": [[32, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit."], [32, 2, 2, 0, "generator", "function that generates the oracle."], [32, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [32, 2, 2, 0, "num_qubits", "total number of qubits."], [32, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [32, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [32, 2, 2, 0, "qubits_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.encoding": [[33, 1, 1, 0, "AmplitudeEncoding", "Amplitude encoding gate for encoding input classical data into quantum states."], [33, 1, 1, 0, "AngleEncoding", "Angle encoding gate for encoding input classical data into quantum states."], [33, 1, 1, 0, "BasisEncoding", "Basis encoding gate for encoding input classical data into quantum states."], [33, 1, 1, 0, "IQPEncoding", "IQP style encoding gate for encoding input classical data into quantum states."]], "quairkit.operator.gate.encoding.AmplitudeEncoding.__init__": [[33, 2, 2, 0, "num_qubits", "Total number of qubits."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.encoding.AngleEncoding.__init__": [[33, 2, 2, 0, "encoding_gate", "The type of quantum gates used for encoding, which should be one of \"rx\", \"ry\", and \"rz\"."], [33, 2, 2, 0, "feature", "Vector to be encoded."], [33, 2, 2, 0, "num_qubits", "Total number of qubits."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.encoding.BasisEncoding.__init__": [[33, 2, 2, 0, "num_qubits", "Total number of qubits."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.encoding.IQPEncoding.__init__": [[33, 2, 2, 0, "feature", "Vector to be encoded."], [33, 2, 2, 0, "num_qubits", "Total number of qubits."], [33, 2, 2, 0, "num_repeat", "Number of encoding layers."], [33, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate": [[34, 1, 1, 0, "CCX", "A collection of CCX (Toffoli) gates."], [34, 1, 1, 0, "CNOT", "A collection of CNOT gates."], [34, 1, 1, 0, "CP", "A collection of controlled P gates."], [34, 1, 1, 0, "CRX", "A collection of controlled rotation gates about the x-axis."], [34, 1, 1, 0, "CRY", "A collection of controlled rotation gates about the y-axis."], [34, 1, 1, 0, "CRZ", "A collection of controlled rotation gates about the z-axis."], [34, 1, 1, 0, "CSWAP", "A collection of CSWAP (Fredkin) gates."], [34, 1, 1, 0, "CU", "A collection of controlled single-qubit rotation gates."], [34, 6, 1, 0, "CX", "alias of CNOT"], [34, 1, 1, 0, "CY", "A collection of controlled Y gates."], [34, 1, 1, 0, "CZ", "A collection of controlled Z gates."], [34, 1, 1, 0, "MS", "A collection of M\u00f8lmer-S\u00f8rensen (MS) gates for trapped ion devices."], [34, 1, 1, 0, "RXX", "A collection of RXX gates."], [34, 1, 1, 0, "RYY", "A collection of RYY gates."], [34, 1, 1, 0, "RZZ", "A collection of RZZ gates."], [34, 1, 1, 0, "SWAP", "A collection of SWAP gates."], [34, 6, 1, 0, "Toffoli", "alias of CCX"], [34, 1, 1, 0, "UniversalQudits", "TODO add description"], [34, 1, 1, 0, "UniversalThreeQubits", "A collection of universal three-qubit gates. One of such a gate requires 81 parameters."], [34, 1, 1, 0, "UniversalTwoQubits", "A collection of universal two-qubit gates. One of such a gate requires 15 parameters."]], "quairkit.operator.gate.multi_qubit_gate.CCX.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CNOT.__init__": [[34, 2, 2, 0, "cnot_idx", "CNOT gate index."], [34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CP.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRX.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRY.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRZ.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CSWAP.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CU.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CY.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CZ.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.MS.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RXX.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RYY.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RZZ.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.SWAP.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.UniversalQudits.__init__": [[34, 2, 2, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", "param", "TODO add description"], [34, 2, 2, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", "param_sharing", "TODO add description"], [34, 2, 2, "quairkit.operator.gate.multi_qubit_gate.UniversalQudits", "qubits_idx", "TODO add description"]], "quairkit.operator.gate.multi_qubit_gate.UniversalThreeQubits.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.UniversalTwoQubits.__init__": [[34, 2, 2, 0, "num_qubits", "Total number of qubits."], [34, 2, 2, 0, "param", "Parameters of the gates."], [34, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [34, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate": [[35, 1, 1, 0, "H", "A collection of single-qubit Hadamard gates."], [35, 1, 1, 0, "P", "A collection of single-qubit P gates."], [35, 1, 1, 0, "RX", "A collection of single-qubit rotation gates about the x-axis."], [35, 1, 1, 0, "RY", "A collection of single-qubit rotation gates about the y-axis."], [35, 1, 1, 0, "RZ", "A collection of single-qubit rotation gates about the z-axis."], [35, 1, 1, 0, "S", "A collection of single-qubit S gates."], [35, 1, 1, 0, "Sdg", "A collection of single-qubit S dagger (S inverse) gates."], [35, 1, 1, 0, "T", "A collection of single-qubit T gates."], [35, 1, 1, 0, "Tdg", "A collection of single-qubit T dagger (T inverse) gates."], [35, 1, 1, 0, "U3", "A collection of single-qubit rotation gates."], [35, 1, 1, 0, "X", "A collection of single-qubit X gates."], [35, 1, 1, 0, "Y", "A collection of single-qubit Y gates."], [35, 1, 1, 0, "Z", "A collection of single-qubit Z gates."]], "quairkit.operator.gate.single_qubit_gate.H.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.P.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RX.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RY.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RZ.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.S.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Sdg.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.T.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Tdg.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.U3.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "param", "Parameters of the gates."], [35, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.X.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Y.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Z.__init__": [[35, 2, 2, 0, "num_qubits", "Total number of qubits."], [35, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.visual": [[36, 5, 1, 0, "get_circuit_plot_param", "The output function of __CIRCUIT_PLOT_PARAM dictionary"], [36, 5, 1, 0, "reset_circuit_plot_param", "The reset function of __CIRCUIT_PLOT_PARAM dictionary"], [36, 5, 1, 0, "scale_circuit_plot_param", "The scale function of __CIRCUIT_PLOT_PARAM dictionary"], [36, 5, 1, 0, "set_circuit_plot_param", "The set function of __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.gate.visual.scale_circuit_plot_param": [[36, 2, 2, 0, "scale", "the scalar for scaling the elements in the figure"]], "quairkit.operator.gate.visual.set_circuit_plot_param": [[36, 2, 2, 0, "kwargs", "parameters to update the __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.special": [[37, 1, 1, 0, "Collapse", "The class to compute the collapse of the quantum state."], [37, 1, 1, 0, "PartialState", "The class to obtain the partial quantum state. It will be implemented soon."], [37, 1, 1, 0, "ResetState", "The class to reset the quantum state. It will be implemented soon."]], "quairkit.operator.special.Collapse": [[37, 3, 1, 0, "forward", "Compute the collapse of the input state."]], "quairkit.operator.special.Collapse.__init__": [[37, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [37, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [37, 2, 2, 0, "measure_basis", "The basis of the measurement."], [37, 2, 2, 0, "num_qubits", "Total number of qubits."], [37, 2, 2, 0, "qubits_idx", "list of qubits to be collapsed."]], "quairkit.operator.special.Collapse.forward": [[37, 2, 2, 0, "state", "The input state, which will be collapsed"]], "quairkit.operator.special.PartialState": [[37, 3, 1, 0, "forward", "The forward function."]], "quairkit.operator.special.PartialState.forward": [[37, 2, 2, "quairkit.operator.special.PartialState.forward", "inputs", "The forward function."], [37, 2, 2, "quairkit.operator.special.PartialState.forward", "kwargs", "The forward function."]], "quairkit.operator.special.ResetState": [[37, 3, 1, 0, "forward", "The forward function."]], "quairkit.operator.special.ResetState.forward": [[37, 2, 2, "quairkit.operator.special.ResetState.forward", "inputs", "The forward function."], [37, 2, 2, "quairkit.operator.special.ResetState.forward", "kwargs", "The forward function."]], "quairkit.qinfo": [[38, 5, 1, 0, "NKron", "calculate Kronecker product of at least two matrices"], [38, 5, 1, 0, "abs_norm", "tool for calculation of matrix norm"], [38, 5, 1, 0, "block_enc_herm", "generate a (qubitized) block encoding of hermitian mat"], [38, 5, 1, 0, "channel_repr_convert", "convert the given representation of a channel to the target implementation"], [38, 5, 1, 0, "create_choi_repr", "Create the Choi representation of a linear map with input checks."], [38, 5, 1, 0, "create_matrix", "Create a matrix representation of a linear map without needing to specify the output dimension."], [38, 5, 1, 0, "dagger", "tool for calculation of matrix dagger"], [38, 5, 1, 0, "decomp_1qubit", "Decompose a single-qubit unitary operator into Z-Y-Z rotation angles."], [38, 5, 1, 0, "decomp_ctrl_1qubit", "Decompose a controlled single-qubit unitary operator into its components."], [38, 5, 1, 0, "diamond_norm", "Calculate the diamond norm of input."], [38, 5, 1, 0, "direct_sum", "calculate the direct sum of A and B"], [38, 5, 1, 0, "gate_fidelity", "calculate the fidelity between gates"], [38, 5, 1, 0, "gradient", "Computes the gradient of a given loss function with respect to its input variable."], [38, 5, 1, 0, "herm_transform", "function transformation for Hermitian matrix"], [38, 5, 1, 0, "hessian", "Computes the Hessian matrix of a given loss function with respect to its input variables."], [38, 5, 1, 0, "is_choi", "Support batch input."], [38, 5, 1, 0, "is_density_matrix", "Support batch input"], [38, 5, 1, 0, "is_hermitian", "Support batch input."], [38, 5, 1, 0, "is_linear", "Check if the provided function 'func' is linear."], [38, 5, 1, 0, "is_positive", "Support batch input."], [38, 5, 1, 0, "is_ppt", "Support batch input."], [38, 5, 1, 0, "is_projector", "Support batch input."], [38, 5, 1, 0, "is_state_vector", "Support batch input."], [38, 5, 1, 0, "is_unitary", "Support batch input."], [38, 5, 1, 0, "logarithmic_negativity", "Calculate the Logarithmic Negativity E_N = ||\\rho^{T_A}|| of the input quantum state."], [38, 5, 1, 0, "logm", "Calculate log of a matrix"], [38, 5, 1, 0, "negativity", "Compute the Negativity N = ||\\frac{\\rho^{T_A}-1}{2}|| of the input quantum state."], [38, 5, 1, 0, "p_norm", "tool for calculation of Schatten p-norm"], [38, 5, 1, 0, "partial_trace", "Calculate the partial trace of the quantum state."], [38, 5, 1, 0, "partial_trace_discontiguous", "Calculate the partial trace of the quantum state with arbitrarily selected subsystem"], [38, 5, 1, 0, "partial_transpose", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [38, 5, 1, 0, "partial_transpose_2", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [38, 5, 1, 0, "pauli_decomposition", "Decompose the matrix by the Pauli basis."], [38, 5, 1, 0, "pauli_str_convertor", "Concatenate the input observable with coefficient 1."], [38, 5, 1, 0, "permute_systems", "Permute quantum system based on a permute list"], [38, 5, 1, 0, "prob_sample", "Sample from a probability distribution."], [38, 5, 1, 0, "purity", "Calculate the purity of a quantum state."], [38, 5, 1, 0, "relative_entropy", "Calculate the relative entropy of two quantum states."], [38, 5, 1, 0, "schmidt_decompose", "Calculate the Schmidt decomposition of a quantum state \\lvert\\psi\\rangle=\\sum_ic_i\\lvert i_A\\rangle\\otimes\\lvert i_B \\rangle."], [38, 5, 1, 0, "sqrtm", "Calculate square root of a matrix"], [38, 5, 1, 0, "state_fidelity", "Calculate the fidelity of two quantum states."], [38, 5, 1, 0, "trace", "Return the sum along diagonals of the tensor."], [38, 5, 1, 0, "trace_distance", "Calculate the trace distance of two quantum states."], [38, 5, 1, 0, "trace_norm", "tool for calculation of trace norm"], [38, 5, 1, 0, "von_neumann_entropy", "Calculate the von Neumann entropy of a quantum state."]], "quairkit.qinfo.NKron": [[38, 2, 2, "quairkit.qinfo.NKron", "args", "calculate Kronecker product of at least two matrices"], [38, 2, 2, 0, "matrix_A", "matrix, as torch.Tensor or numpy.ndarray"], [38, 2, 2, 0, "matrix_B", "matrix, as torch.Tensor or numpy.ndarray"]], "quairkit.qinfo.abs_norm": [[38, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.block_enc_herm": [[38, 2, 2, 0, "mat", "matrix to be block encoded"], [38, 2, 2, 0, "num_block_qubits", "ancilla qubits used in block encoding"]], "quairkit.qinfo.channel_repr_convert": [[38, 2, 2, 0, "representation", "input representation"], [38, 2, 2, 0, "source", "input form, should be 'choi', 'kraus' or 'stinespring'"], [38, 2, 2, 0, "target", "target form, should be 'choi', 'kraus' or 'stinespring'"], [38, 2, 2, 0, "tol", "error tolerance for the conversion from Choi, 10^{-6} by default"]], "quairkit.qinfo.create_choi_repr": [[38, 2, 2, 0, "input_dim", "The dimension of the space in which the linear map operates."], [38, 2, 2, "quairkit.qinfo.create_choi_repr", "input_dtype", "Create the Choi representation of a linear map with input checks."], [38, 2, 2, 0, "linear_map", "A function representing the linear map, which takes and returns a square matrix."]], "quairkit.qinfo.create_matrix": [[38, 2, 2, 0, "input_dim", "The dimension of the input space."], [38, 2, 2, "quairkit.qinfo.create_matrix", "input_dtype", "Create a matrix representation of a linear map without needing to specify the output dimension."], [38, 2, 2, 0, "linear_map", "A function representing the linear map, which takes an input_dim-dimensional vector and returns a vector."]], "quairkit.qinfo.dagger": [[38, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.decomp_1qubit": [[38, 2, 2, 0, "return_global", "If set to True, the global phase angle alpha is also returned."], [38, 2, 2, 0, "unitary", "A batch of 2x2 unitary matrices representing single-qubit gates, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.decomp_ctrl_1qubit": [[38, 2, 2, 0, "unitary", "A 2x2 unitary matrix representing the single-qubit gate, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.diamond_norm": [[38, 2, 2, 0, "channel_repr", "A Channel or a torch.Tensor instance."], [38, 2, 2, 0, "dim_io", "The input and output dimensions."], [38, 2, 2, "quairkit.qinfo.diamond_norm", "kwargs", "Calculate the diamond norm of input."]], "quairkit.qinfo.direct_sum": [[38, 2, 2, 0, "A", "m \\times n matrix"], [38, 2, 2, 0, "B", "p \\times q matrix"]], "quairkit.qinfo.gate_fidelity": [[38, 2, 2, 0, "U", "quantum gate U  in matrix form"], [38, 2, 2, 0, "V", "quantum gate V  in matrix form"]], "quairkit.qinfo.gradient": [[38, 2, 2, 0, "loss_function", "A loss function to compute the gradient."], [38, 2, 2, 0, "n", "The number of iterations for gradient computation."], [38, 2, 2, 0, "var", "A vector of shape (m,1) as the input variables for the loss function."]], "quairkit.qinfo.herm_transform": [[38, 2, 2, 0, "fcn", "function f that can be expanded by Taylor series"], [38, 2, 2, 0, "ignore_zero", "whether ignore eigenspaces with zero eigenvalue, defaults to be False"], [38, 2, 2, 0, "mat", "hermitian matrix H"]], "quairkit.qinfo.hessian": [[38, 2, 2, 0, "loss_function", "The loss function to compute the Hessian."], [38, 2, 2, 0, "var", "A matrix of shape (n, m) as input variables for the loss function."]], "quairkit.qinfo.is_choi": [[38, 2, 2, 0, "op", "matrix form of the linear operation."]], "quairkit.qinfo.is_density_matrix": [[38, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [38, 2, 2, 0, "rho", "density matrix candidate"], [38, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."]], "quairkit.qinfo.is_hermitian": [[38, 2, 2, 0, "eps", "tolerance of error"], [38, 2, 2, 0, "mat", "hermitian candidate P"], [38, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."]], "quairkit.qinfo.is_linear": [[38, 2, 2, 0, "eps", "An optional tolerance value used to determine if the function's behavior is close enough to linear."], [38, 2, 2, 0, "func", "A callable function to be tested."], [38, 2, 2, 0, "info", "A parameter specifying the shape of the input for 'func'."], [38, 2, 2, "quairkit.qinfo.is_linear", "input_dtype", "Check if the provided function 'func' is linear."]], "quairkit.qinfo.is_positive": [[38, 2, 2, 0, "eps", "tolerance of error"], [38, 2, 2, 0, "mat", "positive operator candidate P"], [38, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."]], "quairkit.qinfo.is_ppt": [[38, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.is_projector": [[38, 2, 2, 0, "eps", "tolerance of error"], [38, 2, 2, 0, "mat", "projector candidate P"]], "quairkit.qinfo.is_state_vector": [[38, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [38, 2, 2, 0, "sys_dim", "dimension of subsystems, default to be 2 i.e."], [38, 2, 2, 0, "vec", "state vector candidate x"]], "quairkit.qinfo.is_unitary": [[38, 2, 2, 0, "eps", "tolerance of error"], [38, 2, 2, 0, "mat", "unitary candidate P"]], "quairkit.qinfo.logarithmic_negativity": [[38, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.logm": [[38, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.negativity": [[38, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.p_norm": [[38, 2, 2, 0, "mat", "matrix"], [38, 2, 2, 0, "p", "p-norm parameter"]], "quairkit.qinfo.partial_trace": [[38, 2, 2, 0, "A_or_B", "1 or 2."], [38, 2, 2, 0, "dim1", "The dimension of system A."], [38, 2, 2, 0, "dim2", "The dimension of system B."], [38, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.partial_trace_discontiguous": [[38, 2, 2, 0, "preserve_qubits", "Remaining qubits, default is None, indicate all qubits remain."], [38, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.partial_transpose": [[38, 2, 2, 0, "density_op", "Density matrix form of the quantum state."], [38, 2, 2, 0, "n", "Number of qubits of subsystem A, with qubit indices as [0, 1, ..., n-1]"]], "quairkit.qinfo.partial_transpose_2": [[38, 2, 2, 0, "density_op", "Density matrix form of the quantum state."], [38, 2, 2, 0, "sub_system", "1 or 2."]], "quairkit.qinfo.pauli_decomposition": [[38, 2, 2, 0, "mat", "the matrix to be decomposed"]], "quairkit.qinfo.pauli_str_convertor": [[38, 2, 2, 0, "observable", "The observable to be concatenated with coefficient 1."]], "quairkit.qinfo.permute_systems": [[38, 2, 2, "quairkit.qinfo.permute_systems", "dim_list", "Permute quantum system based on a permute list"], [38, 2, 2, 0, "mat", "A given matrix representation which is usually a quantum state."], [38, 2, 2, "quairkit.qinfo.permute_systems", "perm_list", "Permute quantum system based on a permute list"]], "quairkit.qinfo.prob_sample": [[38, 2, 2, 0, "binary", "Whether the sampled result is recorded as binary."], [38, 2, 2, 0, "distribution", "The probability distribution."], [38, 2, 2, 0, "proportional", "Whether the counts are shown in proportion"], [38, 2, 2, 0, "shots", "The number of shots."]], "quairkit.qinfo.purity": [[38, 2, 2, 0, "rho", "Density matrix form of the quantum state."]], "quairkit.qinfo.relative_entropy": [[38, 2, 2, 0, "base", "The base of logarithm."], [38, 2, 2, 0, "rho", "Density matrix form of the quantum state."], [38, 2, 2, 0, "sigma", "Density matrix form of the quantum state."]], "quairkit.qinfo.schmidt_decompose": [[38, 2, 2, 0, "psi", "State vector form of the quantum state, with shape (2**n)"], [38, 2, 2, 0, "sys_A", "Qubit indices to be included in subsystem A (other qubits are included in subsystem B), default are the first half qubits of \\lvert \\psi\\rangle"]], "quairkit.qinfo.sqrtm": [[38, 2, 2, "quairkit.qinfo.sqrtm", "mat", "Calculate square root of a matrix"]], "quairkit.qinfo.state_fidelity": [[38, 2, 2, 0, "rho", "a quantum state."], [38, 2, 2, 0, "sigma", "a quantum state."]], "quairkit.qinfo.trace": [[38, 2, 2, 0, "axis1", "The first axis of the 2-D sub-tensors along which the diagonals should be taken."], [38, 2, 2, 0, "axis2", "The second axis of the 2-D sub-tensors along which the diagonals should be taken."], [38, 2, 2, 0, "mat", "Input tensor, from which the diagonals are taken."]], "quairkit.qinfo.trace_distance": [[38, 2, 2, 0, "rho", "a quantum state."], [38, 2, 2, 0, "sigma", "a quantum state."]], "quairkit.qinfo.trace_norm": [[38, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.von_neumann_entropy": [[38, 2, 2, 0, "base", "The base of logarithm."], [38, 2, 2, 0, "rho", "Density matrix form of the quantum state."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "property", "Python property"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:property", "5": "py:function", "6": "py:attribute"}, "terms": {"": [1, 5, 8, 10, 11, 12, 13, 15, 17, 18, 21, 28, 30, 33, 35, 38], "0": [5, 8, 10, 14, 16, 17, 18, 19, 21, 28, 33, 34, 35, 38], "00": [21, 33], "0000ff": 14, "0001": 38, "00633": 4, "02109": 28, "04672": 38, "05": 38, "06": 38, "0609050v2": 18, "1": [4, 5, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 28, 31, 32, 33, 34, 35, 38], "10": [1, 28, 38], "100": 5, "1017": 28, "102": 28, "1024": 38, "10876": 4, "10th": 28, "11": [21, 38], "1101": 33, "12": 38, "13": 38, "14": 38, "15": [5, 17, 34, 38], "16": 38, "17": 38, "1804": 4, "1905": 4, "1e": 38, "1j": [5, 34], "2": [5, 8, 13, 16, 17, 18, 20, 21, 27, 34, 35, 38], "2000": 38, "2009": 38, "2010": 28, "2011": 38, "2020": 38, "2101": 28, "217": 38, "238": 38, "283185307179586": 5, "2nd": 38, "2x2": 38, "3": [1, 8, 14, 16, 17, 18, 20, 21, 38], "30": 14, "360": 14, "3p": [19, 28], "3rd": 38, "3x": 18, "4": [4, 5, 17, 19, 20, 21, 28, 35, 38], "45": 14, "5": [18, 38], "5772": 5, "5y": 18, "6": [5, 38], "7": [14, 38], "8": [1, 28, 38], "81": [5, 17, 34], "9": 38, "A": [4, 8, 16, 17, 20, 21, 28, 29, 32, 34, 35, 38], "As": 1, "For": [5, 13, 28, 34, 38], "If": [5, 8, 10, 18, 21, 24, 27, 33, 37, 38], "In": 33, "Ising": 16, "It": [1, 21, 37, 38], "Its": [5, 21, 28, 38], "Of": [15, 17], "One": [5, 34], "Such": [18, 28], "The": [1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "These": 20, "To": 14, "__circuit_plot_param": 36, "_data": 10, "a_or_b": 38, "ab": [4, 28], "about": [5, 10, 34, 35, 37], "abov": 38, "abs_norm": [1, 38], "abstract": 10, "accept": 38, "access": 20, "act": [8, 10, 27, 28, 29, 31, 32], "activ": 1, "ad": 3, "add": [5, 34], "after": [10, 33], "algorithm": 1, "alia": 34, "align": [5, 16, 17, 34, 35], "all": [1, 4, 5, 8, 10, 20, 21, 24, 31, 32, 38], "allow": [13, 24], "along": [10, 20, 38], "alpha": 38, "alpha_": 16, "also": [1, 10, 38], "amplitud": [5, 19, 28, 33], "amplitude_damp": 5, "amplitude_damping_krau": [15, 19], "amplitudedamp": [26, 28], "amplitudeencod": [30, 33], "an": [3, 5, 10, 13, 14, 18, 19, 21, 32, 38], "ancilla": 38, "angl": [4, 5, 14, 33, 38], "angleencod": [30, 33], "ani": [31, 36], "anniversari": 28, "anoth": 11, "ansatz": [1, 36], "answer": 5, "append": 3, "appli": [4, 5, 10, 32, 33, 34, 35, 38], "approach": 38, "ar": [1, 5, 10, 13, 20, 21, 24, 28, 31, 32, 33, 34, 35, 38], "arang": 38, "arbitrarili": 38, "architectur": 1, "are_qubit": 10, "are_qutrit": 10, "arg": [13, 38], "arg0": 5, "arg1": 5, "argument": [3, 5], "arrai": [10, 11, 12, 38], "arrow": 14, "arxiv": [4, 18, 28, 38], "assert": 10, "assum": [5, 33], "automat": [8, 13], "avail": 10, "ax": [31, 38], "axi": [5, 34, 35, 38], "axis1": 38, "axis2": 38, "b": [20, 21, 38], "backend": [5, 6, 7, 9, 13, 18, 21, 23, 24], "baidu": 1, "bar": 14, "base": [1, 4, 5, 6, 10, 17, 25, 26, 30, 37, 38], "bash": 1, "basi": [5, 8, 10, 17, 20, 21, 24, 33, 37, 38], "basic": [7, 27, 31], "basisencod": [30, 33], "batch": [10, 13, 18, 38], "batch_dim": 10, "been": 28, "befor": 33, "begin": [5, 16, 17, 19, 28, 34, 35], "behav": 38, "behavior": 38, "bell": [20, 21], "bell_basi": [15, 20], "bell_diagonal_st": [15, 21], "bell_stat": [15, 21], "below": 17, "beta": 38, "beta_": 16, "beta_k": 16, "between": [13, 14, 23, 38], "binari": 38, "bit": [5, 19, 28], "bit_flip": 5, "bit_flip_krau": [15, 19], "bit_phase_flip": 5, "bit_phase_flip_krau": [15, 19], "bitflip": [26, 28], "bitphaseflip": [26, 28], "black": 14, "bloch": 14, "block": [18, 38], "block_enc_herm": [1, 38], "blue": 14, "bmatrix": [5, 17, 19, 28, 34, 35], "bool": [5, 8, 10, 14, 18, 24, 27, 31, 32, 34, 35, 37, 38], "boolean": [17, 38], "both": 10, "bound": 38, "bra": 10, "broadcast": 10, "c": [20, 38], "calcul": [5, 8, 13, 37, 38], "call": [11, 31], "callabl": [17, 31, 32, 38], "cambridg": 28, "can": [3, 7, 8, 10, 13, 23, 24, 27, 33, 38], "candid": 38, "cannot": [5, 10], "care": 13, "case": 10, "caus": [5, 38], "cbo9780511976667": 28, "ccx": [5, 30, 34], "cd": 1, "cdot": 17, "chang": 10, "channel": [1, 5, 18, 19, 25, 38], "channel_repr": 38, "channel_repr_convert": [1, 38], "check": [1, 8, 10, 27, 31, 38], "check_leg": [27, 31], "choi": [5, 18, 19, 27, 29, 38], "choi_channel": 5, "choi_repr": [5, 27, 29], "choirepr": [26, 29, 38], "choos": [5, 37], "chuang": [28, 38], "cir": 5, "circuit": [1, 4, 31, 32, 34, 36], "class": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 23, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37], "classic": [1, 33], "classifi": 7, "clone": [1, 10], "close": 38, "cloud": 1, "cmap": 14, "cnot": [4, 5, 15, 17, 30, 34], "cnot_gat": [15, 17], "cnot_idx": 34, "co": [5, 17, 34, 35], "code": [1, 38], "coeffici": [5, 8, 19, 38], "collaps": [5, 10, 25, 37], "collect": [28, 34, 35], "color": 14, "color_schem": 14, "com": [1, 5, 17], "common": [13, 16, 21, 25, 26], "commun": 38, "complet": [21, 27, 31, 38], "completely_mixed_comput": [15, 21], "complex": 4, "complex128": 7, "complex64": [7, 17], "complex_block_lay": 5, "complex_entangled_lay": 5, "complexblocklay": [2, 4], "complexentangledlay": [2, 4], "compon": 38, "compos": [20, 24, 38], "compress": 8, "comput": [1, 10, 16, 20, 21, 23, 24, 28, 37, 38], "computational_basi": [15, 21], "concaten": [5, 38], "conda": 1, "consid": 10, "consist": [4, 5, 33], "const_t": [5, 19, 28], "construct": [8, 17, 38], "construct_h_matrix": 8, "constructor": 3, "consult": 14, "contain": [1, 2, 8, 10, 18, 21, 38], "contributor": 1, "control": [5, 32, 34, 38], "control_oracl": 5, "controloracl": [30, 32], "convers": 38, "convert": [10, 38], "copi": [10, 36], "core": 1, "corollari": 38, "correct": 38, "correspond": [5, 8, 10, 19, 28, 37, 38], "could": [8, 31], "count": 38, "cp": [5, 15, 17, 30, 34], "cp_gate": [15, 17], "cr_x": [5, 17], "cr_y": [5, 17], "cr_z": [5, 17], "creat": [1, 8, 38], "create_choi_repr": [1, 38], "create_matrix": [1, 38], "crx": [5, 15, 17, 30, 34], "crx_gate": [15, 17], "cry": [5, 15, 17, 30, 34], "cry_gat": [15, 17], "crz": [5, 15, 17, 30, 34], "crz_gate": [15, 17], "cswap": [5, 15, 17, 30, 34], "cswap_gat": [15, 17], "cu": [5, 15, 17, 30, 34], "cu_gat": [15, 17], "cuda": 7, "current": [5, 7, 10, 17, 28, 38], "custom": [5, 25, 26, 30, 31], "cut": 1, "cvx": 38, "cx": [30, 34], "cy": [5, 15, 17, 30, 34], "cy_gat": [15, 17], "cycl": [5, 34], "cz": [5, 15, 17, 30, 34], "cz_gate": [15, 17], "d": [10, 11, 12, 13, 17, 19, 20, 21, 28, 38], "d1": 13, "d_": 27, "dagger": [1, 5, 10, 17, 35, 38], "damp": [5, 19, 28], "data": [7, 10, 11, 12, 13, 15, 17, 18, 19, 27, 33, 38], "databas": [1, 38], "datatyp": 13, "decid": 8, "decomp_1qubit": [1, 38], "decomp_ctrl_1qubit": [1, 38], "decompos": [8, 10, 24, 38], "decompose_pauli_word": 8, "decompose_with_sit": 8, "decomposit": 38, "default": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "defin": [20, 28, 38], "definit": 38, "delta": 38, "densiti": [10, 11, 13, 14, 18, 21, 27, 38], "density_matrix": [9, 10, 13, 14], "density_op": 38, "density_op_random": 38, "depend": 5, "depolar": [5, 19, 26, 28], "depolarizing_krau": [15, 19], "depth": [4, 5, 32], "descript": [5, 34], "design": 1, "desir": [5, 37], "desired_result": [5, 24, 37], "detail": [5, 10], "determin": [8, 13, 27, 31, 38], "develop": 1, "devic": [7, 10, 17, 28, 34], "diagon": [21, 38], "diamond": 38, "diamond_norm": [1, 38], "dict": [3, 4, 5, 24, 31, 32, 36, 38], "dictionari": [36, 38], "differ": 8, "dim": [10, 17, 20, 38], "dim0": 14, "dim1": [14, 38], "dim2": 38, "dim_io": 38, "dim_list": 38, "dimens": [10, 11, 12, 13, 17, 20, 27, 38], "dimension": [17, 38], "direct": 38, "direct_sum": [1, 38], "displai": [5, 14, 31, 36], "display_in_circuit": 31, "distanc": [1, 14, 22, 38], "distinguish": 10, "distort": 5, "distribut": 38, "divid": 18, "dn": 13, "docstr": 10, "doe": [5, 10, 37, 38], "doi": 28, "dot": 5, "download": 1, "dpi": 5, "drive": 4, "dtype": [7, 10, 13, 17, 19], "dynam": 5, "e": [1, 4, 5, 8, 10, 16, 17, 20, 24, 27, 31, 32, 34, 35, 38], "e_": 21, "e_0": [19, 28], "e_1": [19, 28], "e_2": [19, 28], "e_3": [19, 28], "e_4": [19, 28], "e_k": [19, 28], "e_n": 38, "each": [5, 8, 10, 11, 12, 14, 20, 21, 24, 28, 38], "edg": [1, 4, 16], "edit": 28, "eigenbasi": 20, "eigenspac": 38, "eigenst": [5, 37], "eigenvalu": 38, "eigenvector": 20, "eigh": 38, "either": 38, "element": [1, 8, 10, 14, 21, 36, 38], "encod": [13, 18, 25, 30, 38], "encoding_g": 33, "end": [3, 5, 14, 16, 17, 19, 28, 34, 35], "engag": 1, "enough": 38, "entangl": [4, 5], "entir": 20, "entri": 5, "entropi": 38, "environ": 1, "ep": 38, "equal": [14, 28], "equat": 38, "error": [10, 38], "evolv": 10, "exampl": [13, 38], "except": 21, "excit": [5, 28], "exclud": 8, "exec_tim": [5, 19, 28], "execut": [5, 19, 28], "exp": 17, "expand": [10, 38], "expand_a": 10, "expec_v": 10, "expect": [10, 11, 14, 24], "expecv": [22, 24], "explor": 1, "extend": [3, 4, 5], "ey": [15, 17], "eye_g": [15, 17], "f": [17, 38], "fals": [5, 8, 10, 14, 18, 24, 31, 32, 34, 35, 37, 38], "fcn": 38, "featur": [28, 33], "fidel": [23, 38], "figur": [5, 36], "file": [1, 3, 4, 5, 11, 12, 13, 14, 23, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37], "filenam": 14, "finish": 1, "first": [1, 5, 13, 14, 20, 38], "fit": 10, "flag": 5, "flatten": 5, "flexibl": 1, "flip": [5, 19, 28], "float": [4, 5, 7, 8, 14, 19, 21, 28, 31, 32, 34, 35, 36, 38], "focus": 1, "folder": 1, "follow": [1, 4, 7, 8, 18], "font": 5, "form": [5, 8, 10, 11, 12, 14, 17, 18, 19, 21, 31, 34, 35, 38], "format": 10, "formula": 28, "forward": [5, 23, 24, 37], "four": 20, "fourier": [17, 20], "frac": [5, 17, 21, 34, 35, 38], "framework": 1, "fredkin": [5, 34], "from": [1, 4, 10, 11, 12, 14, 18, 38], "full": [5, 18, 24, 28, 33, 35, 37], "fulli": 14, "func": [15, 17, 38], "function": [1, 6, 7, 10, 11, 13, 14, 15, 17, 18, 21, 23, 24, 31, 32, 36, 37, 38], "futur": [5, 37], "g": [8, 17, 38], "galleri": 5, "gamma": [5, 17, 19, 28, 34, 38], "gamma_": 16, "gate": [1, 4, 5, 17, 19, 25, 28, 38], "gate_fidel": [1, 38], "gate_histori": [4, 5, 31], "gate_history_gener": 31, "gate_info": [31, 32], "gate_nam": 5, "gell": 20, "gell_mann": [15, 20], "gellmann": 17, "gener": [5, 10, 13, 15, 17, 18, 19, 20, 21, 28, 31, 32, 38], "generalized_amplitude_damp": 5, "generalized_amplitude_damping_krau": [15, 19], "generalized_depolar": 5, "generalized_depolarizing_krau": [15, 19], "generalizedamplitudedamp": [26, 28], "generalizeddepolar": [26, 28], "generalizedgel": 17, "get": [5, 7, 10, 20], "get_backend": [6, 7], "get_circuit_plot_param": [30, 36], "get_devic": [6, 7], "get_dtyp": [6, 7], "get_float_dtyp": [6, 7], "get_se": [6, 7], "ghz": 21, "ghz_state": [15, 21], "gif": 14, "git": 1, "github": 1, "give": 20, "given": [3, 10, 20, 27, 38], "global": [7, 13, 38], "go": 0, "grad": 5, "gradient": [1, 5, 14, 37, 38], "graph": 4, "greater": 14, "grover": 17, "grover_matrix": [15, 17], "h": [5, 15, 17, 30, 35, 38], "h_": 16, "h_gate": [15, 17], "ha": [14, 28, 38], "haar": 18, "haar_density_oper": [15, 18], "haar_orthogon": [15, 18], "haar_state_vector": [15, 18], "haar_unitari": [15, 18], "hadamard": [4, 5, 35], "half": 38, "hamiltonian": [1, 6, 10, 15, 18, 24], "happen": 5, "have": 5, "heisenberg": [16, 20], "heisenberg_hamiltonian": [15, 16], "heisenberg_weyl": [15, 20], "here": [5, 10, 17], "herm_transform": [1, 38], "hermitian": [18, 38], "hessian": [1, 38], "high": 38, "histori": [3, 4, 5, 31, 32], "hold": 38, "home": 0, "horizont": 31, "howev": 10, "html": [5, 17], "http": [1, 4, 5, 17, 28], "i": [1, 4, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 31, 32, 33, 34, 35, 37, 38], "i_a": 38, "i_b": 38, "idx": 5, "if_print": [5, 37], "ignor": 38, "ignore_zero": 38, "iix": 8, "imag": [5, 13], "image_filepath": 13, "image_to_density_matrix": [9, 13], "implement": [5, 7, 9, 10, 18, 21, 28, 32, 37, 38], "import": 38, "inch": 5, "includ": 38, "incorpor": 1, "index": [5, 8, 10, 14, 20, 21, 24, 34], "index_select": 10, "indic": [4, 5, 8, 10, 20, 27, 28, 29, 31, 32, 33, 34, 35, 38], "info": 38, "inform": [1, 4, 5, 8, 10, 28, 31, 32, 37, 38], "init": 11, "init_st": 14, "initi": [3, 5, 14], "initializer_typ": 5, "input": [5, 8, 10, 11, 13, 14, 17, 23, 24, 27, 28, 31, 32, 33, 37, 38], "input_dim": 38, "input_dtyp": 38, "instal": [1, 5], "instanc": [4, 5, 13, 27, 31, 38], "instanti": 8, "int": [3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "integ": [10, 13, 20, 38], "integr": 1, "interfac": [1, 23, 24, 31], "invers": [5, 35], "ion": 34, "iqp": 33, "iqpencod": [30, 33], "is_batch": 38, "is_choi": [1, 38], "is_density_matrix": [1, 38], "is_hermitian": [1, 38], "is_linear": [1, 38], "is_posit": [1, 38], "is_povm": 10, "is_ppt": [1, 38], "is_projector": [1, 38], "is_real": 18, "is_state_vector": [1, 38], "is_tensor_input": 38, "is_unitari": [1, 18, 38], "is_xxx": 10, "isdynam": 5, "ising_hamiltonian": [15, 16], "isotrop": 21, "isotropic_st": [15, 21], "item": 8, "iter": [3, 4, 5, 8, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "its": [1, 10, 18, 38], "izn": 21, "j": [5, 10, 21, 38], "jupyt": 1, "k": [16, 19, 28, 38], "keep": 10, "keep_stat": [10, 24], "kei": 1, "ket": 10, "khatri": 38, "krau": [5, 10, 18, 19, 27, 28, 29, 38], "kraus_channel": 5, "kraus_op": 5, "kraus_repr": [27, 29], "krausrepr": [26, 29], "kroneck": [13, 38], "kwarg": [31, 36, 37, 38], "l": [28, 38], "lam": 14, "lambda": [5, 17, 34, 35], "langl": [5, 10, 17, 21, 34], "langle00": 21, "langle11": 21, "larger": 38, "latex": 5, "latex_nam": 5, "layer": [1, 2, 3, 5, 32, 33, 34, 35], "ldot": 33, "le": 28, "learn": 1, "least": [13, 38], "left": 18, "legal": 38, "legitimaci": 8, "length": [17, 28], "less": 28, "librari": [1, 15, 16, 18, 21, 38], "linalg": [13, 38], "linear": [4, 5, 10, 38], "linear_entangled_lay": 5, "linear_map": 38, "linearentangledlay": [2, 4], "list": [3, 4, 5, 8, 10, 11, 12, 13, 14, 18, 19, 20, 21, 24, 27, 29, 31, 32, 34, 37, 38], "local": 1, "log": 38, "logarithm": 38, "logarithmic_neg": [1, 38], "logic": 28, "logm": [1, 38], "long": 5, "loss": [1, 38], "loss_funct": 38, "lvert": 38, "m": [5, 15, 17, 28, 30, 34, 38], "machin": 1, "mai": [5, 10, 38], "make": [23, 24], "mann": 20, "mannmatrix": 17, "map": [17, 38], "mark": 38, "mat": 38, "match": 38, "math": [18, 21], "mathbb": 20, "mathemat": 4, "mathit": [5, 17], "mathworld": 17, "matplotlib": [5, 31], "matric": [1, 8, 17, 20, 38], "matrix": [1, 4, 5, 8, 10, 11, 13, 14, 15, 18, 20, 21, 27, 29, 31, 34, 35, 38], "matrix_a": 38, "matrix_b": 38, "matter": 27, "maxcut": 4, "mean": [5, 7, 11, 13, 18, 24, 37, 38], "measur": [1, 5, 10, 22, 37], "measure_basi": [5, 24, 37], "measure_op": 24, "measured_op": 10, "memori": 10, "merg": 8, "messag": [10, 38], "microsecond": [5, 19, 28], "minimum": 1, "mix": [10, 11, 21], "mixedst": [10, 11], "mixtur": 28, "mode": 27, "modern": 38, "modul": [1, 2, 3, 7, 8, 9, 10, 22, 25, 26, 30], "more": [1, 5, 10, 38], "most": 1, "ms_gate": [15, 17], "multi": [14, 34], "multi_qubit_g": [25, 30], "must": [5, 28, 34, 35, 38], "m\u00f8lmer": [5, 34], "n": [1, 10, 11, 12, 17, 18, 19, 20, 21, 28, 38], "n_qubit": 8, "n_term": 8, "name": [3, 5, 7, 10, 14], "nanosecond": [5, 19, 28], "natur": 38, "ndarrai": [5, 8, 10, 13, 14, 19, 38], "need": [4, 13, 27, 31, 38], "neg": [1, 38], "network": 1, "neumann": 38, "neural": 1, "new": [5, 10], "niel": 5, "nielsen": [28, 38], "nkron": [1, 13, 38], "nn": 3, "node": 4, "noisi": 27, "non": 38, "none": [4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "norm": 38, "normal": [5, 10], "note": 33, "notebook": 1, "notimpl": 37, "notimplementederror": [5, 18, 21, 23, 24, 27, 37, 38], "np": 14, "num_acted_param": [31, 32], "num_acted_qubit": [27, 31], "num_block_qubit": 38, "num_qubit": [4, 5, 10, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32, 33, 34, 35, 37], "num_repeat": 33, "num_system": 10, "number": [4, 5, 8, 10, 14, 17, 18, 19, 20, 21, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "numel": 10, "numpi": [7, 10, 13, 38], "o": [5, 18], "observ": [8, 10, 18, 20, 24, 38], "obtain": [13, 37], "occupi": 31, "of_gat": [15, 17], "omega_n": 17, "omit": 5, "one": [5, 21, 33, 37, 38], "one_st": [15, 21], "onli": [4, 5, 10, 13, 18, 20, 27, 33], "op": [3, 10, 38], "oper": [1, 3, 5, 6, 7, 8, 10, 17, 19, 20, 38], "oper_histori": 3, "operatorlist": [2, 3], "oplu": 17, "optim": [23, 24], "option": [10, 38], "oracl": [5, 17, 30, 32], "order": [3, 10, 11, 12, 38], "org": [4, 5, 28], "orthogon": 18, "other": [5, 10, 13, 21, 37, 38], "otherwis": 38, "otim": [5, 17, 18, 34, 38], "out": [1, 10, 27], "output": [5, 19, 27, 36, 38], "overload": 31, "p": [5, 15, 17, 19, 21, 28, 30, 34, 35, 38], "p_": 21, "p_gate": [15, 17], "p_norm": [1, 38], "paddl": 1, "paddlepaddl": 1, "pair": 3, "paper": 4, "param": [5, 17, 31, 32, 34, 35], "param_shar": [5, 31, 32, 34, 35], "paramet": [3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "parameter": [31, 32], "paramg": [30, 31], "paramoracl": [30, 32], "partial": [10, 37, 38], "partial_trac": [1, 38], "partial_trace_discontigu": [1, 38], "partial_transpos": [1, 38], "partial_transpose_2": [1, 38], "partialst": [25, 37], "pass": 3, "patch": 5, "path": [5, 13], "pauli": [5, 8, 19, 20, 28, 38], "pauli_basi": [15, 20], "pauli_channel": 5, "pauli_decomposit": [1, 38], "pauli_krau": [15, 19], "pauli_str": [8, 20], "pauli_str_basi": [15, 20], "pauli_str_convertor": [1, 38], "pauli_str_povm": [15, 20], "pauli_word": 8, "pauli_words_matrix": 8, "pauli_words_r": 8, "paulichannel": [26, 28], "pdf": 4, "per": [5, 10], "perform": 38, "perm": 38, "perm_list": 38, "permut": 38, "permute_system": [1, 38], "ph": 18, "phase": [5, 15, 17, 19, 20, 28, 38], "phase_damp": 5, "phase_damping_krau": [15, 19], "phase_flip": 5, "phase_flip_krau": [15, 19], "phase_g": [15, 17], "phase_space_point": [15, 20], "phasedamp": [26, 28], "phaseflip": [26, 28], "phi": [5, 14, 17, 21, 34, 35], "phi_": 21, "pi": [4, 5, 17, 20, 34, 35], "pictur": 14, "pip": 1, "place": [31, 32], "plane": 14, "platform": [0, 1], "pleas": 28, "plot": [5, 14, 31, 32], "plot_density_matrix_graph": [6, 14], "plot_multi_qubits_state_in_bloch_spher": [6, 14], "plot_rotation_in_bloch_spher": [6, 14], "plot_state_in_bloch_spher": [6, 14], "plot_width": 5, "plt": 5, "point": 20, "posit": [20, 31, 38], "povm": [10, 20], "pp": 38, "ppt": 38, "pre": 22, "predecessor": 1, "preprint": 38, "preserve_qubit": 38, "press": 28, "principl": 38, "print": [5, 37], "prob": [5, 19, 21, 28], "prob_sampl": [1, 38], "probabl": [5, 10, 19, 24, 28, 38], "problem": 4, "process": [5, 19, 28], "product": [13, 38], "program": 38, "project": [1, 24], "projector": [18, 38], "properli": 5, "properti": [3, 4, 5, 8, 10, 11, 12, 27, 31], "proport": [5, 38], "provid": [1, 22, 27, 31, 38], "psd": 38, "psi": [21, 38], "pure": [10, 12, 21], "purest": [10, 12], "puriti": [1, 38], "pvm": 24, "python": 1, "q": [19, 28, 38], "qaoa": 4, "qaoalay": [2, 4], "qaoalayerweight": [2, 4], "qft": [17, 20], "qft_basi": [15, 20], "qft_matrix": [15, 17], "qinfo": [1, 10], "quair": [0, 1], "quantum": [1, 4, 5, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 24, 26, 27, 28, 29, 30, 31, 32, 33, 34, 37, 38], "quantumcomput": 5, "qubit": [4, 5, 8, 10, 13, 14, 17, 18, 19, 20, 21, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "qubit_histori": 5, "qubit_num": 8, "qubits_idx": [4, 5, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37], "qudit": [17, 20, 38], "quleaf": 24, "qutrit": [10, 13], "r": [21, 27, 28], "r_": [5, 17], "r_state": [15, 21], "r_x": [5, 17], "r_y": [5, 17], "r_z": [5, 17], "rais": [5, 7, 10, 14, 18, 21, 23, 24, 27, 31, 34, 35, 37, 38], "random": [1, 5, 7, 15, 31, 32, 38], "random_channel": [15, 18], "random_density_matrix": [15, 18, 38], "random_hamiltonian_gener": [15, 18], "random_hermitian": [15, 18], "random_orthogonal_project": [15, 18], "random_pauli_str_gener": [15, 18], "random_st": [15, 18], "random_unitari": [15, 18], "random_unitary_hermitian": [15, 18], "random_unitary_with_hermitian_block": [15, 18], "randomize_param": 5, "randomli": [5, 18, 37], "rang": [5, 27, 28, 31, 32], "rangl": [5, 10, 17, 19, 21, 28, 33, 34, 38], "rangle_": 21, "rank": [10, 18, 27], "rapid": 1, "ratio": 5, "readi": 3, "real": [1, 4, 18], "real_block_lay": 5, "real_entangled_lay": 5, "realblocklay": [2, 4], "realentangledlay": [2, 4], "recommend": 1, "record": 38, "red": 14, "refer": [5, 10, 17, 18, 28, 38], "referenc": 18, "rel": 38, "relat": 1, "relative_entropi": [1, 38], "relax": [5, 19, 28], "remain": 38, "remov": 38, "replac": [5, 19, 28], "replacement_choi": [15, 19], "replacementchannel": [26, 28], "repr_typ": 10, "repres": [20, 29, 38], "represent": [1, 4, 5, 10, 11, 12, 13, 15, 18, 27, 29, 38], "requir": [5, 14, 31, 32, 34, 38], "research": 1, "reset": [5, 10, 19, 28, 36, 37], "reset_channel": 5, "reset_circuit_plot_param": [30, 36], "reset_krau": [15, 19], "reset_sequ": 10, "resetchannel": [26, 28], "resetst": [25, 37], "reshap": 38, "resolut": 5, "resourc": 1, "respect": [5, 8, 10, 14, 20, 24, 38], "result": [5, 10, 24, 37, 38], "return": [3, 4, 5, 7, 8, 10, 13, 16, 17, 18, 19, 20, 21, 23, 24, 27, 31, 36, 37, 38], "return_glob": 38, "rho": [28, 38], "rho_test": 38, "rho_test_1": 38, "rho_test_2": 38, "rho_test_3": 38, "root": 38, "rotat": [4, 5, 14, 17, 34, 35, 38], "rotating_angl": 14, "rule": 10, "run": [10, 27], "runtimeerror": 38, "runtimewarn": 38, "rx": [5, 15, 17, 30, 33, 34, 35], "rx_gate": [15, 17], "rxx": [5, 15, 17, 30, 34], "rxx_gate": [15, 17], "ry": [4, 5, 15, 17, 30, 33, 34, 35], "ry_gat": [15, 17], "ryi": [5, 15, 17, 30, 34], "ryy_gat": [15, 17], "rz": [4, 5, 15, 17, 30, 33, 34, 35], "rz_gate": [15, 17], "rzz": [5, 15, 17, 30, 34], "rzz_gate": [15, 17], "s_gate": [15, 17], "s_state": [15, 21], "same": [5, 10, 31, 32, 34, 35, 38], "sampl": [18, 24, 38], "satisfi": 28, "save": [5, 7, 10], "save_gif": 14, "save_p": 14, "save_path": 5, "scalar": 36, "scale": [5, 36], "scale_circuit_plot_param": [30, 36], "schatten": 38, "schmidt": 38, "schmidt_decompos": [1, 38], "scienc": 1, "sdg": [5, 15, 17, 30, 35], "sdg_gate": [15, 17], "second": [13, 14, 38], "see": [5, 10, 28], "seed": 7, "select": 38, "self": 31, "semi": 38, "semidefinit": 38, "sequenc": [5, 10], "sequenti": [3, 5], "seri": 38, "set": [1, 5, 7, 13, 14, 15, 31, 32, 36, 38], "set_backend": [6, 7], "set_circuit_plot_param": [30, 36], "set_color": 14, "set_devic": [6, 7], "set_dtyp": [6, 7], "set_gate_info": 31, "set_se": [6, 7], "setup": 13, "shape": [11, 12, 16, 17, 20, 27, 38], "share": [5, 31, 32, 34, 35], "shift": [15, 17], "shift_gat": [15, 17], "shot": [10, 38], "should": [5, 7, 18, 21, 27, 28, 33, 38], "show": [5, 14], "show_arrow": 14, "shown": 38, "sigma": [19, 28, 38], "sigma_k": [19, 28], "sigx_p": 8, "sigy_p": 8, "sigz_p": 8, "simpli": 8, "simplifi": 8, "simul": [1, 28], "sin": [5, 17, 34, 35], "sinc": 10, "singl": [4, 5, 13, 31, 32, 34, 35, 38], "single_qubit_g": [25, 30], "site": 8, "size": [8, 10, 14, 18, 38], "some": 5, "soon": 37, "sourc": [1, 3, 4, 5, 11, 12, 23, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "space": [20, 38], "span": 20, "spars": 8, "special": [1, 25], "specif": 10, "specifi": [10, 13, 14, 24, 27, 31, 38], "sphere": 14, "spin": 8, "spinop": [6, 8], "sqrt": [5, 17, 19, 21, 28, 34, 35, 38], "sqrtm": [1, 38], "squar": 38, "st": 17, "stabl": 5, "stack": 38, "stackexchang": 5, "standard": 20, "start": [14, 31], "state": [1, 5, 6, 14, 15, 18, 19, 20, 23, 24, 28, 33, 37, 38], "state_a": 13, "state_b": 13, "state_backend": [10, 13], "state_fidel": [1, 38], "state_vector": [9, 10, 13, 21], "statefidel": [22, 23], "statevector": 10, "static": 10, "std_basi": [15, 20], "stinespr": [5, 18, 27, 29, 38], "stinespring_channel": 5, "stinespring_mat": 29, "stinespring_repr": [5, 27], "stinespringrepr": [26, 29], "stop_gradi": 5, "store": [11, 12, 14], "str": [3, 4, 5, 7, 8, 10, 13, 14, 18, 19, 20, 24, 27, 28, 33, 34, 35, 37, 38], "string": [8, 20, 24], "strongli": [4, 5], "style": 33, "sub": 38, "sub_system": 38, "sublay": 3, "subsystem": [10, 38], "sum": [28, 38], "sum_": [16, 21], "sum_ic_i": 38, "sumeet": 38, "superconduct": 28, "superposition_lay": 5, "superpositionlay": [2, 4], "support": [5, 10, 23, 24, 37, 38], "swap": [5, 15, 17, 30, 34], "swap_gat": [15, 17], "sys_a": 38, "sys_dim": [10, 11, 12, 13, 38], "sys_idx": 10, "system": [5, 8, 10, 11, 12, 13, 20, 38], "system_dim": 10, "system_seq": [10, 11, 12], "s\u00f8rensen": [5, 34], "t": [5, 15, 17, 20, 30, 35], "t_1": [5, 19, 28], "t_2": [5, 19, 28], "t_a": 38, "t_gate": [15, 17], "tabl": [13, 14], "take": 38, "taken": 38, "target": [10, 18, 23, 38], "target_st": 23, "taylor": 38, "tdg": [5, 15, 17, 30, 35], "tdg_gate": [15, 17], "templat": [1, 4], "tensor": [3, 5, 7, 8, 10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 23, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "tensor_st": [9, 13], "term": [8, 10, 18, 24], "test": 38, "tex": 5, "tex_demo": 5, "text": [17, 19, 27, 28, 38], "text_labels_and_annot": 5, "textrm": 10, "th": [5, 21], "than": [14, 28, 38], "thei": 20, "theoret": 1, "theori": 38, "thermal": [5, 19, 28], "thermal_relax": 5, "thermal_relaxation_krau": [15, 19], "thermalrelax": [26, 28], "theta": [5, 14, 17, 34, 35], "theta2": [5, 17, 34, 35], "thi": [1, 3, 4, 5, 10, 11, 12, 13, 17, 18, 19, 23, 24, 27, 28, 29, 31, 32, 38], "three": [5, 17, 19, 28, 34], "time": [1, 5, 18, 19, 20, 28, 38], "to_stat": [9, 13], "todo": [5, 34], "toffoli": [5, 15, 17, 30, 34], "toffoli_g": [15, 17], "tol": 38, "toler": 38, "too": 5, "tool": [1, 14, 38], "torch": [5, 7, 10, 13, 14, 17, 24, 34, 35, 38], "total": [4, 27, 28, 29, 31, 32, 33, 34, 35, 37], "tr": [28, 38], "trace": [1, 10, 14, 23, 38], "trace_dist": [1, 38], "trace_norm": [1, 38], "tracedist": [22, 23], "transfer_stat": 5, "transform": [10, 20, 38], "transpos": [17, 38], "trap": 34, "true": [5, 8, 10, 14, 24, 27, 31, 38], "tupl": [4, 5, 8, 10, 14, 24, 38], "tutori": [0, 1, 18], "two": [5, 8, 13, 17, 19, 28, 34, 38], "type": [5, 7, 8, 10, 13, 16, 17, 18, 19, 20, 21, 23, 24, 27, 31, 33, 36, 37, 38], "type_repr": 27, "typeerror": [5, 14, 27, 38], "u": [16, 17, 38], "u3": [5, 15, 17, 30, 35], "u3_gat": [15, 17], "u_3": [5, 17], "uf": [15, 17], "uf_gat": [15, 17], "unabl": 5, "unexpect": 27, "uniform": 5, "unitari": [4, 5, 10, 17, 18, 31, 32, 38], "unitary_matrix": 5, "univers": [5, 17, 28, 34], "universal2": [15, 17], "universal2_g": [15, 17], "universal3": [15, 17], "universal3_g": [15, 17], "universal_qudit": [5, 15, 17], "universal_three_qubit": 5, "universal_two_qubit": 5, "universalqudit": [30, 34], "universalthreequbit": [30, 34], "universaltwoqubit": [30, 34], "unsupport": [27, 38], "updat": [28, 36], "update_param": 5, "upper": 18, "us": [1, 4, 5, 7, 8, 11, 13, 17, 23, 24, 33, 38], "use_spars": 8, "user": [8, 31], "userwarn": 10, "usual": 38, "uv": [16, 38], "v": [16, 38], "valid": [10, 38], "valu": [5, 7, 10, 23, 24, 28, 38], "valueerror": [5, 7, 14, 27, 31, 34, 35, 38], "var": 38, "variabl": 38, "variat": 2, "variou": 10, "vec": [10, 38], "vector": [10, 12, 14, 18, 20, 33, 38], "verif": 1, "verifi": 38, "version": 28, "vertic": 16, "view": 14, "view_angl": 14, "view_dist": 14, "visual": [1, 6, 25, 30], "von": 38, "von_neumann_entropi": [1, 38], "w": 21, "w_state": [15, 21], "wai": 1, "want": [5, 37], "watrou": 38, "we": [1, 5, 10], "weak_superposition_lay": 5, "weakli": [4, 5], "weaksuperpositionlay": [2, 4], "weight": 4, "were": 17, "weyl": 20, "when": [5, 10, 11, 13, 20, 31, 34, 37], "where": [10, 16, 19, 20, 27, 28], "whether": [5, 8, 10, 14, 18, 24, 27, 31, 32, 34, 35, 37, 38], "which": [4, 5, 7, 8, 10, 11, 14, 18, 23, 24, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38], "which_qubit": 14, "whose": [21, 38], "width": [5, 14, 31], "wild": 38, "within": 38, "without": 38, "wolfram": 17, "word": 8, "work": 4, "world": 1, "wrong": [18, 21, 23, 24], "x": [5, 8, 14, 15, 17, 19, 20, 24, 28, 30, 31, 34, 35, 38], "x0": 18, "x1": 38, "x3": 8, "x_gate": [15, 17], "x_i": 8, "x_k": 16, "x_u": 16, "x_v": 16, "xx": [5, 17], "xxx": 10, "xy": 16, "xy_hamiltonian": [15, 16], "y": [5, 14, 15, 17, 19, 20, 24, 28, 30, 34, 35, 38], "y0": 18, "y_gate": [15, 17], "y_i": 8, "y_u": 16, "y_v": 16, "you": [5, 17, 23, 24, 37], "your": 5, "yy": [5, 17], "z": [5, 8, 14, 15, 17, 18, 19, 20, 24, 28, 30, 34, 35, 37, 38], "z0": [8, 38], "z1": [8, 38], "z2": 18, "z_gate": [15, 17], "z_i": 8, "z_u": 16, "z_v": 16, "zero": [21, 38], "zero_st": [15, 21], "ziz": 8, "zxzz": 8, "zz": [5, 17], "zzix": 8, "zzx": 8}, "titles": ["Welcome to QuAIRKit\u2019s documentation!", "quairkit", "quairkit.ansatz", "quairkit.ansatz.container", "quairkit.ansatz.layer", "quairkit.circuit", "quairkit.core", "quairkit.core.base", "quairkit.core.hamiltonian", "quairkit.core.state", "quairkit.core.state.backend", "quairkit.core.state.backend.density_matrix", "quairkit.core.state.backend.state_vector", "quairkit.core.state.state", "quairkit.core.visual", "quairkit.database", "quairkit.database.hamiltonian", "quairkit.database.matrix", "quairkit.database.random", "quairkit.database.representation", "quairkit.database.set", "quairkit.database.state", "quairkit.loss", "quairkit.loss.distance", "quairkit.loss.measure", "quairkit.operator", "quairkit.operator.channel", "quairkit.operator.channel.base", "quairkit.operator.channel.common", "quairkit.operator.channel.custom", "quairkit.operator.gate", "quairkit.operator.gate.base", "quairkit.operator.gate.custom", "quairkit.operator.gate.encoding", "quairkit.operator.gate.multi_qubit_gate", "quairkit.operator.gate.single_qubit_gate", "quairkit.operator.gate.visual", "quairkit.operator.special", "quairkit.qinfo", "tutorials"], "titleterms": {"": 0, "ansatz": [2, 3, 4], "backend": [10, 11, 12], "base": [7, 27, 31], "channel": [26, 27, 28, 29], "circuit": 5, "common": 28, "contain": 3, "core": [6, 7, 8, 9, 10, 11, 12, 13, 14], "custom": [29, 32], "databas": [15, 16, 17, 18, 19, 20, 21], "density_matrix": 11, "distanc": 23, "document": 0, "encod": 33, "gate": [30, 31, 32, 33, 34, 35, 36], "hamiltonian": [8, 16], "layer": 4, "loss": [22, 23, 24], "matrix": 17, "measur": 24, "multi_qubit_g": 34, "note": [3, 4, 5, 7, 8, 10, 11, 12, 13, 24, 27, 28, 31, 37, 38], "oper": [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "qinfo": 38, "quairkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "random": 18, "represent": 19, "set": 20, "single_qubit_g": 35, "special": 37, "state": [9, 10, 11, 12, 13, 21], "state_vector": 12, "tutori": 39, "visual": [14, 36], "warn": 38, "welcom": 0}})