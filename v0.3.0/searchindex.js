Search.setIndex({"alltitles": {"Add circuit templates": [[52, "Add-circuit-templates"]], "Add custom gates": [[52, "Add-custom-gates"]], "Add custom quantum channels": [[52, "Add-custom-quantum-channels"]], "Add operations": [[52, "Add-operations"]], "Add quantum channels": [[52, "Add-quantum-channels"]], "Adding custom channels": [[50, "Adding-custom-channels"]], "Adding custom gates": [[50, "Adding-custom-gates"]], "Amplitude damping channel": [[54, "Amplitude-damping-channel"]], "Applying quantum channels to states": [[54, "Applying-quantum-channels-to-states"]], "Applying quantum gates to states": [[54, "Applying-quantum-gates-to-states"]], "Batch Computation": [[48, null]], "Batch computation in measurement": [[48, "Batch-computation-in-measurement"]], "Batch computation in quantum circuit": [[48, "Batch-computation-in-quantum-circuit"]], "Batch measurement": [[53, "Batch-measurement"]], "Bit flip channel": [[54, "Bit-flip-channel"]], "Bit-phase flip channel": [[54, "Bit-phase-flip-channel"]], "Choi representation": [[54, "Choi-representation"]], "Circuit execution": [[52, "Circuit-execution"]], "Compatibility with different data formats": [[55, "Compatibility-with-different-data-formats"]], "Constructing Quantum Circuits in QuAIRKit": [[52, null]], "Constructing quantum circuits": [[52, "Constructing-quantum-circuits"]], "Construction of Hamiltonian": [[51, "Construction-of-Hamiltonian"]], "Conversion among three representations": [[54, "Conversion-among-three-representations"]], "Depolarizing channel": [[54, "Depolarizing-channel"]], "Examples of quantum channels": [[54, "Examples-of-quantum-channels"]], "Expection value of the Hamiltonian": [[51, "Expection-value-of-the-Hamiltonian"]], "Functions in quantum computation": [[55, "Functions-in-quantum-computation"]], "Functions in quantum information": [[55, "Functions-in-quantum-information"]], "Hamiltonian in QuAIRKit": [[51, null]], "Information of a State instance": [[56, "Information-of-a-State-instance"]], "Interaction with environments": [[56, "Interaction-with-environments"]], "Introduction to Hamiltonian": [[51, "Introduction-to-Hamiltonian"]], "Introduction to Neural Networks": [[57, "Introduction-to-Neural-Networks"]], "Introduction to qudit quantum computing": [[50, null]], "Kraus representation": [[54, "Kraus-representation"]], "Manipulation of Quantum States in QuAIRKit": [[56, null]], "Manipulation of states": [[56, "Manipulation-of-states"]], "Measurement": [[50, "Measurement"]], "Measuring quantum states in QuAIRKit": [[53, null]], "Neural Networks in PyTorch": [[57, "Neural-Networks-in-PyTorch"]], "Neural network setup customization": [[49, null]], "Note": [[4, null], [4, null], [4, null], [5, null], [5, null], [5, null], [5, null], [9, null], [9, null], [9, null], [11, null], [12, null], [17, null], [28, null], [31, null], [32, null], [32, null], [32, null], [32, null], [35, null], [35, null], [42, null], [44, null], [44, null], [44, null]], "Operations in qudit circuits": [[50, "Operations-in-qudit-circuits"]], "Operator management": [[52, "Operator-management"]], "Other properties": [[52, "Other-properties"]], "Parameterized quantum circuits (PQCs)": [[57, "Parameterized-quantum-circuits-(PQCs)"]], "Perform measurement": [[53, "Perform-measurement"]], "Phase flip channel": [[54, "Phase-flip-channel"]], "Positive operator-valued measurement": [[53, "Positive-operator-valued-measurement"]], "Preparation of states": [[56, "Preparation-of-states"]], "Quantum Gates and Quantum Channels": [[54, null]], "Quantum channels": [[54, "Quantum-channels"]], "Quantum gates": [[54, "Quantum-gates"]], "Quantum information tools": [[55, null]], "Quantum measurement": [[53, "Quantum-measurement"]], "References": [[51, "References"], [52, "References"], [53, "References"], [54, "References"], [57, "References"]], "Review on qubit case": [[50, "Review-on-qubit-case"]], "Sampled measurements": [[53, "Sampled-measurements"]], "Setup for general cases": [[50, "Setup-for-general-cases"]], "Setup for qutrit case": [[50, "Setup-for-qutrit-case"]], "Setup via quairkit.Circuit": [[49, "Setup-via-quairkit.Circuit"]], "Setup via torch.nn.Module": [[49, "Setup-via-torch.nn.Module"]], "Single-qubit gates": [[54, "Single-qubit-gates"]], "Stinespring representation": [[54, "Stinespring-representation"]], "The Hamiltonian class": [[51, "The-Hamiltonian-class"]], "Training parameterized quantum circuits": [[57, null]], "Two-qubit gates": [[54, "Two-qubit-gates"]], "Validation functions": [[55, "Validation-functions"]], "Variational quantum eigensolvers (VQEs)": [[57, "Variational-quantum-eigensolvers-(VQEs)"]], "Warning": [[9, null], [44, null]], "Welcome to QuAIRKit\u2019s documentation!": [[0, null]], "quairkit": [[1, null]], "quairkit.ansatz": [[2, null]], "quairkit.ansatz.comb": [[3, null]], "quairkit.ansatz.container": [[4, null]], "quairkit.ansatz.layer": [[5, null]], "quairkit.application": [[6, null]], "quairkit.application.comb": [[7, null]], "quairkit.application.comb.comb": [[8, null]], "quairkit.circuit": [[9, null]], "quairkit.core": [[10, null]], "quairkit.core.base": [[11, null]], "quairkit.core.hamiltonian": [[12, null]], "quairkit.core.state": [[13, null]], "quairkit.core.state.backend": [[14, null]], "quairkit.core.state.backend.density_matrix": [[15, null]], "quairkit.core.state.backend.state_vector": [[16, null]], "quairkit.core.state.state": [[17, null]], "quairkit.core.visual": [[18, null]], "quairkit.database": [[19, null]], "quairkit.database.hamiltonian": [[20, null]], "quairkit.database.matrix": [[21, null]], "quairkit.database.random": [[22, null]], "quairkit.database.representation": [[23, null]], "quairkit.database.set": [[24, null]], "quairkit.database.state": [[25, null]], "quairkit.loss": [[26, null]], "quairkit.loss.distance": [[27, null]], "quairkit.loss.measure": [[28, null]], "quairkit.operator": [[29, null]], "quairkit.operator.channel": [[30, null]], "quairkit.operator.channel.base": [[31, null]], "quairkit.operator.channel.common": [[32, null]], "quairkit.operator.channel.custom": [[33, null]], "quairkit.operator.gate": [[34, null]], "quairkit.operator.gate.base": [[35, null]], "quairkit.operator.gate.custom": [[36, null]], "quairkit.operator.gate.multi_qubit_gate": [[37, null]], "quairkit.operator.gate.single_qubit_gate": [[38, null]], "quairkit.operator.gate.visual": [[39, null]], "quairkit.operator.special": [[40, null]], "quairkit.qinfo": [[41, null]], "quairkit.qinfo.check": [[42, null]], "quairkit.qinfo.linalg": [[43, null]], "quairkit.qinfo.qinfo": [[44, null]], "tutorials": [[45, null]], "tutorials.feature": [[46, null]], "tutorials.introduction": [[47, null]]}, "docurls": ["index.html", "quairkit.html", "quairkit.ansatz.html", "quairkit.ansatz.comb.html", "quairkit.ansatz.container.html", "quairkit.ansatz.layer.html", "quairkit.application.html", "quairkit.application.comb.html", "quairkit.application.comb.comb.html", "quairkit.circuit.html", "quairkit.core.html", "quairkit.core.base.html", "quairkit.core.hamiltonian.html", "quairkit.core.state.html", "quairkit.core.state.backend.html", "quairkit.core.state.backend.density_matrix.html", "quairkit.core.state.backend.state_vector.html", "quairkit.core.state.state.html", "quairkit.core.visual.html", "quairkit.database.html", "quairkit.database.hamiltonian.html", "quairkit.database.matrix.html", "quairkit.database.random.html", "quairkit.database.representation.html", "quairkit.database.set.html", "quairkit.database.state.html", "quairkit.loss.html", "quairkit.loss.distance.html", "quairkit.loss.measure.html", "quairkit.operator.html", "quairkit.operator.channel.html", "quairkit.operator.channel.base.html", "quairkit.operator.channel.common.html", "quairkit.operator.channel.custom.html", "quairkit.operator.gate.html", "quairkit.operator.gate.base.html", "quairkit.operator.gate.custom.html", "quairkit.operator.gate.multi_qubit_gate.html", "quairkit.operator.gate.single_qubit_gate.html", "quairkit.operator.gate.visual.html", "quairkit.operator.special.html", "quairkit.qinfo.html", "quairkit.qinfo.check.html", "quairkit.qinfo.linalg.html", "quairkit.qinfo.qinfo.html", "tutorials.html", "tutorials.feature.html", "tutorials.introduction.html", "tutorials/feature/batch.html", "tutorials/feature/custom.html", "tutorials/feature/qudit.html", "tutorials/introduction/Hamiltonian.html", "tutorials/introduction/circuit.html", "tutorials/introduction/measure.html", "tutorials/introduction/operator.html", "tutorials/introduction/qinfo.html", "tutorials/introduction/state.html", "tutorials/introduction/training.html"], "envversion": {"nbsphinx": 4, "sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2}, "indexentries": {"abs_norm() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.abs_norm", false]], "add_systems() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.add_systems", false]], "amplitude_damping() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.amplitude_damping", false]], "amplitude_damping_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.amplitude_damping_kraus", false]], "amplitude_encoding() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.amplitude_encoding", false]], "amplitudedamping (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.AmplitudeDamping", false]], "angle_encoding() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.angle_encoding", false]], "append() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.append", false]], "basis_encoding() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.basis_encoding", false]], "bell_basis() (in module quairkit.database.set)": [[24, "quairkit.database.set.bell_basis", false]], "bell_diagonal_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.bell_diagonal_state", false]], "bell_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.bell_state", false]], "bit_flip() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.bit_flip", false]], "bit_flip_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.bit_flip_kraus", false]], "bit_phase_flip() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.bit_phase_flip", false]], "bit_phase_flip_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.bit_phase_flip_kraus", false]], "bitflip (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.BitFlip", false]], "bitphaseflip (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.BitPhaseFlip", false]], "block_enc_herm() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.block_enc_herm", false]], "ccx (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CCX", false]], "ccx() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ccx", false]], "ccx() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.ccx", false]], "ccx_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ccx_gate", false]], "channel (class in quairkit.operator.channel.base)": [[31, "quairkit.operator.channel.base.Channel", false]], "channel_repr_convert() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.channel_repr_convert", false]], "choi_channel() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.choi_channel", false]], "choi_repr (quairkit.operator.channel.base.channel property)": [[31, "quairkit.operator.channel.base.Channel.choi_repr", false]], "choirepr (class in quairkit.operator.channel.custom)": [[33, "quairkit.operator.channel.custom.ChoiRepr", false]], "circuit (class in quairkit.circuit)": [[9, "quairkit.circuit.Circuit", false]], "cnot (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CNOT", false]], "cnot() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cnot", false]], "cnot() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cnot", false]], "cnot_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cnot_gate", false]], "coefficients (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.coefficients", false]], "collapse (class in quairkit.operator.special)": [[40, "quairkit.operator.special.Collapse", false]], "completely_mixed_computational() (in module quairkit.database.state)": [[25, "quairkit.database.state.completely_mixed_computational", false]], "complex_block_layer() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.complex_block_layer", false]], "complex_entangled_layer() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.complex_entangled_layer", false]], "complexblocklayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.ComplexBlockLayer", false]], "complexentangledlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.ComplexEntangledLayer", false]], "computational_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.computational_state", false]], "construct_h_matrix() (quairkit.core.hamiltonian.hamiltonian method)": [[12, "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix", false]], "control_oracle() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.control_oracle", false]], "controloracle (class in quairkit.operator.gate.custom)": [[36, "quairkit.operator.gate.custom.ControlOracle", false]], "controlparamoracle (class in quairkit.operator.gate.custom)": [[36, "quairkit.operator.gate.custom.ControlParamOracle", false]], "cp (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CP", false]], "cp() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cp", false]], "cp() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cp", false]], "cp_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cp_gate", false]], "create_choi_repr() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.create_choi_repr", false]], "create_matrix() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.create_matrix", false]], "crx (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CRX", false]], "crx() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.crx", false]], "crx() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.crx", false]], "crx_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.crx_gate", false]], "cry (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CRY", false]], "cry() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cry", false]], "cry() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cry", false]], "cry_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cry_gate", false]], "crz (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CRZ", false]], "crz() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.crz", false]], "crz() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.crz", false]], "crz_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.crz_gate", false]], "cswap (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CSWAP", false]], "cswap() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cswap", false]], "cswap() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cswap", false]], "cswap_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cswap_gate", false]], "cu (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CU", false]], "cu() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cu", false]], "cu() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cu", false]], "cu_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cu_gate", false]], "cx (in module quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CX", false]], "cy (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CY", false]], "cy() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cy", false]], "cy() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cy", false]], "cy_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cy_gate", false]], "cz (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.CZ", false]], "cz() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cz", false]], "cz() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.cz", false]], "cz_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.cz_gate", false]], "dagger() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.dagger", false]], "dagger() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.dagger", false]], "dagger() (quairkit.operator.gate.base.gate method)": [[35, "quairkit.operator.gate.base.Gate.dagger", false]], "decomp_1qubit() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.decomp_1qubit", false]], "decomp_ctrl_1qubit() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.decomp_ctrl_1qubit", false]], "decompose_pauli_words() (quairkit.core.hamiltonian.hamiltonian method)": [[12, "quairkit.core.hamiltonian.Hamiltonian.decompose_pauli_words", false]], "decompose_with_sites() (quairkit.core.hamiltonian.hamiltonian method)": [[12, "quairkit.core.hamiltonian.Hamiltonian.decompose_with_sites", false]], "depolarizing (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.Depolarizing", false]], "depolarizing() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.depolarizing", false]], "depolarizing_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.depolarizing_kraus", false]], "depth (quairkit.ansatz.container.layer property)": [[4, "quairkit.ansatz.container.Layer.depth", false]], "depth (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.depth", false]], "diamond_norm() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.diamond_norm", false]], "dim (quairkit.operator.channel.base.channel property)": [[31, "quairkit.operator.channel.base.Channel.dim", false]], "direct_sum() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.direct_sum", false]], "display_in_circuit() (quairkit.operator.gate.base.gate method)": [[35, "quairkit.operator.gate.base.Gate.display_in_circuit", false]], "display_in_circuit() (quairkit.operator.gate.base.paramgate method)": [[35, "quairkit.operator.gate.base.ParamGate.display_in_circuit", false]], "equal_dim (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.equal_dim", false]], "expecval (class in quairkit.loss.measure)": [[28, "quairkit.loss.measure.ExpecVal", false]], "extend() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.extend", false]], "extract_highest_fidelity() (quairkit.application.comb.comb.pqcombnet method)": [[8, "quairkit.application.comb.comb.PQCombNet.extract_highest_fidelity", false]], "eye() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.eye", false]], "eye_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.eye_gate", false]], "forward() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.forward", false]], "forward() (quairkit.loss.distance.statefidelity method)": [[27, "quairkit.loss.distance.StateFidelity.forward", false]], "forward() (quairkit.loss.distance.tracedistance method)": [[27, "quairkit.loss.distance.TraceDistance.forward", false]], "forward() (quairkit.loss.measure.expecval method)": [[28, "quairkit.loss.measure.ExpecVal.forward", false]], "forward() (quairkit.loss.measure.measure method)": [[28, "quairkit.loss.measure.Measure.forward", false]], "forward() (quairkit.operator.special.collapse method)": [[40, "quairkit.operator.special.Collapse.forward", false]], "forward() (quairkit.operator.special.onewaylocc method)": [[40, "quairkit.operator.special.OneWayLOCC.forward", false]], "forward() (quairkit.operator.special.quasioperation method)": [[40, "quairkit.operator.special.QuasiOperation.forward", false]], "forward() (quairkit.operator.special.resetstate method)": [[40, "quairkit.operator.special.ResetState.forward", false]], "gate (class in quairkit.operator.gate.base)": [[35, "quairkit.operator.gate.base.Gate", false]], "gate_fidelity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.gate_fidelity", false]], "gell_mann() (in module quairkit.database.set)": [[24, "quairkit.database.set.gell_mann", false]], "general_state_fidelity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.general_state_fidelity", false]], "generalized_amplitude_damping() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.generalized_amplitude_damping", false]], "generalized_amplitude_damping_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.generalized_amplitude_damping_kraus", false]], "generalized_depolarizing() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.generalized_depolarizing", false]], "generalized_depolarizing_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.generalized_depolarizing_kraus", false]], "generalizedamplitudedamping (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.GeneralizedAmplitudeDamping", false]], "generalizeddepolarizing (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.GeneralizedDepolarizing", false]], "get_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.get_circuit_plot_param", false]], "get_device() (in module quairkit.core.base)": [[11, "quairkit.core.base.get_device", false]], "get_dtype() (in module quairkit.core.base)": [[11, "quairkit.core.base.get_dtype", false]], "get_float_dtype() (in module quairkit.core.base)": [[11, "quairkit.core.base.get_float_dtype", false]], "get_latex_name() (quairkit.ansatz.container.layer method)": [[4, "quairkit.ansatz.container.Layer.get_latex_name", false]], "get_qasm() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.get_qasm", false]], "get_seed() (in module quairkit.core.base)": [[11, "quairkit.core.base.get_seed", false]], "ghz_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.ghz_state", false]], "grad (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.grad", false]], "gradient() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.gradient", false]], "grover_matrix() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.grover_matrix", false]], "h (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.H", false]], "h() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.h", false]], "h() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.h", false]], "h_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.h_gate", false]], "haar_density_operator() (in module quairkit.database.random)": [[22, "quairkit.database.random.haar_density_operator", false]], "haar_orthogonal() (in module quairkit.database.random)": [[22, "quairkit.database.random.haar_orthogonal", false]], "haar_state_vector() (in module quairkit.database.random)": [[22, "quairkit.database.random.haar_state_vector", false]], "haar_unitary() (in module quairkit.database.random)": [[22, "quairkit.database.random.haar_unitary", false]], "hamiltonian (class in quairkit.core.hamiltonian)": [[12, "quairkit.core.hamiltonian.Hamiltonian", false]], "heisenberg_hamiltonian() (in module quairkit.database.hamiltonian)": [[20, "quairkit.database.hamiltonian.heisenberg_hamiltonian", false]], "heisenberg_weyl() (in module quairkit.database.set)": [[24, "quairkit.database.set.heisenberg_weyl", false]], "herm_transform() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.herm_transform", false]], "hessian() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.hessian", false]], "info (quairkit.operator.channel.base.channel property)": [[31, "quairkit.operator.channel.base.Channel.info", false]], "info (quairkit.operator.gate.base.gate property)": [[35, "quairkit.operator.gate.base.Gate.info", false]], "info (quairkit.operator.gate.base.paramgate property)": [[35, "quairkit.operator.gate.base.ParamGate.info", false]], "info (quairkit.operator.gate.custom.controloracle property)": [[36, "quairkit.operator.gate.custom.ControlOracle.info", false]], "info (quairkit.operator.gate.custom.oracle property)": [[36, "quairkit.operator.gate.custom.Oracle.info", false]], "info (quairkit.operator.gate.custom.permutation property)": [[36, "quairkit.operator.gate.custom.Permutation.info", false]], "info (quairkit.operator.special.collapse property)": [[40, "quairkit.operator.special.Collapse.info", false]], "info (quairkit.operator.special.onewaylocc property)": [[40, "quairkit.operator.special.OneWayLOCC.info", false]], "info (quairkit.operator.special.quasioperation property)": [[40, "quairkit.operator.special.QuasiOperation.info", false]], "info (quairkit.operator.special.resetstate property)": [[40, "quairkit.operator.special.ResetState.info", false]], "iqp_encoding() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.iqp_encoding", false]], "is_choi() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_choi", false]], "is_density_matrix() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_density_matrix", false]], "is_hermitian() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_hermitian", false]], "is_linear() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_linear", false]], "is_positive() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_positive", false]], "is_povm() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_povm", false]], "is_ppt() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_ppt", false]], "is_projector() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_projector", false]], "is_pvm() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_pvm", false]], "is_state_vector() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_state_vector", false]], "is_unitary() (in module quairkit.qinfo.check)": [[42, "quairkit.qinfo.check.is_unitary", false]], "ising_hamiltonian() (in module quairkit.database.hamiltonian)": [[20, "quairkit.database.hamiltonian.ising_hamiltonian", false]], "isotropic_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.isotropic_state", false]], "kraus_channel() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.kraus_channel", false]], "kraus_repr (quairkit.operator.channel.base.channel property)": [[31, "quairkit.operator.channel.base.Channel.kraus_repr", false]], "krausrepr (class in quairkit.operator.channel.custom)": [[33, "quairkit.operator.channel.custom.KrausRepr", false]], "kron_power() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.kron_power", false]], "layer (class in quairkit.ansatz.container)": [[4, "quairkit.ansatz.container.Layer", false]], "linear_entangled_layer() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.linear_entangled_layer", false]], "linearentangledlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.LinearEntangledLayer", false]], "link() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.link", false]], "locc() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.locc", false]], "logarithmic_negativity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.logarithmic_negativity", false]], "logm() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.logm", false]], "mana() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.mana", false]], "matrix (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.matrix", false]], "matrix (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.matrix", false]], "matrix (quairkit.operator.gate.base.gate property)": [[35, "quairkit.operator.gate.base.Gate.matrix", false]], "measure (class in quairkit.loss.measure)": [[28, "quairkit.loss.measure.Measure", false]], "measure() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.measure", false]], "module": [[4, "module-quairkit.ansatz.container", false], [5, "module-quairkit.ansatz.layer", false], [8, "module-quairkit.application.comb.comb", false], [9, "module-quairkit.circuit", false], [11, "module-quairkit.core.base", false], [12, "module-quairkit.core.hamiltonian", false], [17, "module-quairkit.core.state.state", false], [20, "module-quairkit.database.hamiltonian", false], [21, "module-quairkit.database.matrix", false], [22, "module-quairkit.database.random", false], [23, "module-quairkit.database.representation", false], [24, "module-quairkit.database.set", false], [25, "module-quairkit.database.state", false], [27, "module-quairkit.loss.distance", false], [28, "module-quairkit.loss.measure", false], [31, "module-quairkit.operator.channel.base", false], [32, "module-quairkit.operator.channel.common", false], [33, "module-quairkit.operator.channel.custom", false], [35, "module-quairkit.operator.gate.base", false], [36, "module-quairkit.operator.gate.custom", false], [37, "module-quairkit.operator.gate.multi_qubit_gate", false], [38, "module-quairkit.operator.gate.single_qubit_gate", false], [39, "module-quairkit.operator.gate.visual", false], [40, "module-quairkit.operator.special", false], [42, "module-quairkit.qinfo.check", false], [43, "module-quairkit.qinfo.linalg", false], [44, "module-quairkit.qinfo.qinfo", false]], "ms (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.MS", false]], "ms() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ms", false]], "ms() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.ms", false]], "ms_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ms_gate", false]], "mutual_information() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.mutual_information", false]], "n_qubits (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.n_qubits", false]], "n_terms (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.n_terms", false]], "negativity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.negativity", false]], "nkron() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.NKron", false], [43, "quairkit.qinfo.linalg.nkron", false]], "num_qubits (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.num_qubits", false]], "num_qutrits (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.num_qutrits", false]], "num_systems (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.num_systems", false]], "of() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.Of", false]], "of_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.Of_gate", false]], "one_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.one_state", false]], "onewaylocc (class in quairkit.operator.special)": [[40, "quairkit.operator.special.OneWayLOCC", false]], "operator_history (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.operator_history", false]], "operatorlist (class in quairkit.ansatz.container)": [[4, "quairkit.ansatz.container.OperatorList", false]], "operators() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.operators", false]], "oracle (class in quairkit.operator.gate.custom)": [[36, "quairkit.operator.gate.custom.Oracle", false]], "oracle() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.oracle", false]], "p (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.P", false]], "p() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.p", false]], "p() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.p", false]], "p_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.p_gate", false]], "p_norm() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.p_norm", false]], "param (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.param", false]], "param_locc() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.param_locc", false]], "param_oracle() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.param_oracle", false]], "param_quasi() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.param_quasi", false]], "paramgate (class in quairkit.operator.gate.base)": [[35, "quairkit.operator.gate.base.ParamGate", false]], "paramoracle (class in quairkit.operator.gate.custom)": [[36, "quairkit.operator.gate.custom.ParamOracle", false]], "partial_trace() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.partial_trace", false]], "partial_trace_discontiguous() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.partial_trace_discontiguous", false]], "partial_transpose() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.partial_transpose", false]], "pauli_basis() (in module quairkit.database.set)": [[24, "quairkit.database.set.pauli_basis", false]], "pauli_channel() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.pauli_channel", false]], "pauli_decomposition() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.pauli_decomposition", false]], "pauli_group() (in module quairkit.database.set)": [[24, "quairkit.database.set.pauli_group", false]], "pauli_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.pauli_kraus", false]], "pauli_str (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.pauli_str", false]], "pauli_str_basis() (in module quairkit.database.set)": [[24, "quairkit.database.set.pauli_str_basis", false]], "pauli_str_convertor() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.pauli_str_convertor", false]], "pauli_str_povm() (in module quairkit.database.set)": [[24, "quairkit.database.set.pauli_str_povm", false]], "pauli_words (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.pauli_words", false]], "pauli_words_matrix (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_matrix", false]], "pauli_words_r (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.pauli_words_r", false]], "paulichannel (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.PauliChannel", false]], "permutation (class in quairkit.operator.gate.custom)": [[36, "quairkit.operator.gate.custom.Permutation", false]], "permutation_matrix() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.permutation_matrix", false]], "permute() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.permute", false]], "permute_systems() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.permute_systems", false]], "phase() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.phase", false]], "phase_damping() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.phase_damping", false]], "phase_damping_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.phase_damping_kraus", false]], "phase_flip() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.phase_flip", false]], "phase_flip_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.phase_flip_kraus", false]], "phase_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.phase_gate", false]], "phase_space_point() (in module quairkit.database.set)": [[24, "quairkit.database.set.phase_space_point", false]], "phasedamping (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.PhaseDamping", false]], "phaseflip (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.PhaseFlip", false]], "plot() (quairkit.ansatz.container.layer method)": [[4, "quairkit.ansatz.container.Layer.plot", false]], "plot() (quairkit.application.comb.comb.pqcombnet method)": [[8, "quairkit.application.comb.comb.PQCombNet.plot", false]], "plot() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.plot", false]], "pqcombnet (class in quairkit.application.comb.comb)": [[8, "quairkit.application.comb.comb.PQCombNet", false]], "prob_sample() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.prob_sample", false]], "probability (quairkit.operator.special.quasioperation property)": [[40, "quairkit.operator.special.QuasiOperation.probability", false]], "purity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.purity", false]], "qasm (quairkit.circuit.circuit property)": [[9, "quairkit.circuit.Circuit.qasm", false]], "qasm2 (quairkit.circuit.circuit property)": [[9, "quairkit.circuit.Circuit.qasm2", false]], "qft_basis() (in module quairkit.database.set)": [[24, "quairkit.database.set.qft_basis", false]], "qft_matrix() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.qft_matrix", false]], "quairkit.ansatz.container": [[4, "module-quairkit.ansatz.container", false]], "quairkit.ansatz.layer": [[5, "module-quairkit.ansatz.layer", false]], "quairkit.application.comb.comb": [[8, "module-quairkit.application.comb.comb", false]], "quairkit.circuit": [[9, "module-quairkit.circuit", false]], "quairkit.core.base": [[11, "module-quairkit.core.base", false]], "quairkit.core.hamiltonian": [[12, "module-quairkit.core.hamiltonian", false]], "quairkit.core.state.state": [[17, "module-quairkit.core.state.state", false]], "quairkit.database.hamiltonian": [[20, "module-quairkit.database.hamiltonian", false]], "quairkit.database.matrix": [[21, "module-quairkit.database.matrix", false]], "quairkit.database.random": [[22, "module-quairkit.database.random", false]], "quairkit.database.representation": [[23, "module-quairkit.database.representation", false]], "quairkit.database.set": [[24, "module-quairkit.database.set", false]], "quairkit.database.state": [[25, "module-quairkit.database.state", false]], "quairkit.loss.distance": [[27, "module-quairkit.loss.distance", false]], "quairkit.loss.measure": [[28, "module-quairkit.loss.measure", false]], "quairkit.operator.channel.base": [[31, "module-quairkit.operator.channel.base", false]], "quairkit.operator.channel.common": [[32, "module-quairkit.operator.channel.common", false]], "quairkit.operator.channel.custom": [[33, "module-quairkit.operator.channel.custom", false]], "quairkit.operator.gate.base": [[35, "module-quairkit.operator.gate.base", false]], "quairkit.operator.gate.custom": [[36, "module-quairkit.operator.gate.custom", false]], "quairkit.operator.gate.multi_qubit_gate": [[37, "module-quairkit.operator.gate.multi_qubit_gate", false]], "quairkit.operator.gate.single_qubit_gate": [[38, "module-quairkit.operator.gate.single_qubit_gate", false]], "quairkit.operator.gate.visual": [[39, "module-quairkit.operator.gate.visual", false]], "quairkit.operator.special": [[40, "module-quairkit.operator.special", false]], "quairkit.qinfo.check": [[42, "module-quairkit.qinfo.check", false]], "quairkit.qinfo.linalg": [[43, "module-quairkit.qinfo.linalg", false]], "quairkit.qinfo.qinfo": [[44, "module-quairkit.qinfo.qinfo", false]], "quasi() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.quasi", false]], "quasioperation (class in quairkit.operator.special)": [[40, "quairkit.operator.special.QuasiOperation", false]], "r_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.r_state", false]], "random_channel() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_channel", false]], "random_clifford() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_clifford", false]], "random_density_matrix() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_density_matrix", false]], "random_hamiltonian_generator() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_hamiltonian_generator", false]], "random_hermitian() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_hermitian", false]], "random_lcu() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_lcu", false]], "random_orthogonal_projection() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_orthogonal_projection", false]], "random_pauli_str_generator() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_pauli_str_generator", false]], "random_projector() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_projector", false]], "random_state() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_state", false]], "random_unitary() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_unitary", false]], "random_unitary_hermitian() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_unitary_hermitian", false]], "random_unitary_with_hermitian_block() (in module quairkit.database.random)": [[22, "quairkit.database.random.random_unitary_with_hermitian_block", false]], "randomize_param() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.randomize_param", false]], "real_block_layer() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.real_block_layer", false]], "real_entangled_layer() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.real_entangled_layer", false]], "realblocklayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.RealBlockLayer", false]], "realentangledlayer (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.RealEntangledLayer", false]], "register_idx() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.register_idx", false]], "relative_entropy() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.relative_entropy", false]], "replacement_choi() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.replacement_choi", false]], "replacementchannel (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.ReplacementChannel", false]], "reset() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.reset", false]], "reset_channel() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.reset_channel", false]], "reset_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.reset_circuit_plot_param", false]], "reset_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.reset_kraus", false]], "resetchannel (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.ResetChannel", false]], "resetstate (class in quairkit.operator.special)": [[40, "quairkit.operator.special.ResetState", false]], "rx (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.RX", false]], "rx() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rx", false]], "rx() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.rx", false]], "rx_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rx_gate", false]], "rxx (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.RXX", false]], "rxx() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rxx", false]], "rxx() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.rxx", false]], "rxx_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rxx_gate", false]], "ry (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.RY", false]], "ry() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ry", false]], "ry() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.ry", false]], "ry_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ry_gate", false]], "ryy (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.RYY", false]], "ryy() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ryy", false]], "ryy() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.ryy", false]], "ryy_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.ryy_gate", false]], "rz (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.RZ", false]], "rz() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rz", false]], "rz() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.rz", false]], "rz_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rz_gate", false]], "rzz (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.RZZ", false]], "rzz() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rzz", false]], "rzz() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.rzz", false]], "rzz_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.rzz_gate", false]], "s (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.S", false]], "s() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.s", false]], "s() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.s", false]], "s_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.s_gate", false]], "s_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.s_state", false]], "scale_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.scale_circuit_plot_param", false]], "schmidt_decompose() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.schmidt_decompose", false]], "sdg (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Sdg", false]], "sdg() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.sdg", false]], "sdg() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.sdg", false]], "sdg_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.sdg_gate", false]], "set_circuit_plot_param() (in module quairkit.operator.gate.visual)": [[39, "quairkit.operator.gate.visual.set_circuit_plot_param", false]], "set_device() (in module quairkit.core.base)": [[11, "quairkit.core.base.set_device", false]], "set_dtype() (in module quairkit.core.base)": [[11, "quairkit.core.base.set_dtype", false]], "set_seed() (in module quairkit.core.base)": [[11, "quairkit.core.base.set_seed", false]], "shift() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.shift", false]], "shift_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.shift_gate", false]], "sigx_p (quairkit.core.hamiltonian.spinops property)": [[12, "quairkit.core.hamiltonian.SpinOps.sigx_p", false]], "sigy_p (quairkit.core.hamiltonian.spinops property)": [[12, "quairkit.core.hamiltonian.SpinOps.sigy_p", false]], "sigz_p (quairkit.core.hamiltonian.spinops property)": [[12, "quairkit.core.hamiltonian.SpinOps.sigz_p", false]], "sites (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.sites", false]], "sort() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.sort", false]], "spinops (class in quairkit.core.hamiltonian)": [[12, "quairkit.core.hamiltonian.SpinOps", false]], "sqrtm() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.sqrtm", false]], "stab_nullity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.stab_nullity", false]], "stab_renyi() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.stab_renyi", false]], "state_fidelity() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.state_fidelity", false]], "statefidelity (class in quairkit.loss.distance)": [[27, "quairkit.loss.distance.StateFidelity", false]], "std_basis() (in module quairkit.database.set)": [[24, "quairkit.database.set.std_basis", false]], "stinespring_channel() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.stinespring_channel", false]], "stinespring_repr (quairkit.operator.channel.base.channel property)": [[31, "quairkit.operator.channel.base.Channel.stinespring_repr", false]], "stinespringrepr (class in quairkit.operator.channel.custom)": [[33, "quairkit.operator.channel.custom.StinespringRepr", false]], "swap (class in quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.SWAP", false]], "swap() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.swap", false]], "swap() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.swap", false]], "swap_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.swap_gate", false]], "system_dim (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.system_dim", false]], "system_idx (quairkit.ansatz.container.operatorlist property)": [[4, "quairkit.ansatz.container.OperatorList.system_idx", false]], "system_idx (quairkit.operator.special.onewaylocc property)": [[40, "quairkit.operator.special.OneWayLOCC.system_idx", false]], "system_idx (quairkit.operator.special.quasioperation property)": [[40, "quairkit.operator.special.QuasiOperation.system_idx", false]], "t (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.T", false]], "t() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.t", false]], "t() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.t", false]], "t_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.t_gate", false]], "tdg (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Tdg", false]], "tdg() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.tdg", false]], "tdg() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.tdg", false]], "tdg_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.tdg_gate", false]], "tensor_state() (in module quairkit.core.state.state)": [[17, "quairkit.core.state.state.tensor_state", false]], "terms (quairkit.core.hamiltonian.hamiltonian property)": [[12, "quairkit.core.hamiltonian.Hamiltonian.terms", false]], "thermal_relaxation() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.thermal_relaxation", false]], "thermal_relaxation_kraus() (in module quairkit.database.representation)": [[23, "quairkit.database.representation.thermal_relaxation_kraus", false]], "thermalrelaxation (class in quairkit.operator.channel.common)": [[32, "quairkit.operator.channel.common.ThermalRelaxation", false]], "to_latex() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.to_latex", false]], "to_state() (in module quairkit.core.state.state)": [[17, "quairkit.core.state.state.to_state", false]], "toffoli (in module quairkit.operator.gate.multi_qubit_gate)": [[37, "quairkit.operator.gate.multi_qubit_gate.Toffoli", false]], "toffoli() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.toffoli", false]], "toffoli_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.toffoli_gate", false]], "trace() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.trace", false]], "trace_distance() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.trace_distance", false]], "trace_norm() (in module quairkit.qinfo.linalg)": [[43, "quairkit.qinfo.linalg.trace_norm", false]], "tracedistance (class in quairkit.loss.distance)": [[27, "quairkit.loss.distance.TraceDistance", false]], "train() (quairkit.application.comb.comb.pqcombnet method)": [[8, "quairkit.application.comb.comb.PQCombNet.train", false]], "transfer_static() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.transfer_static", false]], "trotter() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.trotter", false]], "u3 (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.U3", false]], "u3() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.u3", false]], "u3() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.u3", false]], "u3_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.u3_gate", false]], "uf() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.Uf", false]], "uf_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.Uf_gate", false]], "unitary_matrix() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.unitary_matrix", false]], "universal2 (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.Universal2", false]], "universal2() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.universal2", false]], "universal2_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.universal2_gate", false]], "universal3 (class in quairkit.ansatz.layer)": [[5, "quairkit.ansatz.layer.Universal3", false]], "universal3() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.universal3", false]], "universal3_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.universal3_gate", false]], "universal_qudit() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.universal_qudit", false]], "universal_qudits() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.universal_qudits", false]], "universal_three_qubits() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.universal_three_qubits", false]], "universal_two_qubits() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.universal_two_qubits", false]], "universalqudits (class in quairkit.operator.gate.custom)": [[36, "quairkit.operator.gate.custom.UniversalQudits", false]], "update_param() (quairkit.ansatz.container.operatorlist method)": [[4, "quairkit.ansatz.container.OperatorList.update_param", false]], "update_v_circuit() (quairkit.application.comb.comb.pqcombnet method)": [[8, "quairkit.application.comb.comb.PQCombNet.update_V_circuit", false]], "von_neumann_entropy() (in module quairkit.qinfo.qinfo)": [[44, "quairkit.qinfo.qinfo.von_neumann_entropy", false]], "w_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.w_state", false]], "x (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.X", false]], "x() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.x", false]], "x() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.x", false]], "x_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.x_gate", false]], "xy_hamiltonian() (in module quairkit.database.hamiltonian)": [[20, "quairkit.database.hamiltonian.xy_hamiltonian", false]], "y (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Y", false]], "y() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.y", false]], "y() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.y", false]], "y_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.y_gate", false]], "z (class in quairkit.operator.gate.single_qubit_gate)": [[38, "quairkit.operator.gate.single_qubit_gate.Z", false]], "z() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.z", false]], "z() (quairkit.circuit.circuit method)": [[9, "quairkit.circuit.Circuit.z", false]], "z_gate() (in module quairkit.database.matrix)": [[21, "quairkit.database.matrix.z_gate", false]], "zero_state() (in module quairkit.database.state)": [[25, "quairkit.database.state.zero_state", false]]}, "objects": {"quairkit": [[9, 0, 0, 1, "circuit", ""]], "quairkit.ansatz": [[4, 0, 0, 1, "container", ""], [5, 0, 0, 1, "layer", ""]], "quairkit.ansatz.container": [[4, 1, 1, 0, "Layer", "Base class for built-in trainable quantum circuit ansatz."], [4, 1, 1, 0, "OperatorList", "Sequential container for QuAIRKit operators."]], "quairkit.ansatz.container.Layer": [[4, 3, 1, 0, "depth", "Depth of the layer."], [4, 4, 1, 0, "get_latex_name", "Return the LaTeX name of the layer."], [4, 4, 1, 0, "plot", "Plot the circuit layer using LaTeX"]], "quairkit.ansatz.container.Layer.__init__": [[4, 2, 2, 0, "depth", "Depth of the layer."], [4, 2, 2, 0, "name", "Name of the layer."], [4, 2, 2, 0, "physical_idx", "Physical indices of the systems on which this layer is applied."], [4, 2, 2, 0, "system_dim", "Dimension of the systems."]], "quairkit.ansatz.container.Layer.get_latex_name": [[4, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.ansatz.container.Layer.plot": [[4, 2, 2, 0, "decimal", "number of decimal places to display."], [4, 2, 2, 0, "dpi", "dots per inches of plot image."], [4, 2, 2, 0, "print_code", "whether print the LaTeX code of the circuit, default to True."], [4, 2, 2, 0, "show_plot", "whether show the plotted circuit, default to True."], [4, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.ansatz.container.OperatorList": [[4, 4, 1, 0, "add_systems", "Add new systems to the list."], [4, 4, 1, 0, "append", "Appends an operator or an operator sub-list to the end."], [4, 4, 1, 0, "dagger", "Reverse the entire operator list."], [4, 3, 1, 0, "depth", "Depth of gate sequences."], [4, 3, 1, 0, "equal_dim", "Whether the systems in this circuit have the same dimension."], [4, 4, 1, 0, "extend", "Extend the list with another sequential"], [4, 4, 1, 0, "forward", "Passing a physical input state."], [4, 4, 1, 0, "get_qasm", "Get the OpenQASM-like string representation of the circuit."], [4, 3, 1, 0, "grad", "Gradients with respect to the flattened parameters."], [4, 3, 1, 0, "matrix", "Get the unitary matrix form of the operator list."], [4, 3, 1, 0, "num_qubits", "Number of qubits in this circuit."], [4, 3, 1, 0, "num_qutrits", "Number of qutrits in this circuit."], [4, 3, 1, 0, "num_systems", "Number of logical systems."], [4, 3, 1, 0, "operator_history", "Return the operator history of this Sequential"], [4, 4, 1, 0, "operators", "Yield all operators in this list."], [4, 3, 1, 0, "param", "Flattened parameters in this list."], [4, 4, 1, 0, "randomize_param", "Randomize parameters of the list based on the initializer. Current we only support Uniform and Normal initializer."], [4, 4, 1, 0, "register_idx", "Update sequential according to input operator index information, or report error."], [4, 4, 1, 0, "sort", "Sort the systems in the circuit by their physical indices."], [4, 3, 1, 0, "system_dim", "Dimension of systems in this circuit."], [4, 3, 1, 0, "system_idx", "List of physical indices of systems."], [4, 4, 1, 0, "transfer_static", "set stop_gradient of all parameters of the list as True"], [4, 4, 1, 0, "update_param", "Replace parameters of all/one layer(s) by theta."]], "quairkit.ansatz.container.OperatorList.__init__": [[4, 2, 2, 0, "num_systems", "number of systems in the operator list."], [4, 2, 2, 0, "physical_idx", "physical indices of systems."], [4, 2, 2, 0, "system_dim", "dimension of systems of this list."]], "quairkit.ansatz.container.OperatorList.add_systems": [[4, 2, 2, 0, "new_physical_idx", "physical indices of new systems."], [4, 2, 2, 0, "new_system_dim", "dimension of new systems."], [4, 2, 2, 0, "num_new_systems", "number of new systems to be added."]], "quairkit.ansatz.container.OperatorList.append": [[4, 2, 2, 0, "op", "module to append"]], "quairkit.ansatz.container.OperatorList.extend": [[4, 2, 2, 0, "sequential", "a sequential of operators to be extended"]], "quairkit.ansatz.container.OperatorList.forward": [[4, 2, 2, 0, "state", "initial state."]], "quairkit.ansatz.container.OperatorList.get_qasm": [[4, 2, 2, 0, "transpile", "whether to transpile the circuit to OpenQASM 2.0 format."]], "quairkit.ansatz.container.OperatorList.randomize_param": [[4, 2, 2, 0, "arg0", "first argument of the initializer."], [4, 2, 2, 0, "arg1", "first argument of the initializer."], [4, 2, 2, 0, "method", "The sampling method."]], "quairkit.ansatz.container.OperatorList.register_idx": [[4, 2, 2, 0, "num_acted_system", "number of systems that one operator acts on."], [4, 2, 2, 0, "operator_idx", "input system indices of the operator."]], "quairkit.ansatz.container.OperatorList.update_param": [[4, 2, 2, 0, "idx", "Index of replacement."], [4, 2, 2, 0, "theta", "New parameters"]], "quairkit.ansatz.layer": [[5, 1, 1, 0, "ComplexBlockLayer", "Weakly entangled layers consisting of CNOT gates surrounded by U3 gates"], [5, 1, 1, 0, "ComplexEntangledLayer", "Strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [5, 1, 1, 0, "LinearEntangledLayer", "Linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [5, 1, 1, 0, "RealBlockLayer", "Weakly entangled layers consisting of CNOT gates surrounded by RY gates"], [5, 1, 1, 0, "RealEntangledLayer", "Strongly entangled layers consisting of Ry gates and CNOT gates."], [5, 1, 1, 0, "Universal2", "A circuit layer representing universal two-qubit gates. One of such a layer requires 15 parameters."], [5, 1, 1, 0, "Universal3", "A circuit layer representing universal three-qubit gates. One of such a layer requires 81 parameters."]], "quairkit.ansatz.layer.ComplexBlockLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.ComplexEntangledLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.LinearEntangledLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.RealBlockLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.RealEntangledLayer.__init__": [[5, 2, 2, 0, "depth", "Number of layers."], [5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.Universal2.__init__": [[5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.ansatz.layer.Universal3.__init__": [[5, 2, 2, 0, "param", "Initial parameters for the layer."], [5, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.application.comb": [[8, 0, 0, 1, "comb", ""]], "quairkit.application.comb.comb": [[8, 1, 1, 0, "PQCombNet", "Parameterized Quantum Comb Net."]], "quairkit.application.comb.comb.PQCombNet": [[8, 4, 1, 0, "extract_highest_fidelity", "Call the _extract_highest_fidelity function to generate the fidelity tables. If the file does not exist, prompt the user to set is_save_data to True."], [8, 4, 1, 0, "plot", "Plot the quantum comb circuit."], [8, 4, 1, 0, "train", "Train the PQCombNet model."], [8, 4, 1, 0, "update_V_circuit", "Update the V circuit at the specified index with a new circuit."]], "quairkit.application.comb.comb.PQCombNet.__init__": [[8, 2, 2, 0, "ancilla", "The ancilla dimension or dimension list."], [8, 2, 2, 0, "is_ctrl_U", "Flag to indicate if a controlled-U operation is used in the training process."], [8, 2, 2, 0, "num_slots", "The number of unitaries to be queried."], [8, 2, 2, 0, "seed", "Optional seed for random number generation, enhancing reproducibility."], [8, 2, 2, 0, "slot_dim", "The slot dimension for the unitaries to be queried."], [8, 2, 2, 0, "target_function", "The function to apply to each unitary in the dataset."], [8, 2, 2, 0, "task_name", "Optional name for the task, useful for data logging and storage."], [8, 2, 2, 0, "test_unitary_info", "The number of unitaries or the unitary dataset to be used for testing or the testing unitary set."], [8, 2, 2, 0, "train_mode", "The training mode, which can be \"process\", \"comb\", or \"swap\", default is \"process\"."], [8, 2, 2, 0, "train_unitary_info", "The number of unitaries or the unitary dataset to be used for training or the training unitary set."]], "quairkit.application.comb.comb.PQCombNet.train": [[8, 2, 2, 0, "base_lr", "The base learning rate for the optimizer."], [8, 2, 2, 0, "is_auto_stop", "A flag to indicate whether to stop training early if the learning rate is too low."], [8, 2, 2, 0, "is_save_data", "A flag to indicate whether to save the training data."], [8, 2, 2, 0, "max_epochs", "The maximum number of epochs to train for."], [8, 2, 2, 0, "projector", "The projector to apply to the ancilla system of the output state."]], "quairkit.application.comb.comb.PQCombNet.update_V_circuit": [[8, 2, 2, 0, "index", "The index of the V circuit to update."], [8, 2, 2, 0, "new_V", "The new V circuit, which can be a ParamOracle, Circuit, torch.Tensor or Tuple[torch.Tensor, List[int]]."]], "quairkit.circuit": [[9, 1, 1, 0, "Circuit", "Class for quantum circuit."]], "quairkit.circuit.Circuit": [[9, 4, 1, 0, "amplitude_damping", "Add amplitude damping channels."], [9, 4, 1, 0, "amplitude_encoding", "Prepares an amplitude encoding layer that performs |0\\rangle^{\\otimes n} \\to \\sum_{i=0}^{d-1} x_i |i\\rangle"], [9, 4, 1, 0, "angle_encoding", "Prepares an angle encoding layer that encode angles via rotation gates."], [9, 4, 1, 0, "basis_encoding", "Prepares a basis encoding layer that performs |0\\rangle^{\\otimes n} \\to |x\\rangle"], [9, 4, 1, 0, "bit_flip", "Add bit flip channels."], [9, 4, 1, 0, "bit_phase_flip", "Add bit phase flip channels."], [9, 4, 1, 0, "ccx", "Add CCX (Toffoli) gates."], [9, 4, 1, 0, "choi_channel", "Add custom channels in the Choi representation."], [9, 4, 1, 0, "cnot", "Add CNOT gates."], [9, 4, 1, 0, "complex_block_layer", "Add weakly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [9, 4, 1, 0, "complex_entangled_layer", "Add strongly entangled layers consisting of single-qubit rotation gates and CNOT gates."], [9, 4, 1, 0, "control_oracle", "Add a controlled oracle gate."], [9, 4, 1, 0, "cp", "Add controlled P gates."], [9, 4, 1, 0, "crx", "Add controlled rotation gates about the x-axis."], [9, 4, 1, 0, "cry", "Add controlled rotation gates about the y-axis."], [9, 4, 1, 0, "crz", "Add controlled rotation gates about the z-axis."], [9, 4, 1, 0, "cswap", "Add CSWAP (Fredkin) gates."], [9, 4, 1, 0, "cu", "Add controlled single-qubit rotation gates."], [9, 4, 1, 0, "cy", "Add controlled Y gates."], [9, 4, 1, 0, "cz", "Add controlled Z gates."], [9, 4, 1, 0, "depolarizing", "Add depolarizing channels."], [9, 4, 1, 0, "generalized_amplitude_damping", "Add generalized amplitude damping channels."], [9, 4, 1, 0, "generalized_depolarizing", "Add a general depolarizing channel."], [9, 4, 1, 0, "h", "Add single-qubit Hadamard gates."], [9, 4, 1, 0, "iqp_encoding", "Prepares an instantaneous quantum polynomial (IQP) layer that encode angles via a type of rotation gates."], [9, 4, 1, 0, "kraus_channel", "Add custom channels in the Kraus representation."], [9, 4, 1, 0, "linear_entangled_layer", "Add linear entangled layers consisting of Ry gates, Rz gates, and CNOT gates."], [9, 4, 1, 0, "locc", "Add a one-way LOCC protocol comprised of unitary operations."], [9, 4, 1, 0, "measure", "Perform a measurement on the specified systems."], [9, 4, 1, 0, "ms", "Add M\u00f8lmer-S\u00f8rensen (MS) gates."], [9, 4, 1, 0, "oracle", "Add an oracle gate."], [9, 4, 1, 0, "p", "Add single-qubit P gates."], [9, 4, 1, 0, "param_locc", "Add a one-way LOCC protocol comprised of unitary operations, where the applied unitary is parameterized."], [9, 4, 1, 0, "param_oracle", "Add a parameterized oracle gate."], [9, 4, 1, 0, "param_quasi", "Add a quasi-probability operation, where the applied unitary is parameterized."], [9, 4, 1, 0, "pauli_channel", "Add Pauli channels."], [9, 4, 1, 0, "permute", "Add a permutation gate."], [9, 4, 1, 0, "phase_damping", "Add phase damping channels."], [9, 4, 1, 0, "phase_flip", "Add phase flip channels."], [9, 4, 1, 0, "plot", "Display the circuit using Quantikz if latex is True, otherwise using matplotlib."], [9, 3, 1, 0, "qasm", "String representation of the circuit in qasm-like format."], [9, 3, 1, 0, "qasm2", "Transpile the circuit in OpenQASM 2.0 format."], [9, 4, 1, 0, "quasi", "Add a quasi-probability operation, now only supports unitary operations."], [9, 4, 1, 0, "real_block_layer", "Add weakly entangled layers consisting of Ry gates and CNOT gates."], [9, 4, 1, 0, "real_entangled_layer", "Add strongly entangled layers consisting of Ry gates and CNOT gates."], [9, 4, 1, 0, "reset", "Reset the state of the specified systems to a given state."], [9, 4, 1, 0, "reset_channel", "Add reset channels."], [9, 4, 1, 0, "rx", "Add single-qubit rotation gates about the x-axis."], [9, 4, 1, 0, "rxx", "Add RXX gates."], [9, 4, 1, 0, "ry", "Add single-qubit rotation gates about the y-axis."], [9, 4, 1, 0, "ryy", "Add RYY gates."], [9, 4, 1, 0, "rz", "Add single-qubit rotation gates about the z-axis."], [9, 4, 1, 0, "rzz", "Add RZZ gates."], [9, 4, 1, 0, "s", "Add single-qubit S gates."], [9, 4, 1, 0, "sdg", "Add single-qubit S dagger (S inverse) gates."], [9, 4, 1, 0, "stinespring_channel", "Add custom channels in the Stinespring representation."], [9, 4, 1, 0, "swap", "Add SWAP gates."], [9, 4, 1, 0, "t", "Add single-qubit T gates."], [9, 4, 1, 0, "tdg", "Add single-qubit T dagger (T inverse) gates."], [9, 4, 1, 0, "thermal_relaxation", "Add thermal relaxation channels."], [9, 4, 1, 0, "to_latex", "The LaTeX representation of the circuit, written in Quantikz format."], [9, 4, 1, 0, "trotter", "Add Trotter decompositions of a Hamiltonian evolution operator."], [9, 4, 1, 0, "u3", "Add single-qubit rotation gates."], [9, 4, 1, 0, "unitary_matrix", "Get the unitary matrix form of the circuit."], [9, 4, 1, 0, "universal_qudits", "Add universal qudit gates. One such gate requires d^2 - 1 parameters, where d is the gate dimension."], [9, 4, 1, 0, "universal_three_qubits", "Add universal three-qubit gates. One such gate requires 81 parameters."], [9, 4, 1, 0, "universal_two_qubits", "Add universal two-qubit gates. One such gate requires 15 parameters."], [9, 4, 1, 0, "x", "Add single-qubit X gates."], [9, 4, 1, 0, "y", "Add single-qubit Y gates."], [9, 4, 1, 0, "z", "Add single-qubit Z gates."]], "quairkit.circuit.Circuit.__init__": [[9, 2, 2, 0, "num_systems", "number of systems in the circuit."], [9, 2, 2, 0, "physical_idx", "physical indices of systems."], [9, 2, 2, 0, "system_dim", "dimension of systems of this circuit."]], "quairkit.circuit.Circuit.amplitude_damping": [[9, 2, 2, 0, "gamma", "Damping probability."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the damping on."]], "quairkit.circuit.Circuit.amplitude_encoding": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the encoding is applied."], [9, 2, 2, 0, "vector", "Input normalized vector to be encoded."]], "quairkit.circuit.Circuit.angle_encoding": [[9, 2, 2, 0, "angles", "Input vector of angles."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the encoding is applied."], [9, 2, 2, 0, "rotation", "Type of rotation gate ('RY', 'RZ', or 'RX')."]], "quairkit.circuit.Circuit.basis_encoding": [[9, 2, 2, 0, "number", "the integer to be encoded."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."]], "quairkit.circuit.Circuit.bit_flip": [[9, 2, 2, 0, "prob", "Probability of a bit flip."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.bit_phase_flip": [[9, 2, 2, 0, "prob", "Probability of a bit phase flip."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.ccx": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.choi_channel": [[9, 2, 2, 0, "choi_repr", "Choi representation."], [9, 2, 2, 0, "system_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.cnot": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.complex_block_layer": [[9, 2, 2, 0, "depth", "Number of layers."], [9, 2, 2, 0, "param", "Layer parameters."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.complex_entangled_layer": [[9, 2, 2, 0, "depth", "Number of layers."], [9, 2, 2, 0, "param", "Layer parameters."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.control_oracle": [[9, 2, 2, 0, "control_idx", "the index that controls the oracle."], [9, 2, 2, 0, "gate_name", "name of the oracle."], [9, 2, 2, 0, "latex_name", "LaTeX name of the gate."], [9, 2, 2, 0, "oracle", "Unitary oracle."], [9, 2, 2, 0, "system_idx", "Indices of the systems on which the gate is applied."]], "quairkit.circuit.Circuit.cp": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crx": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cry": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.crz": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cswap": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cu": [[9, 2, 2, 0, "param", "Parameters of the gate."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cy": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.cz": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.depolarizing": [[9, 2, 2, 0, "prob", "Depolarizing probability."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.generalized_amplitude_damping": [[9, 2, 2, 0, "gamma", "Damping probability."], [9, 2, 2, 0, "prob", "Excitation probability."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.generalized_depolarizing": [[9, 2, 2, 0, "prob", "Probabilities for the Pauli basis."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.h": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.iqp_encoding": [[9, 2, 2, 0, "depth", "Number of depth."], [9, 2, 2, 0, "features", "Input vector for encoding."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the encoding is applied."], [9, 2, 2, 0, "set_entanglement", "the set containing all pairs of qubits to be entangled using RZZ gates"]], "quairkit.circuit.Circuit.kraus_channel": [[9, 2, 2, 0, "kraus_oper", "Kraus operators."], [9, 2, 2, 0, "system_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.linear_entangled_layer": [[9, 2, 2, 0, "depth", "Number of layers."], [9, 2, 2, 0, "param", "Parameters for the layer."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.locc": [[9, 2, 2, 0, "label", "Label for measurement."], [9, 2, 2, 0, "latex_name", "LaTeX name for the applied operator."], [9, 2, 2, 0, "local_unitary", "The local unitary operation."], [9, 2, 2, 0, "system_idx", "Systems on which the protocol is applied."]], "quairkit.circuit.Circuit.measure": [[9, 2, 2, 0, "if_print", "Whether to print collapse info."], [9, 2, 2, 0, "measure_basis", "Measurement basis."], [9, 2, 2, 0, "post_selection", "The post-selection result."], [9, 2, 2, 0, "system_idx", "Systems to measure."]], "quairkit.circuit.Circuit.ms": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.oracle": [[9, 2, 2, 0, "control_idx", "the index that controls the oracle."], [9, 2, 2, 0, "gate_name", "name of the oracle."], [9, 2, 2, 0, "latex_name", "LaTeX name of the gate."], [9, 2, 2, 0, "oracle", "Unitary oracle."], [9, 2, 2, 0, "system_idx", "Indices of the systems on which the gate is applied."]], "quairkit.circuit.Circuit.p": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.param_locc": [[9, 2, 2, 0, "generator", "Function to generate the oracle."], [9, 2, 2, 0, "label", "Label for measurement."], [9, 2, 2, 0, "latex_name", "LaTeX name for the applied operator."], [9, 2, 2, 0, "num_acted_param", "Number of parameters required for a single application."], [9, 2, 2, 0, "param", "Input parameters for the gate."], [9, 2, 2, 0, "support_batch", "Whether generator supports batched input."], [9, 2, 2, 0, "system_idx", "Systems on which the protocol is applied."]], "quairkit.circuit.Circuit.param_oracle": [[9, 2, 2, 0, "control_idx", "The index that controls the oracle."], [9, 2, 2, 0, "gate_name", "Name of the oracle."], [9, 2, 2, 0, "generator", "Function to generate the oracle."], [9, 2, 2, 0, "latex_name", "LaTeX name of the gate."], [9, 2, 2, 0, "num_acted_param", "Number of parameters required for a single application."], [9, 2, 2, 0, "param", "Input parameters for the gate."], [9, 2, 2, 0, "support_batch", "Whether generator supports batched input."], [9, 2, 2, 0, "system_idx", "Indices of the systems on which the gate acts."]], "quairkit.circuit.Circuit.param_quasi": [[9, 2, 2, 0, "generator", "Function to generate the oracle."], [9, 2, 2, 0, "latex_name", "LaTeX name for the applied operation."], [9, 2, 2, 0, "num_acted_param", "Number of parameters required for a single application."], [9, 2, 2, 0, "param", "Input parameters for the gate."], [9, 2, 2, 0, "probability", "(quasi-)probability distribution for applying unitary operations."], [9, 2, 2, 0, "probability_param", "Whether the probability is parameterized."], [9, 2, 2, 0, "support_batch", "Whether generator supports batched input."], [9, 2, 2, 0, "system_idx", "Systems on which the operation is applied."]], "quairkit.circuit.Circuit.pauli_channel": [[9, 2, 2, 0, "prob", "Probabilities for the Pauli X, Y, and Z operators."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.permute": [[9, 2, 2, 0, "control_idx", "the index that controls the permutation."], [9, 2, 2, 0, "perm", "A list representing the permutation of subsystems."], [9, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.phase_damping": [[9, 2, 2, 0, "gamma", "Phase damping parameter."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.phase_flip": [[9, 2, 2, 0, "prob", "Probability of a phase flip."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.plot": [[9, 2, 2, 0, "decimal", "number of decimal places to display."], [9, 2, 2, 0, "dpi", "dots per inches of plot image."], [9, 2, 2, 0, "include_empty", "whether include empty lines, default to False."], [9, 2, 2, 0, "kwargs", "additional parameters for matplotlib plot."], [9, 2, 2, 0, "latex", "whether use Quantikz, a LaTeX package, to plot circuits , default to True."], [9, 2, 2, 0, "print_code", "whether print the LaTeX code of the circuit, default to False."], [9, 2, 2, 0, "show_plot", "whether show the plotted circuit, default to True."], [9, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.circuit.Circuit.quasi": [[9, 2, 2, 0, "latex_name", "LaTeX name for the applied operation."], [9, 2, 2, 0, "list_unitary", "list of unitary operations, each of which corresponds to a probability outcome."], [9, 2, 2, 0, "probability", "(quasi-)probability distribution for applying unitary operations."], [9, 2, 2, 0, "system_idx", "Systems on which the operation is applied."]], "quairkit.circuit.Circuit.real_block_layer": [[9, 2, 2, 0, "depth", "Number of layers."], [9, 2, 2, 0, "param", "Layer parameters."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.real_entangled_layer": [[9, 2, 2, 0, "depth", "Number of layers."], [9, 2, 2, 0, "param", "Layer parameters."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the layer on."]], "quairkit.circuit.Circuit.reset": [[9, 2, 2, 0, "replace_state", "the state to replace the quantum state."], [9, 2, 2, 0, "state_label", "LaTeX label of the reset state, used for printing."], [9, 2, 2, 0, "system_idx", "list of systems to be reset."]], "quairkit.circuit.Circuit.reset_channel": [[9, 2, 2, 0, "prob", "Probabilities for resetting to the basis states."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.rx": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rxx": [[9, 2, 2, 0, "param", "Parameters of the gate."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ry": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.ryy": [[9, 2, 2, 0, "param", "Parameters of the gate."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rz": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.rzz": [[9, 2, 2, 0, "param", "Parameters of the gate."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.s": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.sdg": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.stinespring_channel": [[9, 2, 2, 0, "stinespring_repr", "Stinespring representation."], [9, 2, 2, 0, "system_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.swap": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.t": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.tdg": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.thermal_relaxation": [[9, 2, 2, 0, "const_t", "The T1 and T2 relaxation times."], [9, 2, 2, 0, "exec_time", "Gate execution time."], [9, 2, 2, 0, "qubits_idx", "Systems to apply the channel on."]], "quairkit.circuit.Circuit.to_latex": [[9, 2, 2, 0, "decimal", "number of decimal places to display."], [9, 2, 2, 0, "style", "the style of the plot, can be 'standard', 'compact' or 'detailed'."]], "quairkit.circuit.Circuit.trotter": [[9, 2, 2, 0, "hamiltonian", "Hamiltonian of the system whose time evolution is to be simulated."], [9, 2, 2, 0, "name", "Name of the Hamiltonian."], [9, 2, 2, 0, "num_steps", "Number of trotter blocks."], [9, 2, 2, 0, "order", "Order of the Trotter-Suzuki decomposition."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the layer is applied."], [9, 2, 2, 0, "time", "Total evolution time."]], "quairkit.circuit.Circuit.u3": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_qudits": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [9, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.circuit.Circuit.universal_three_qubits": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.universal_two_qubits": [[9, 2, 2, 0, "param", "Parameters of the gates."], [9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.x": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.y": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.circuit.Circuit.z": [[9, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.core": [[11, 0, 0, 1, "base", ""], [12, 0, 0, 1, "hamiltonian", ""]], "quairkit.core.base": [[11, 5, 1, 0, "get_device", "Get the current device to save the tensor."], [11, 5, 1, 0, "get_dtype", "Return currently used data type."], [11, 5, 1, 0, "get_float_dtype", "Return currently used float data type."], [11, 5, 1, 0, "get_seed", "Get the currently used seed of QuAIRKit."], [11, 5, 1, 0, "set_device", "Set the classical device to save the tensor."], [11, 5, 1, 0, "set_dtype", "Set the data type ."], [11, 5, 1, 0, "set_seed", "Set the global seed of QuAIRKit."]], "quairkit.core.base.set_device": [[11, 2, 2, 0, "device", "The name of the device."]], "quairkit.core.base.set_dtype": [[11, 2, 2, 0, "dtype", "The dtype can be complex64 and complex128."]], "quairkit.core.base.set_seed": [[11, 2, 2, 0, "seed", "the random seed used in QuAIRKit."]], "quairkit.core.hamiltonian": [[12, 1, 1, 0, "Hamiltonian", "Hamiltonian class in QuAIRKit."], [12, 1, 1, 0, "SpinOps", "The spin operators in matrix forms, could be used to construct Hamiltonian matrix or spin observables."]], "quairkit.core.hamiltonian.Hamiltonian": [[12, 3, 1, 0, "coefficients", "The coefficient of each term in the Hamiltonian, i.e. [1.0, 2.0]."], [12, 4, 1, 0, "construct_h_matrix", "Construct a matrix form of the Hamiltonian in Z-basis."], [12, 4, 1, 0, "decompose_pauli_words", "Decompose pauli_str into coefficients and Pauli strings."], [12, 4, 1, 0, "decompose_with_sites", "Decompose pauli_str into coefficients, a simplified form of Pauli strings, and the indices of qubits on which the Pauli operators act on."], [12, 3, 1, 0, "matrix", "The matrix form of the Hamiltonian."], [12, 3, 1, 0, "n_qubits", "Number of qubits."], [12, 3, 1, 0, "n_terms", "Number of terms of the hamiltonian."], [12, 3, 1, 0, "pauli_str", "The Pauli string corresponding to the hamiltonian."], [12, 3, 1, 0, "pauli_words", "The Pauli word of each term, i.e. ['ZIZ', 'IIX']."], [12, 3, 1, 0, "pauli_words_matrix", "The list of matrices with respect to simplied Pauli words."], [12, 3, 1, 0, "pauli_words_r", "A list of Pauli word (exclude I), i.e. ['ZXZZ', 'Z', 'X']."], [12, 3, 1, 0, "sites", "A list of qubits index corresponding to the hamiltonian."], [12, 3, 1, 0, "terms", "All items in hamiltonian, i.e. [['Z0, Z1'], ['I']]."]], "quairkit.core.hamiltonian.Hamiltonian.__init__": [[12, 2, 2, 0, "compress", "Determines whether the input list will be automatically merged (e.g."], [12, 2, 2, 0, "pauli_str", "A list of Hamiltonian information, e.g."]], "quairkit.core.hamiltonian.Hamiltonian.construct_h_matrix": [[12, 2, 2, 0, "qubit_num", "The number of qubits."]], "quairkit.core.hamiltonian.SpinOps": [[12, 3, 1, 0, "sigx_p", "A list of S^x_i operators, different elements correspond to different indices i."], [12, 3, 1, 0, "sigy_p", "A list of S^y_i operators, different elements correspond to different indices i."], [12, 3, 1, 0, "sigz_p", "A list of S^z_i operators, different elements correspond to different indices i."]], "quairkit.core.hamiltonian.SpinOps.__init__": [[12, 2, 2, 0, "size", "Size of the system (number of qubits)."], [12, 2, 2, 0, "use_sparse", "Decide whether to use the sparse matrix to calculate."]], "quairkit.core.state": [[17, 0, 0, 1, "state", ""]], "quairkit.core.state.state": [[17, 5, 1, 0, "tensor_state", "calculate tensor product (kronecker product) between at least two state. This function automatically returns State instance"], [17, 5, 1, 0, "to_state", "The function to generate a specified state instance."]], "quairkit.core.state.state.tensor_state": [[17, 2, 2, 0, "args", "other states"], [17, 2, 2, 0, "state_1st", "the first state"]], "quairkit.core.state.state.to_state": [[17, 2, 2, 0, "backend", "The name of the backend to use."], [17, 2, 2, 0, "data", "a representation of the quantum state in allowable backend, or an instance of the State class."], [17, 2, 2, 0, "eps", "The tolerance for checking the validity of the input state."], [17, 2, 2, 0, "prob", "The (list of) probability distribution of the state."], [17, 2, 2, 0, "system_dim", "(list of) dimension(s) of the systems, can be a list of integers or an integer. For example, system_dim = 2 means the systems are qubits (default setup); system_dim = [2, 3] means the first system is a qubit and the second is a qutrit."]], "quairkit.database": [[20, 0, 0, 1, "hamiltonian", ""], [21, 0, 0, 1, "matrix", ""], [22, 0, 0, 1, "random", ""], [23, 0, 0, 1, "representation", ""], [24, 0, 0, 1, "set", ""], [25, 0, 0, 1, "state", ""]], "quairkit.database.hamiltonian": [[20, 5, 1, 0, "heisenberg_hamiltonian", "Compute the Heisenberg Hamiltonian."], [20, 5, 1, 0, "ising_hamiltonian", "Compute the Ising Hamiltonian."], [20, 5, 1, 0, "xy_hamiltonian", "Compute the XY Hamiltonian."]], "quairkit.database.hamiltonian.heisenberg_hamiltonian": [[20, 2, 2, 0, "edges", "A tensor E shape=[3, V, V], where E[0][u][v] is alpha_{uv}, E[1][u][v] is beta_{uv}, and E[2][u][v] is gamma_{uv}."]], "quairkit.database.hamiltonian.ising_hamiltonian": [[20, 2, 2, 0, "edges", "A tensor E shape=[V, V], where E[u][v] is gamma_{uv}."], [20, 2, 2, 0, "vertices", "A tensor V shape=[V], where V[k] is beta_{k}."]], "quairkit.database.hamiltonian.xy_hamiltonian": [[20, 2, 2, 0, "edges", "A tensor E shape=[2, V, V], where E[0][u][v] is alpha_{uv} and E[1][u][v] is beta_{uv}."]], "quairkit.database.matrix": [[21, 5, 1, 0, "Of", "Construct the oracle unitary matrix for an unstructured search problem."], [21, 5, 1, 0, "Of_gate", "Construct the oracle unitary matrix for an unstructured search problem."], [21, 5, 1, 0, "Uf", "Construct the unitary matrix used in Simon's algorithm."], [21, 5, 1, 0, "Uf_gate", "Construct the unitary matrix used in Simon's algorithm."], [21, 5, 1, 0, "ccx", "Generate the Toffoli gate matrix."], [21, 5, 1, 0, "ccx_gate", "Generate the Toffoli gate matrix."], [21, 5, 1, 0, "cnot", "Generate the CNOT gate matrix."], [21, 5, 1, 0, "cnot_gate", "Generate the CNOT gate matrix."], [21, 5, 1, 0, "cp", "Generate the CP gate matrix."], [21, 5, 1, 0, "cp_gate", "Generate the CP gate matrix."], [21, 5, 1, 0, "crx", "Generate the CR_X gate matrix."], [21, 5, 1, 0, "crx_gate", "Generate the CR_X gate matrix."], [21, 5, 1, 0, "cry", "Generate the CR_Y gate matrix."], [21, 5, 1, 0, "cry_gate", "Generate the CR_Y gate matrix."], [21, 5, 1, 0, "crz", "Generate the CR_Z gate matrix."], [21, 5, 1, 0, "crz_gate", "Generate the CR_Z gate matrix."], [21, 5, 1, 0, "cswap", "Generate the CSWAP gate matrix."], [21, 5, 1, 0, "cswap_gate", "Generate the CSWAP gate matrix."], [21, 5, 1, 0, "cu", "Generate the CU gate matrix."], [21, 5, 1, 0, "cu_gate", "Generate the CU gate matrix."], [21, 5, 1, 0, "cy", "Generate the CY gate matrix."], [21, 5, 1, 0, "cy_gate", "Generate the CY gate matrix."], [21, 5, 1, 0, "cz", "Generate the CZ gate matrix."], [21, 5, 1, 0, "cz_gate", "Generate the CZ gate matrix."], [21, 5, 1, 0, "eye", "Generate the identity matrix."], [21, 5, 1, 0, "eye_gate", "Generate the identity matrix."], [21, 5, 1, 0, "grover_matrix", "Construct the Grover operator based on oracle."], [21, 5, 1, 0, "h", "Generate the matrix of the Hadamard gate."], [21, 5, 1, 0, "h_gate", "Generate the matrix of the Hadamard gate."], [21, 5, 1, 0, "ms", "Generate the MS gate matrix."], [21, 5, 1, 0, "ms_gate", "Generate the MS gate matrix."], [21, 5, 1, 0, "p", "Generate the P gate matrix."], [21, 5, 1, 0, "p_gate", "Generate the P gate matrix."], [21, 5, 1, 0, "permutation_matrix", "Construct a unitary matrix representing a permutation operation on a quantum system."], [21, 5, 1, 0, "phase", "Generate phase operator for qudit"], [21, 5, 1, 0, "phase_gate", "Generate phase operator for qudit"], [21, 5, 1, 0, "qft_matrix", "Construct the quantum Fourier transpose (QFT) gate."], [21, 5, 1, 0, "rx", "Generate the RX gate matrix."], [21, 5, 1, 0, "rx_gate", "Generate the RX gate matrix."], [21, 5, 1, 0, "rxx", "Generate the RXX gate matrix."], [21, 5, 1, 0, "rxx_gate", "Generate the RXX gate matrix."], [21, 5, 1, 0, "ry", "Generate the RY gate matrix."], [21, 5, 1, 0, "ry_gate", "Generate the RY gate matrix."], [21, 5, 1, 0, "ryy", "Generate the RYY gate matrix."], [21, 5, 1, 0, "ryy_gate", "Generate the RYY gate matrix."], [21, 5, 1, 0, "rz", "Generate the RZ gate matrix."], [21, 5, 1, 0, "rz_gate", "Generate the RZ gate matrix."], [21, 5, 1, 0, "rzz", "Generate the RZZ gate matrix."], [21, 5, 1, 0, "rzz_gate", "Generate the RZZ gate matrix."], [21, 5, 1, 0, "s", "Generate the matrix of the S gate."], [21, 5, 1, 0, "s_gate", "Generate the matrix of the S gate."], [21, 5, 1, 0, "sdg", "Generate the matrix of the Sdg (S-dagger) gate."], [21, 5, 1, 0, "sdg_gate", "Generate the matrix of the Sdg (S-dagger) gate."], [21, 5, 1, 0, "shift", "Generate shift operator for qudit"], [21, 5, 1, 0, "shift_gate", "Generate shift operator for qudit"], [21, 5, 1, 0, "swap", "Generate the SWAP gate matrix."], [21, 5, 1, 0, "swap_gate", "Generate the SWAP gate matrix."], [21, 5, 1, 0, "t", "Generate the matrix of the T gate."], [21, 5, 1, 0, "t_gate", "Generate the matrix of the T gate."], [21, 5, 1, 0, "tdg", "Generate the matrix of the Tdg (T-dagger) gate."], [21, 5, 1, 0, "tdg_gate", "Generate the matrix of the Tdg (T-dagger) gate."], [21, 5, 1, 0, "toffoli", "Generate the Toffoli gate matrix."], [21, 5, 1, 0, "toffoli_gate", "Generate the Toffoli gate matrix."], [21, 5, 1, 0, "u3", "Generate the U3 gate matrix."], [21, 5, 1, 0, "u3_gate", "Generate the U3 gate matrix."], [21, 5, 1, 0, "universal2", "Generate the universal two-qubit gate matrix."], [21, 5, 1, 0, "universal2_gate", "Generate the universal two-qubit gate matrix."], [21, 5, 1, 0, "universal3", "Generate the universal three-qubit gate matrix."], [21, 5, 1, 0, "universal3_gate", "Generate the universal three-qubit gate matrix."], [21, 5, 1, 0, "universal_qudit", "Generate a universal gate matrix for qudits using a generalized Gell-Mann basis."], [21, 5, 1, 0, "x", "Generate the Pauli X matrix."], [21, 5, 1, 0, "x_gate", "Generate the Pauli X matrix."], [21, 5, 1, 0, "y", "Generate the Pauli Y matrix."], [21, 5, 1, 0, "y_gate", "Generate the Pauli Y matrix."], [21, 5, 1, 0, "z", "Generate the Pauli Z matrix."], [21, 5, 1, 0, "z_gate", "Generate the Pauli Z matrix."]], "quairkit.database.matrix.Of": [[21, 2, 2, 0, "f", "a function f: \\{0, 1\\}^n \\to \\{0, 1\\}."], [21, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.Of_gate": [[21, 2, 2, 0, "f", "a function f: \\{0, 1\\}^n \\to \\{0, 1\\}."], [21, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.Uf": [[21, 2, 2, 0, "f", "a 2-to-1 or 1-to-1 function f: \\{0, 1\\}^n \\to \\{0, 1\\}^n."], [21, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.Uf_gate": [[21, 2, 2, 0, "f", "a 2-to-1 or 1-to-1 function f: \\{0, 1\\}^n \\to \\{0, 1\\}^n."], [21, 2, 2, 0, "n", "length of the bit string."]], "quairkit.database.matrix.cp": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cp_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crx": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crx_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cry": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cry_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crz": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.crz_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.cu": [[21, 2, 2, 0, "theta", "the (batched) parameters, with shape [4, 1]."]], "quairkit.database.matrix.cu_gate": [[21, 2, 2, 0, "theta", "the (batched) parameters, with shape [4, 1]."]], "quairkit.database.matrix.eye": [[21, 2, 2, 0, "dim", "the dimension of the identity matrix (default is 2 for a qubit)."]], "quairkit.database.matrix.eye_gate": [[21, 2, 2, 0, "dim", "the dimension of the identity matrix (default is 2 for a qubit)."]], "quairkit.database.matrix.grover_matrix": [[21, 2, 2, "quairkit.database.matrix.grover_matrix", "dtype", "Construct the Grover operator based on oracle."], [21, 2, 2, 0, "oracle", "the input oracle A to be rotated."]], "quairkit.database.matrix.p": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.p_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.permutation_matrix": [[21, 2, 2, 0, "perm", "A list representing the permutation of subsystems. For example, [1, 0, 2] swaps the first two subsystems."], [21, 2, 2, 0, "system_dim", "The dimension of each subsystem. - If an integer, all subsystems are assumed to have the same dimension. - If a list, it specifies the dimension of each subsystem individually."]], "quairkit.database.matrix.phase": [[21, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.phase_gate": [[21, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.qft_matrix": [[21, 2, 2, 0, "num_qubits", "number of qubits n st."]], "quairkit.database.matrix.rx": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rx_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rxx": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rxx_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ry": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ry_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ryy": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.ryy_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rz": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rz_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rzz": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.rzz_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter, with shape [1]."]], "quairkit.database.matrix.shift": [[21, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.shift_gate": [[21, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.matrix.u3": [[21, 2, 2, 0, "theta", "the (batched) parameters, with shape [3, 1]."]], "quairkit.database.matrix.u3_gate": [[21, 2, 2, 0, "theta", "the (batched) parameters, with shape [3, 1]."]], "quairkit.database.matrix.universal2": [[21, 2, 2, 0, "theta", "the (batched) parameter with shape [15]."]], "quairkit.database.matrix.universal2_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter with shape [15]."]], "quairkit.database.matrix.universal3": [[21, 2, 2, 0, "theta", "the (batched) parameter with shape [81]."]], "quairkit.database.matrix.universal3_gate": [[21, 2, 2, 0, "theta", "the (batched) parameter with shape [81]."]], "quairkit.database.matrix.universal_qudit": [[21, 2, 2, 0, "dimension", "the dimension of the qudit."], [21, 2, 2, 0, "theta", "the (batched) parameter with shape [dimension**2 - 1]."]], "quairkit.database.random": [[22, 5, 1, 0, "haar_density_operator", "Randomly generate a density matrix following Haar measure."], [22, 5, 1, 0, "haar_orthogonal", "Randomly generate an orthogonal matrix following Haar measure, referenced by arXiv:math-ph/0609050v2."], [22, 5, 1, 0, "haar_state_vector", "Randomly generate a state vector following Haar measure."], [22, 5, 1, 0, "haar_unitary", "Randomly generate a unitary following Haar measure, referenced by arXiv:math-ph/0609050v2."], [22, 5, 1, 0, "random_channel", "Generate a random channel from its Stinespring representation."], [22, 5, 1, 0, "random_clifford", "Generate a random Clifford unitary."], [22, 5, 1, 0, "random_density_matrix", "Randomly generate an num_qubits-qubit state in density matrix form."], [22, 5, 1, 0, "random_hamiltonian_generator", "Generate a random Hamiltonian."], [22, 5, 1, 0, "random_hermitian", "Randomly generate a normalized 2^n \\times 2^n Hermitian matrix."], [22, 5, 1, 0, "random_lcu", "Randomly generate a unitary that can creates a linear combination of random unitaries. The number of unitaries is at least 2, and at most the dimension of the total control system."], [22, 5, 1, 0, "random_orthogonal_projection", "Randomly generate a d \\times d orthogonal projector."], [22, 5, 1, 0, "random_pauli_str_generator", "Generate a random observable in list form."], [22, 5, 1, 0, "random_projector", "Randomly generate a d \\times d orthogonal projector."], [22, 5, 1, 0, "random_state", "Generate a random quantum state."], [22, 5, 1, 0, "random_unitary", "Randomly generate a d \\times d unitary."], [22, 5, 1, 0, "random_unitary_hermitian", "Randomly generate a 2^n \\times 2^n Hermitian unitary."], [22, 5, 1, 0, "random_unitary_with_hermitian_block", "Randomly generate a unitary 2^n \\times 2^n matrix that is a block encoding of a 2^{n/2} \\times 2^{n/2} Hermitian matrix."]], "quairkit.database.random.haar_density_operator": [[22, 2, 2, 0, "dim", "Dimension of the density matrix."], [22, 2, 2, 0, "is_real", "Whether the density matrix is real."], [22, 2, 2, 0, "rank", "Rank of the density matrix."]], "quairkit.database.random.haar_orthogonal": [[22, 2, 2, 0, "dim", "Dimension of the orthogonal matrix."]], "quairkit.database.random.haar_state_vector": [[22, 2, 2, 0, "dim", "Dimension of the state vector."], [22, 2, 2, 0, "is_real", "Whether the vector is real."]], "quairkit.database.random.haar_unitary": [[22, 2, 2, 0, "dim", "Dimension of the unitary."]], "quairkit.database.random.random_channel": [[22, 2, 2, 0, "num_systems", "Number of systems."], [22, 2, 2, 0, "rank", "Rank of this channel."], [22, 2, 2, 0, "size", "Batch size."], [22, 2, 2, 0, "system_dim", "Dimension of systems."], [22, 2, 2, 0, "target", "Target representation; should be 'choi', 'kraus' or 'stinespring'."]], "quairkit.database.random.random_clifford": [[22, 2, 2, 0, "num_qubits", "The number of qubits (n)."]], "quairkit.database.random.random_density_matrix": [[22, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random.random_hamiltonian_generator": [[22, 2, 2, 0, "num_qubits", "Number of qubits."], [22, 2, 2, 0, "terms", "Number of terms in the Hamiltonian."]], "quairkit.database.random.random_hermitian": [[22, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random.random_lcu": [[22, 2, 2, 0, "num_ctrl_systems", "Number of control systems."], [22, 2, 2, 0, "num_systems", "Number of systems n."], [22, 2, 2, 0, "system_dim", "Dimension of all systems."]], "quairkit.database.random.random_orthogonal_projection": [[22, 2, 2, 0, "num_systems", "Number of systems."], [22, 2, 2, 0, "size", "Number of projectors."], [22, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_pauli_str_generator": [[22, 2, 2, 0, "num_qubits", "Number of qubits."], [22, 2, 2, 0, "terms", "Number of terms in the observable."]], "quairkit.database.random.random_projector": [[22, 2, 2, 0, "num_systems", "Number of systems."], [22, 2, 2, 0, "size", "Number of projectors."], [22, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_state": [[22, 2, 2, 0, "is_real", "If the quantum state only contains real numbers."], [22, 2, 2, 0, "num_systems", "The number of qubits contained in the quantum state."], [22, 2, 2, 0, "rank", "The rank of the density matrix."], [22, 2, 2, 0, "size", "Batch size."], [22, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_unitary": [[22, 2, 2, 0, "num_systems", "Number of systems in this unitary (alias of num_qubits)."], [22, 2, 2, 0, "size", "Batch size."], [22, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.random.random_unitary_hermitian": [[22, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.random.random_unitary_with_hermitian_block": [[22, 2, 2, 0, "is_unitary", "Whether the Hermitian block is a unitary divided by 2 (for tutorial only)."], [22, 2, 2, 0, "num_qubits", "Number of qubits n."]], "quairkit.database.representation": [[23, 5, 1, 0, "amplitude_damping_kraus", "Kraus representation of an amplitude damping channel with form"], [23, 5, 1, 0, "bit_flip_kraus", "Kraus representation of a bit flip channel with form"], [23, 5, 1, 0, "bit_phase_flip_kraus", "Kraus representation of a bit-phase flip channel with form"], [23, 5, 1, 0, "depolarizing_kraus", "Kraus representation of a depolarizing channel with form"], [23, 5, 1, 0, "generalized_amplitude_damping_kraus", "Kraus representation of a generalized amplitude damping channel with form"], [23, 5, 1, 0, "generalized_depolarizing_kraus", "Kraus representation of a generalized depolarizing channel with form"], [23, 5, 1, 0, "pauli_kraus", "Kraus representation of a pauli channel"], [23, 5, 1, 0, "phase_damping_kraus", "Kraus representation of a phase damping channel with form"], [23, 5, 1, 0, "phase_flip_kraus", "Kraus representation of a phase flip channel with form"], [23, 5, 1, 0, "replacement_choi", "Choi representation of a replacement channel"], [23, 5, 1, 0, "reset_kraus", "Kraus representation of a reset channel with form"], [23, 5, 1, 0, "thermal_relaxation_kraus", "Kraus representation of a thermal relaxation channel"]], "quairkit.database.representation.amplitude_damping_kraus": [[23, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.bit_flip_kraus": [[23, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.bit_phase_flip_kraus": [[23, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.depolarizing_kraus": [[23, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_amplitude_damping_kraus": [[23, 2, 2, 0, "gamma", "coefficient \\gamma."], [23, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.generalized_depolarizing_kraus": [[23, 2, 2, 0, "num_qubits", "number of qubits n of this channel."], [23, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.pauli_kraus": [[23, 2, 2, 0, "prob", "a list of three probabilities corresponding to X, Y, Z gate p."]], "quairkit.database.representation.phase_damping_kraus": [[23, 2, 2, 0, "gamma", "coefficient \\gamma."]], "quairkit.database.representation.phase_flip_kraus": [[23, 2, 2, 0, "prob", "probability p."]], "quairkit.database.representation.replacement_choi": [[23, 2, 2, 0, "sigma", "output state of this channel."]], "quairkit.database.representation.reset_kraus": [[23, 2, 2, 0, "prob", "list of two probabilities of resetting to state |0\\rangle and |1\\rangle."]], "quairkit.database.representation.thermal_relaxation_kraus": [[23, 2, 2, 0, "const_t", "list of T_1 and T_2 relaxation time in microseconds."], [23, 2, 2, 0, "exec_time", "quantum gate execution time in the process of relaxation in nanoseconds."]], "quairkit.database.set": [[24, 5, 1, 0, "bell_basis", "Generate the Bell basis for a 2-qubit system, with each basis state accessible along the first dimension of a tensor."], [24, 5, 1, 0, "gell_mann", "Generate a set of Gell-Mann matrices for a given dimension. These matrices span the entire space of dim-by-dim matrices, and they generalize the Pauli operators when dim = 2 and the Gell-Mann operators when dim = 3."], [24, 5, 1, 0, "heisenberg_weyl", "Generate Heisenberg-Weyl operator for qudit. The Heisenberg-Weyl operators are defined as T(a,b) = e^{-(d+1) \\pi i a b/ d}Z^a X^b."], [24, 5, 1, 0, "pauli_basis", "Generate a Pauli basis."], [24, 5, 1, 0, "pauli_group", "Generate a Pauli group i.e., an unnormalized Pauli basis."], [24, 5, 1, 0, "pauli_str_basis", "Get the state basis with respect to the Pauli string."], [24, 5, 1, 0, "pauli_str_povm", "Get the povm with respect to the Pauli string."], [24, 5, 1, 0, "phase_space_point", "Generate phase space point operator for qudit."], [24, 5, 1, 0, "qft_basis", "Compute the eigenvectors (eigenbasis) of the Quantum Fourier Transform (QFT) matrix."], [24, 5, 1, 0, "std_basis", "Generate all standard basis states for a given number of qubits."]], "quairkit.database.set.gell_mann": [[24, 2, 2, 0, "dim", "a positive integer indicating the dimension."]], "quairkit.database.set.heisenberg_weyl": [[24, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.pauli_basis": [[24, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_group": [[24, 2, 2, 0, "num_qubits", "the number of qubits n."]], "quairkit.database.set.pauli_str_basis": [[24, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.pauli_str_povm": [[24, 2, 2, 0, "pauli_str", "the string composed of 'i', 'x', 'y' and 'z' only."]], "quairkit.database.set.phase_space_point": [[24, 2, 2, 0, "dim", "dimension of qudit"]], "quairkit.database.set.qft_basis": [[24, 2, 2, 0, "num_qubits", "Number of qubits n such that N = 2^n."]], "quairkit.database.set.std_basis": [[24, 2, 2, 0, "num_systems", "number of systems in this state."], [24, 2, 2, 0, "system_dim", "dimension of systems."]], "quairkit.database.state": [[25, 5, 1, 0, "bell_diagonal_state", "Generate a Bell diagonal state."], [25, 5, 1, 0, "bell_state", "Generate a Bell state."], [25, 5, 1, 0, "completely_mixed_computational", "Generate the density matrix of the completely mixed state."], [25, 5, 1, 0, "computational_state", "Generate a computational state |e_{i}\\rangle, whose i-th element is 1 and all the other elements are 0."], [25, 5, 1, 0, "ghz_state", "Generate a GHZ-state."], [25, 5, 1, 0, "isotropic_state", "Generate the isotropic state."], [25, 5, 1, 0, "one_state", "Generate a one state."], [25, 5, 1, 0, "r_state", "Generate an R-state."], [25, 5, 1, 0, "s_state", "Generate the S-state."], [25, 5, 1, 0, "w_state", "Generate a W-state."], [25, 5, 1, 0, "zero_state", "Generate a zero state."]], "quairkit.database.state.bell_diagonal_state": [[25, 2, 2, 0, "prob", "The probability of each Bell state."]], "quairkit.database.state.bell_state": [[25, 2, 2, 0, "num_systems", "Number of systems in this state."], [25, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.state.completely_mixed_computational": [[25, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state.computational_state": [[25, 2, 2, 0, "index", "Index i of the computational basis state |e_{i}\\rangle."], [25, 2, 2, 0, "num_systems", "Number of systems in this state."], [25, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.state.ghz_state": [[25, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state.isotropic_state": [[25, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."], [25, 2, 2, 0, "prob", "The parameter of the isotropic state to be generated."]], "quairkit.database.state.one_state": [[25, 2, 2, 0, "num_systems", "Number of systems in this state."], [25, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.database.state.r_state": [[25, 2, 2, 0, "prob", "The parameter of the R-state to be generated."]], "quairkit.database.state.s_state": [[25, 2, 2, 0, "prob", "The parameter of the S-state to be generated."]], "quairkit.database.state.w_state": [[25, 2, 2, 0, "num_qubits", "The number of qubits in the quantum state."]], "quairkit.database.state.zero_state": [[25, 2, 2, 0, "num_systems", "Number of systems in this state."], [25, 2, 2, 0, "system_dim", "Dimension of systems."]], "quairkit.loss": [[27, 0, 0, 1, "distance", ""], [28, 0, 0, 1, "measure", ""]], "quairkit.loss.distance": [[27, 1, 1, 0, "StateFidelity", "The class of the loss function to compute the state fidelity."], [27, 1, 1, 0, "TraceDistance", "The class of the loss function to compute the trace distance."]], "quairkit.loss.distance.StateFidelity": [[27, 4, 1, 0, "forward", "Compute the state fidelity between the input state and the target state."]], "quairkit.loss.distance.StateFidelity.__init__": [[27, 2, 2, 0, "target_state", "The target state to be used to compute the state fidelity."]], "quairkit.loss.distance.StateFidelity.forward": [[27, 2, 2, 0, "state", "The input state which will be used to compute the state fidelity with the target state."]], "quairkit.loss.distance.TraceDistance": [[27, 4, 1, 0, "forward", "Compute the trace distance between the input state and the target state."]], "quairkit.loss.distance.TraceDistance.__init__": [[27, 2, 2, 0, "target_state", "The target state to be used to compute the trace distance."]], "quairkit.loss.distance.TraceDistance.forward": [[27, 2, 2, 0, "state", "The input state which will be used to compute the trace distance with the target state."]], "quairkit.loss.measure": [[28, 1, 1, 0, "ExpecVal", "The class of the loss function to compute the expectation value for the observable."], [28, 1, 1, 0, "Measure", "Compute the probability of the specified measurement result."]], "quairkit.loss.measure.ExpecVal": [[28, 4, 1, 0, "forward", "Compute the expectation value of the observable with respect to the input state."]], "quairkit.loss.measure.ExpecVal.__init__": [[28, 2, 2, 0, "hamiltonian", "The input observable."]], "quairkit.loss.measure.ExpecVal.forward": [[28, 2, 2, 0, "decompose", "Defaults to False."], [28, 2, 2, 0, "shots", "The number of shots to measure the observable."], [28, 2, 2, 0, "state", "The input state which will be used to compute the expectation value."]], "quairkit.loss.measure.Measure": [[28, 4, 1, 0, "forward", "Compute the probability of measurement to the input state."]], "quairkit.loss.measure.Measure.__init__": [[28, 2, 2, 0, "measure_op", "Specify the basis of the measurement."]], "quairkit.loss.measure.Measure.forward": [[28, 2, 2, 0, "desired_result", "Specify the results of the measurement to return."], [28, 2, 2, 0, "keep_state", "Whether return the measured state."], [28, 2, 2, 0, "shots", "The number of shots for the measurement."], [28, 2, 2, 0, "state", "The quantum state to be measured."], [28, 2, 2, 0, "system_idx", "The index of the systems to be measured."]], "quairkit.operator": [[40, 0, 0, 1, "special", ""]], "quairkit.operator.channel": [[31, 0, 0, 1, "base", ""], [32, 0, 0, 1, "common", ""], [33, 0, 0, 1, "custom", ""]], "quairkit.operator.channel.base": [[31, 1, 1, 0, "Channel", "Basic class for quantum channels."]], "quairkit.operator.channel.base.Channel": [[31, 3, 1, 0, "choi_repr", "Choi representation of a channel"], [31, 3, 1, 0, "dim", "Dimension of the input/output system of this channel"], [31, 3, 1, 0, "info", "Information of this channel"], [31, 3, 1, 0, "kraus_repr", "Kraus representation of a channel"], [31, 3, 1, 0, "stinespring_repr", "Stinespring representation of a channel"]], "quairkit.operator.channel.base.Channel.__init__": [[31, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [31, 2, 2, 0, "channel_info", "additional information of this channel."], [31, 2, 2, 0, "check_legality", "whether check the completeness of the representation if provided."], [31, 2, 2, 0, "representation", "the representation of this channel."], [31, 2, 2, 0, "system_idx", "indices of the system on which this channel acts on."], [31, 2, 2, 0, "type_repr", "type of a representation, should be 'choi', 'kraus', 'stinespring' or 'gate'."]], "quairkit.operator.channel.common": [[32, 1, 1, 0, "AmplitudeDamping", "A collection of amplitude damping channels."], [32, 1, 1, 0, "BitFlip", "A collection of bit flip channels."], [32, 1, 1, 0, "BitPhaseFlip", "A collection of bit phase flip channels."], [32, 1, 1, 0, "Depolarizing", "A collection of depolarizing channels."], [32, 1, 1, 0, "GeneralizedAmplitudeDamping", "A collection of generalized amplitude damping channels."], [32, 1, 1, 0, "GeneralizedDepolarizing", "A generalized depolarizing channel."], [32, 1, 1, 0, "PauliChannel", "A collection of Pauli channels."], [32, 1, 1, 0, "PhaseDamping", "A collection of phase damping channels."], [32, 1, 1, 0, "PhaseFlip", "A collection of phase flip channels."], [32, 1, 1, 0, "ReplacementChannel", "A collection of quantum replacement channels."], [32, 1, 1, 0, "ResetChannel", "A collection of reset channels."], [32, 1, 1, 0, "ThermalRelaxation", "A collection of thermal relaxation channels."]], "quairkit.operator.channel.common.AmplitudeDamping.__init__": [[32, 2, 2, 0, "gamma", "Damping probability."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitFlip.__init__": [[32, 2, 2, 0, "prob", "Probability of a bit flip."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.BitPhaseFlip.__init__": [[32, 2, 2, 0, "prob", "Probability of a bit phase flip."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.Depolarizing.__init__": [[32, 2, 2, 0, "prob", "Parameter of the depolarizing channels."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedAmplitudeDamping.__init__": [[32, 2, 2, 0, "gamma", "Damping probability."], [32, 2, 2, 0, "prob", "Excitation probability."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.GeneralizedDepolarizing.__init__": [[32, 2, 2, 0, "num_qubits", "Total number of qubits."], [32, 2, 2, 0, "prob", "probability p."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to be None."]], "quairkit.operator.channel.common.PauliChannel.__init__": [[32, 2, 2, 0, "prob", "Probabilities corresponding to the Pauli X, Y, and Z operators."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseDamping.__init__": [[32, 2, 2, 0, "gamma", "Parameter of the phase damping channels."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.PhaseFlip.__init__": [[32, 2, 2, 0, "prob", "Probability of a phase flip."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ReplacementChannel.__init__": [[32, 2, 2, 0, "sigma", "The state to be replaced."], [32, 2, 2, 0, "system_idx", "Indices of the qubits on which the channels act, the length of which is n. Defaults to list(range(# of acted qubits))."]], "quairkit.operator.channel.common.ResetChannel.__init__": [[32, 2, 2, 0, "prob", "Probabilities of resetting to |0\\rangle and to |1\\rangle."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.common.ThermalRelaxation.__init__": [[32, 2, 2, 0, "const_t", "T_1 and T_2 relaxation time in microseconds."], [32, 2, 2, 0, "exec_time", "Quantum gate execution time in the process of relaxation in nanoseconds."], [32, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the channels act."]], "quairkit.operator.channel.custom": [[33, 1, 1, 0, "ChoiRepr", "A custom channel in Choi representation."], [33, 1, 1, 0, "KrausRepr", "A custom channel in Kraus representation."], [33, 1, 1, 0, "StinespringRepr", "A custom channel in Stinespring representation."]], "quairkit.operator.channel.custom.ChoiRepr.__init__": [[33, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [33, 2, 2, 0, "choi_repr", "Choi operator of this channel."], [33, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.channel.custom.KrausRepr.__init__": [[33, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [33, 2, 2, 0, "kraus_repr", "list of Kraus operators of this channel."], [33, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.channel.custom.StinespringRepr.__init__": [[33, 2, 2, 0, "acted_system_dim", "dimension of systems that this channel acts on."], [33, 2, 2, 0, "stinespring_mat", "Stinespring matrix that represents this channel."], [33, 2, 2, 0, "system_idx", "Indices of the systems on which this channel acts."]], "quairkit.operator.gate": [[35, 0, 0, 1, "base", ""], [36, 0, 0, 1, "custom", ""], [37, 0, 0, 1, "multi_qubit_gate", ""], [38, 0, 0, 1, "single_qubit_gate", ""], [39, 0, 0, 1, "visual", ""]], "quairkit.operator.gate.base": [[35, 1, 1, 0, "Gate", "Base class for quantum gates."], [35, 1, 1, 0, "ParamGate", "Base class for quantum parameterized gates."]], "quairkit.operator.gate.base.Gate": [[35, 4, 1, 0, "dagger", "Change the dagger and tex info and system_idx of this gate. No changes will be made for some hermitian gates."], [35, 4, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [35, 3, 1, 0, "info", "Information of this gate."], [35, 3, 1, 0, "matrix", "Unitary matrix of this gate"]], "quairkit.operator.gate.base.Gate.__init__": [[35, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [35, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [35, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [35, 2, 2, 0, "matrix", "the matrix of this gate."], [35, 2, 2, 0, "system_idx", "indices of the systems that this gate acts on."]], "quairkit.operator.gate.base.Gate.display_in_circuit": [[35, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [35, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.base.ParamGate": [[35, 4, 1, 0, "display_in_circuit", "The display function called by circuit instance when plotting."], [35, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.base.ParamGate.__init__": [[35, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [35, 2, 2, 0, "check_legality", "whether check the completeness of the matrix if provided."], [35, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [35, 2, 2, 0, "generator", "function that generates the unitary matrix of this gate."], [35, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [35, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [35, 2, 2, 0, "param_sharing", "whether all operations are shared by the same parameter set."], [35, 2, 2, 0, "support_batch", "whether generator support batch inputs."], [35, 2, 2, 0, "system_idx", "indices of the qubits on which this gate acts on."]], "quairkit.operator.gate.base.ParamGate.display_in_circuit": [[35, 2, 2, 0, "ax", "the matplotlib.axes.Axes instance"], [35, 2, 2, 0, "x", "the start horizontal position"]], "quairkit.operator.gate.custom": [[36, 1, 1, 0, "ControlOracle", "A controlled oracle as a gate."], [36, 1, 1, 0, "ControlParamOracle", "An parameterized oracle as a gate"], [36, 1, 1, 0, "Oracle", "An oracle as a gate."], [36, 1, 1, 0, "ParamOracle", "An parameterized oracle as a gate"], [36, 1, 1, 0, "Permutation", "permutation matrix as a gate."], [36, 1, 1, 0, "UniversalQudits", "A collection of universal qudit gates. One of such a gate requires d^2 - 1 parameters."]], "quairkit.operator.gate.custom.ControlOracle": [[36, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.custom.ControlOracle.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [36, 2, 2, 0, "index", "control index that activates the matrix."], [36, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [36, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.ControlParamOracle.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [36, 2, 2, 0, "generator", "function that generates the oracle."], [36, 2, 2, 0, "index", "control index that activates the matrix."], [36, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [36, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [36, 2, 2, 0, "support_batch", "whether the generator supports batched input."], [36, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.Oracle": [[36, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.custom.Oracle.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, "quairkit.operator.gate.custom.Oracle", "gate_info", "An oracle as a gate."], [36, 2, 2, 0, "oracle", "Unitary oracle to be implemented."], [36, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.ParamOracle.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "gate_info", "information of this gate that will be placed into the gate history or plotted by a Circuit. Defaults to None."], [36, 2, 2, 0, "generator", "function that generates the oracle."], [36, 2, 2, 0, "num_acted_param", "the number of parameters required for a single operation."], [36, 2, 2, 0, "param", "input parameters of quantum parameterized gates."], [36, 2, 2, 0, "support_batch", "whether the generator supports batched input."], [36, 2, 2, 0, "system_idx", "indices of the system on which this gate acts on."]], "quairkit.operator.gate.custom.Permutation": [[36, 3, 1, 0, "info", "Information of this gate."]], "quairkit.operator.gate.custom.Permutation.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "perm", "A list representing the permutation of subsystems. For example, [1, 0, 2] swaps the first two subsystems."], [36, 2, 2, 0, "system_idx", "Indices of the systems on which the gates are applied."]], "quairkit.operator.gate.custom.UniversalQudits.__init__": [[36, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [36, 2, 2, 0, "param", "Parameters of the gates."], [36, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [36, 2, 2, 0, "system_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate": [[37, 1, 1, 0, "CCX", "A collection of CCX (Toffoli) gates."], [37, 1, 1, 0, "CNOT", "A collection of CNOT gates."], [37, 1, 1, 0, "CP", "A collection of controlled P gates."], [37, 1, 1, 0, "CRX", "A collection of controlled rotation gates about the x-axis."], [37, 1, 1, 0, "CRY", "A collection of controlled rotation gates about the y-axis."], [37, 1, 1, 0, "CRZ", "A collection of controlled rotation gates about the z-axis."], [37, 1, 1, 0, "CSWAP", "A collection of CSWAP (Fredkin) gates."], [37, 1, 1, 0, "CU", "A collection of controlled single-qubit rotation gates."], [37, 6, 1, 0, "CX", "alias of CNOT"], [37, 1, 1, 0, "CY", "A collection of controlled Y gates."], [37, 1, 1, 0, "CZ", "A collection of controlled Z gates."], [37, 1, 1, 0, "MS", "A collection of M\u00f8lmer-S\u00f8rensen (MS) gates for trapped ion devices."], [37, 1, 1, 0, "RXX", "A collection of RXX gates."], [37, 1, 1, 0, "RYY", "A collection of RYY gates."], [37, 1, 1, 0, "RZZ", "A collection of RZZ gates."], [37, 1, 1, 0, "SWAP", "A collection of SWAP gates."], [37, 6, 1, 0, "Toffoli", "alias of CCX"]], "quairkit.operator.gate.multi_qubit_gate.CCX.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CNOT.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CP.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRX.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRY.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CRZ.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CSWAP.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CU.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CY.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.CZ.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.MS.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RXX.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RYY.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.RZZ.__init__": [[37, 2, 2, 0, "param", "Parameters of the gates."], [37, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.multi_qubit_gate.SWAP.__init__": [[37, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate": [[38, 1, 1, 0, "H", "A collection of single-qubit Hadamard gates."], [38, 1, 1, 0, "P", "A collection of single-qubit P gates."], [38, 1, 1, 0, "RX", "A collection of single-qubit rotation gates about the x-axis."], [38, 1, 1, 0, "RY", "A collection of single-qubit rotation gates about the y-axis."], [38, 1, 1, 0, "RZ", "A collection of single-qubit rotation gates about the z-axis."], [38, 1, 1, 0, "S", "A collection of single-qubit S gates."], [38, 1, 1, 0, "Sdg", "A collection of single-qubit S dagger (S inverse) gates."], [38, 1, 1, 0, "T", "A collection of single-qubit T gates."], [38, 1, 1, 0, "Tdg", "A collection of single-qubit T dagger (T inverse) gates."], [38, 1, 1, 0, "U3", "A collection of single-qubit rotation gates."], [38, 1, 1, 0, "X", "A collection of single-qubit X gates."], [38, 1, 1, 0, "Y", "A collection of single-qubit Y gates."], [38, 1, 1, 0, "Z", "A collection of single-qubit Z gates."]], "quairkit.operator.gate.single_qubit_gate.H.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.P.__init__": [[38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RX.__init__": [[38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RY.__init__": [[38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.RZ.__init__": [[38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.S.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Sdg.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.T.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Tdg.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.U3.__init__": [[38, 2, 2, 0, "param", "Parameters of the gates."], [38, 2, 2, 0, "param_sharing", "Whether gates in the same layer share a parameter."], [38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.X.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Y.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.single_qubit_gate.Z.__init__": [[38, 2, 2, 0, "qubits_idx", "Indices of the qubits on which the gates are applied."]], "quairkit.operator.gate.visual": [[39, 5, 1, 0, "get_circuit_plot_param", "The output function of __CIRCUIT_PLOT_PARAM dictionary"], [39, 5, 1, 0, "reset_circuit_plot_param", "The reset function of __CIRCUIT_PLOT_PARAM dictionary"], [39, 5, 1, 0, "scale_circuit_plot_param", "The scale function of __CIRCUIT_PLOT_PARAM dictionary"], [39, 5, 1, 0, "set_circuit_plot_param", "The set function of __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.gate.visual.scale_circuit_plot_param": [[39, 2, 2, 0, "scale", "the scalar for scaling the elements in the figure"]], "quairkit.operator.gate.visual.set_circuit_plot_param": [[39, 2, 2, 0, "kwargs", "parameters to update the __CIRCUIT_PLOT_PARAM dictionary"]], "quairkit.operator.special": [[40, 1, 1, 0, "Collapse", "The class to compute the collapse of the quantum state."], [40, 1, 1, 0, "OneWayLOCC", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [40, 1, 1, 0, "QuasiOperation", "A quantum protocol containing quasi-operations."], [40, 1, 1, 0, "ResetState", "The class to reset the quantum state."]], "quairkit.operator.special.Collapse": [[40, 4, 1, 0, "forward", "Compute the collapse of the input state."], [40, 3, 1, 0, "info", "Information of this channel"]], "quairkit.operator.special.Collapse.__init__": [[40, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [40, 2, 2, 0, "desired_result", "The desired result you want to collapse."], [40, 2, 2, 0, "if_print", "whether print the information about the collapsed state."], [40, 2, 2, 0, "measure_op", "The measurement operators of the measurement."], [40, 2, 2, 0, "system_idx", "list of systems to be collapsed."]], "quairkit.operator.special.Collapse.forward": [[40, 2, 2, 0, "state", "The input state, which will be collapsed"]], "quairkit.operator.special.OneWayLOCC": [[40, 4, 1, 0, "forward", "Compute the input state passing through the LOCC protocol."], [40, 3, 1, 0, "info", "Information of this operation"], [40, 3, 1, 0, "system_idx", "The system indices of the LOCC protocol."]], "quairkit.operator.special.OneWayLOCC.__init__": [[40, 2, 2, 0, "gate", "a batched Gate instance."], [40, 2, 2, 0, "label", "name of the measured label."], [40, 2, 2, 0, "latex_name", "latex name of the applied operator."], [40, 2, 2, "quairkit.operator.special.OneWayLOCC", "measure_dim", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [40, 2, 2, "quairkit.operator.special.OneWayLOCC", "measure_idx", "A one-way LOCC protocol, where quantum measurement is modelled by a PVM and all channels are unitary channels."], [40, 2, 2, 0, "measure_op", "The measurement operators of the measurement."]], "quairkit.operator.special.OneWayLOCC.forward": [[40, 2, 2, 0, "state", "The input state."]], "quairkit.operator.special.QuasiOperation": [[40, 4, 1, 0, "forward", "Compute the input state passing through the quasi-operation."], [40, 3, 1, 0, "info", "Information of this operation"], [40, 3, 1, 0, "probability", "The (quasi-)probability distribution of the quasi-operation."], [40, 3, 1, 0, "system_idx", "The system indices of the quasi-operation."]], "quairkit.operator.special.QuasiOperation.__init__": [[40, 2, 2, 0, "channel", "a batched Channel instance."], [40, 2, 2, 0, "prob", "a 1D (quasi-)probability distribution for the channel argument."], [40, 2, 2, 0, "probability_param", "whether the probability is parameterized."]], "quairkit.operator.special.QuasiOperation.forward": [[40, 2, 2, 0, "state", "The input state."]], "quairkit.operator.special.ResetState": [[40, 4, 1, 0, "forward", "Perform the reset operation on the input quantum state."], [40, 3, 1, 0, "info", "Information of this operation"]], "quairkit.operator.special.ResetState.__init__": [[40, 2, 2, 0, "acted_system_dim", "dimension of systems that this gate acts on."], [40, 2, 2, 0, "replace_state", "the state to replace the quantum state."], [40, 2, 2, 0, "state_label", "LaTeX label of the reset state, used for printing."], [40, 2, 2, 0, "system_idx", "list of systems to be reset."]], "quairkit.operator.special.ResetState.forward": [[40, 2, 2, 0, "state", "The input quantum state to be reset."]], "quairkit.qinfo": [[42, 0, 0, 1, "check", ""], [43, 0, 0, 1, "linalg", ""], [44, 0, 0, 1, "qinfo", ""]], "quairkit.qinfo.check": [[42, 5, 1, 0, "is_choi", "Support batch input."], [42, 5, 1, 0, "is_density_matrix", "Support batch input"], [42, 5, 1, 0, "is_hermitian", "Support batch input."], [42, 5, 1, 0, "is_linear", "Check if the provided function 'func' is linear."], [42, 5, 1, 0, "is_positive", "Support batch input."], [42, 5, 1, 0, "is_povm", "Check if a set of operators forms a positive operator-valued measure (POVM)."], [42, 5, 1, 0, "is_ppt", "Support batch input."], [42, 5, 1, 0, "is_projector", "Support batch input."], [42, 5, 1, 0, "is_pvm", "Check if a set of operators forms a projection-valued measure (PVM)."], [42, 5, 1, 0, "is_state_vector", "Support batch input."], [42, 5, 1, 0, "is_unitary", "Support batch input."]], "quairkit.qinfo.check.is_choi": [[42, 2, 2, 0, "op", "matrix form of the linear operation."]], "quairkit.qinfo.check.is_density_matrix": [[42, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [42, 2, 2, 0, "rho", "density matrix candidate"]], "quairkit.qinfo.check.is_hermitian": [[42, 2, 2, 0, "eps", "tolerance of error"], [42, 2, 2, 0, "mat", "hermitian candidate P"]], "quairkit.qinfo.check.is_linear": [[42, 2, 2, 0, "eps", "An optional tolerance value used to determine if the function's behavior is close enough to linear."], [42, 2, 2, 0, "func", "A callable function to be tested."], [42, 2, 2, 0, "info", "A parameter specifying the shape of the input for 'func'."], [42, 2, 2, "quairkit.qinfo.check.is_linear", "input_dtype", "Check if the provided function 'func' is linear."]], "quairkit.qinfo.check.is_positive": [[42, 2, 2, 0, "eps", "tolerance of error"], [42, 2, 2, 0, "mat", "positive operator candidate P"]], "quairkit.qinfo.check.is_povm": [[42, 2, 2, 0, "eps", "An optional tolerance value."], [42, 2, 2, 0, "set_op", "A set of operators indexed by the first dimension"]], "quairkit.qinfo.check.is_ppt": [[42, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.check.is_projector": [[42, 2, 2, 0, "eps", "tolerance of error"], [42, 2, 2, 0, "mat", "projector candidate P"]], "quairkit.qinfo.check.is_pvm": [[42, 2, 2, 0, "eps", "An optional tolerance value."], [42, 2, 2, 0, "set_op", "A set of operators indexed by the first dimension"]], "quairkit.qinfo.check.is_state_vector": [[42, 2, 2, 0, "eps", "tolerance of error, default to be None i.e."], [42, 2, 2, 0, "vec", "state vector candidate x"]], "quairkit.qinfo.check.is_unitary": [[42, 2, 2, 0, "eps", "tolerance of error"], [42, 2, 2, 0, "mat", "unitary candidate P"]], "quairkit.qinfo.linalg": [[43, 5, 1, 0, "NKron", "Calculate the Kronecker product of matrices."], [43, 5, 1, 0, "abs_norm", "Tool for calculation of matrix norm."], [43, 5, 1, 0, "block_enc_herm", "Generate a (qubitized) block encoding of Hermitian mat."], [43, 5, 1, 0, "create_matrix", "Create a matrix representation of a linear map without needing to specify the output dimension."], [43, 5, 1, 0, "dagger", "Tool for calculation of matrix dagger."], [43, 5, 1, 0, "direct_sum", "Calculate the direct sum of A and B."], [43, 5, 1, 0, "gradient", "Compute the gradient of a given loss function with respect to its input variable."], [43, 5, 1, 0, "herm_transform", "Function transformation for a Hermitian matrix."], [43, 5, 1, 0, "hessian", "Compute the Hessian matrix of a given loss function with respect to its input variables."], [43, 5, 1, 0, "kron_power", "Calculate the Kronecker product of identical matrices."], [43, 5, 1, 0, "logm", "Calculate the logarithm of a matrix."], [43, 5, 1, 0, "nkron", "Calculate the Kronecker product of matrices."], [43, 5, 1, 0, "p_norm", "Calculate the Schatten p-norm of a matrix."], [43, 5, 1, 0, "partial_trace", "Calculate the partial trace of the quantum state."], [43, 5, 1, 0, "partial_trace_discontiguous", "Calculate the partial trace of the quantum state with arbitrarily selected subsystem."], [43, 5, 1, 0, "partial_transpose", "Calculate the partial transpose \\rho^{T_A} of the input quantum state."], [43, 5, 1, 0, "pauli_decomposition", "Decompose the matrix by the Pauli basis."], [43, 5, 1, 0, "permute_systems", "Permute quantum systems based on a permutation list."], [43, 5, 1, 0, "prob_sample", "Sample from a probability distribution."], [43, 5, 1, 0, "schmidt_decompose", "Calculate the Schmidt decomposition of a quantum state."], [43, 5, 1, 0, "sqrtm", "Calculate the square root of a matrix."], [43, 5, 1, 0, "trace", "Return the sum along the diagonals of the tensor."], [43, 5, 1, 0, "trace_norm", "Calculate the trace norm of a matrix."]], "quairkit.qinfo.linalg.NKron": [[43, 2, 2, 0, "args", "Other matrices."], [43, 2, 2, 0, "matrix_1st", "The first matrix."]], "quairkit.qinfo.linalg.abs_norm": [[43, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.linalg.block_enc_herm": [[43, 2, 2, 0, "mat", "matrix to be block encoded"], [43, 2, 2, 0, "num_block_qubits", "ancilla qubits used in block encoding"]], "quairkit.qinfo.linalg.create_matrix": [[43, 2, 2, 0, "input_dim", "The dimension of the input space."], [43, 2, 2, 0, "input_dtype", "The dtype of the input."], [43, 2, 2, 0, "linear_map", "A function representing the linear map, which takes an input_dim-dimensional vector and returns a vector."]], "quairkit.qinfo.linalg.dagger": [[43, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.linalg.direct_sum": [[43, 2, 2, 0, "A", "m \\times n matrix"], [43, 2, 2, 0, "B", "p \\times q matrix"]], "quairkit.qinfo.linalg.gradient": [[43, 2, 2, 0, "loss_function", "A loss function to compute the gradient."], [43, 2, 2, 0, "n", "The number of iterations for gradient computation."], [43, 2, 2, 0, "var", "A vector of shape (m, 1) as the input variables for the loss function."]], "quairkit.qinfo.linalg.herm_transform": [[43, 2, 2, 0, "fcn", "A function f that can be expanded by Taylor series."], [43, 2, 2, 0, "ignore_zero", "Whether to ignore eigenspaces with zero eigenvalue."], [43, 2, 2, 0, "mat", "Hermitian matrix H."]], "quairkit.qinfo.linalg.hessian": [[43, 2, 2, 0, "loss_function", "The loss function to compute the Hessian."], [43, 2, 2, 0, "var", "A matrix of shape (n, m) as input variables for the loss function."]], "quairkit.qinfo.linalg.kron_power": [[43, 2, 2, 0, "matrix", "The matrix to be powered."], [43, 2, 2, 0, "n", "The number of identical matrices."]], "quairkit.qinfo.linalg.logm": [[43, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.linalg.nkron": [[43, 2, 2, 0, "args", "Other matrices."], [43, 2, 2, 0, "matrix_1st", "The first matrix."]], "quairkit.qinfo.linalg.p_norm": [[43, 2, 2, 0, "mat", "matrix"], [43, 2, 2, 0, "p", "p-norm parameter"]], "quairkit.qinfo.linalg.partial_trace": [[43, 2, 2, 0, "state", "Input quantum state."], [43, 2, 2, 0, "system_dim", "The dimension of all systems."], [43, 2, 2, 0, "trace_idx", "The system indices to be traced out."]], "quairkit.qinfo.linalg.partial_trace_discontiguous": [[43, 2, 2, 0, "preserve_qubits", "Remaining qubits; if None, all qubits are preserved."], [43, 2, 2, 0, "state", "Input quantum state."]], "quairkit.qinfo.linalg.partial_transpose": [[43, 2, 2, 0, "state", "Input quantum state."], [43, 2, 2, 0, "system_dim", "The dimension of all systems."], [43, 2, 2, 0, "transpose_idx", "The system indices to be transposed."]], "quairkit.qinfo.linalg.pauli_decomposition": [[43, 2, 2, 0, "mat", "The matrix to be decomposed."]], "quairkit.qinfo.linalg.permute_systems": [[43, 2, 2, 0, "perm_list", "The permutation list."], [43, 2, 2, 0, "state", "A matrix representation of a quantum state."], [43, 2, 2, 0, "system_dim", "A list of dimension sizes of each subsystem."]], "quairkit.qinfo.linalg.prob_sample": [[43, 2, 2, 0, "binary", "Whether the sampled result is recorded as binary."], [43, 2, 2, 0, "distribution", "The probability distribution."], [43, 2, 2, 0, "proportional", "Whether the counts are shown in proportion."], [43, 2, 2, 0, "shots", "The number of shots."]], "quairkit.qinfo.linalg.schmidt_decompose": [[43, 2, 2, 0, "psi", "State vector form of the quantum state, with shape (2**n)."], [43, 2, 2, 0, "sys_A", "Qubit indices to be included in subsystem A."]], "quairkit.qinfo.linalg.sqrtm": [[43, 2, 2, 0, "mat", "Input matrix."]], "quairkit.qinfo.linalg.trace": [[43, 2, 2, 0, "axis1", "The first axis for the 2-D sub-tensor."], [43, 2, 2, 0, "axis2", "The second axis for the 2-D sub-tensor."], [43, 2, 2, 0, "mat", "Input tensor from which the diagonal is taken."]], "quairkit.qinfo.linalg.trace_norm": [[43, 2, 2, 0, "mat", "matrix"]], "quairkit.qinfo.qinfo": [[44, 5, 1, 0, "channel_repr_convert", "Convert the given representation of a channel to the target implementation."], [44, 5, 1, 0, "create_choi_repr", "Create the Choi representation of a linear map with input checks."], [44, 5, 1, 0, "decomp_1qubit", "Decompose a single-qubit unitary operator into Z-Y-Z rotation angles."], [44, 5, 1, 0, "decomp_ctrl_1qubit", "Decompose a controlled single-qubit unitary operator into its components."], [44, 5, 1, 0, "diamond_norm", "Calculate the diamond norm of input."], [44, 5, 1, 0, "gate_fidelity", "Calculate the fidelity between gates."], [44, 5, 1, 0, "general_state_fidelity", "Calculate the fidelity measure of two general states."], [44, 5, 1, 0, "link", "Calculate the link product of two Choi matrices of quantum channels."], [44, 5, 1, 0, "logarithmic_negativity", "Calculate the Logarithmic Negativity E_N = ||\\rho^{T_A}|| of the input quantum state."], [44, 5, 1, 0, "mana", "Compute the mana of states or channels."], [44, 5, 1, 0, "mutual_information", "Compute the mutual information of a bipartite state."], [44, 5, 1, 0, "negativity", "Compute the Negativity N = ||\\frac{\\rho^{T_A}-1}{2}|| of the input quantum state."], [44, 5, 1, 0, "pauli_str_convertor", "Concatenate the input observable with coefficient 1."], [44, 5, 1, 0, "purity", "Calculate the purity of a quantum state."], [44, 5, 1, 0, "relative_entropy", "Calculate the relative entropy of two quantum states."], [44, 5, 1, 0, "stab_nullity", "Tool for calculation of unitary-stabilizer nullity."], [44, 5, 1, 0, "stab_renyi", "Tool for calculation of stabilizer Renyi entropy."], [44, 5, 1, 0, "state_fidelity", "Calculate the fidelity of two quantum states, no extra square is taken."], [44, 5, 1, 0, "trace_distance", "Calculate the trace distance of two quantum states."], [44, 5, 1, 0, "von_neumann_entropy", "Calculate the von Neumann entropy of a quantum state."]], "quairkit.qinfo.qinfo.channel_repr_convert": [[44, 2, 2, 0, "representation", "Input representation."], [44, 2, 2, 0, "source", "Input form, should be 'choi', 'kraus' or 'stinespring'."], [44, 2, 2, 0, "target", "Target form, should be 'choi', 'kraus' or 'stinespring'."], [44, 2, 2, 0, "tol", "Error tolerance for the conversion from Choi, 10^{-6} by default."]], "quairkit.qinfo.qinfo.create_choi_repr": [[44, 2, 2, 0, "input_dim", "The dimension of the space in which the linear map operates."], [44, 2, 2, 0, "input_dtype", "The dtype of the input."], [44, 2, 2, 0, "linear_map", "A function representing the linear map, which takes and returns a square matrix."]], "quairkit.qinfo.qinfo.decomp_1qubit": [[44, 2, 2, 0, "return_global", "If set to True, the global phase angle alpha is also returned."], [44, 2, 2, 0, "unitary", "A batch of 2x2 unitary matrices representing single-qubit gates, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.qinfo.decomp_ctrl_1qubit": [[44, 2, 2, 0, "unitary", "A 2x2 unitary matrix representing the single-qubit gate, as either a numpy ndarray or a torch Tensor."]], "quairkit.qinfo.qinfo.diamond_norm": [[44, 2, 2, 0, "channel_repr", "A Channel or a torch.Tensor instance."], [44, 2, 2, 0, "dim_io", "The input and output dimensions."], [44, 2, 2, 0, "kwargs", "Parameters to set cvx."]], "quairkit.qinfo.qinfo.gate_fidelity": [[44, 2, 2, 0, "U", "Quantum gate U in matrix form."], [44, 2, 2, 0, "V", "Quantum gate V in matrix form."]], "quairkit.qinfo.qinfo.general_state_fidelity": [[44, 2, 2, 0, "rho", "A subnormalized quantum state."], [44, 2, 2, 0, "sigma", "A subnormalized quantum state."]], "quairkit.qinfo.qinfo.link": [[44, 2, 2, 0, "JE", "Tuple containing the Choi representation of channel E, its label, input dimensions, and output dimensions."], [44, 2, 2, 0, "JF", "Tuple containing the Choi representation of channel F, its label, input dimensions, and output dimensions."]], "quairkit.qinfo.qinfo.logarithmic_negativity": [[44, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.mana": [[44, 2, 2, 0, "input_str", "\"state\" or \"channel\"."], [44, 2, 2, 0, "matrix", "Quantum state or channel, when \"channel\", it should be the choi matrix of channel."], [44, 2, 2, 0, "out_dim", "Output system dimension, only need to compute mana of channel."]], "quairkit.qinfo.qinfo.mutual_information": [[44, 2, 2, 0, "dim_A", "Dimension of system A."], [44, 2, 2, 0, "dim_B", "Dimension of system B."], [44, 2, 2, 0, "state", "Input bipartite quantum state with system AB."]], "quairkit.qinfo.qinfo.negativity": [[44, 2, 2, 0, "density_op", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.pauli_str_convertor": [[44, 2, 2, 0, "observable", "The observable to be concatenated with coefficient 1."]], "quairkit.qinfo.qinfo.purity": [[44, 2, 2, 0, "rho", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.relative_entropy": [[44, 2, 2, 0, "base", "The base of logarithm."], [44, 2, 2, 0, "rho", "Density matrix form of the quantum state."], [44, 2, 2, 0, "sigma", "Density matrix form of the quantum state."]], "quairkit.qinfo.qinfo.stab_nullity": [[44, 2, 2, 0, "unitary", "A batch of unitary matrices."]], "quairkit.qinfo.qinfo.stab_renyi": [[44, 2, 2, 0, "alpha", "The Renyi entropy exponent."], [44, 2, 2, 0, "density", "A batch of density matrices."]], "quairkit.qinfo.qinfo.state_fidelity": [[44, 2, 2, 0, "rho", "A quantum state."], [44, 2, 2, 0, "sigma", "A quantum state."]], "quairkit.qinfo.qinfo.trace_distance": [[44, 2, 2, 0, "rho", "A quantum state."], [44, 2, 2, 0, "sigma", "A quantum state."]], "quairkit.qinfo.qinfo.von_neumann_entropy": [[44, 2, 2, 0, "base", "The base of logarithm."], [44, 2, 2, 0, "rho", "Density matrix form of the quantum state."]]}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "attribute", "Python attribute"]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:property", "4": "py:method", "5": "py:function", "6": "py:attribute"}, "terms": {"": [4, 9, 12, 17, 19, 21, 22, 25, 32, 34, 38, 42, 44, 49, 50, 51, 53, 54, 57], "0": [4, 8, 9, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 32, 36, 37, 38, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "00": [9, 21, 24, 25, 28, 53, 56], "0000": [21, 22, 23, 24, 43, 44, 51, 52, 54, 55, 56], "0000000000000004": 55, "0000000000000009": 55, "0000e": [21, 24, 54], "0000j": [21, 22, 23, 24, 43, 44, 51, 54, 55, 56], "0001": [17, 42], "0010e": 21, "0020": 54, "0029997826": 53, "0033j": 55, "0041j": 21, "0044j": 21, "0056": 52, "0057j": 21, "00633": 5, "0072": 22, "0078": 21, "0081": 28, "0085j": 22, "0090117455": 53, "00e": 57, "00j": [21, 24, 54], "01": [21, 22, 43, 50, 52, 53, 54], "0100": 21, "0103": 57, "0104": 21, "0105": 57, "0108": 54, "0111": 57, "0112j": 21, "0113": 57, "0119": 57, "0122": 57, "0128": 54, "0130": 57, "0147": 57, "0149j": 21, "015003": 57, "0160j": 22, "016744241430078275": 50, "0170": 21, "0180": 21, "0185j": 54, "0188": 21, "0194j": 21, "0198": 28, "01j": [22, 24, 43, 50, 52, 54], "02": [9, 43, 50, 52, 54, 57], "02109": 32, "0224": 22, "0230j": 21, "0232": 54, "0232j": 21, "0240j": 55, "0241j": 54, "0251": 21, "0254": [52, 54], "0258": 23, "0267j": 55, "0270j": 21, "0293": 21, "0296": 22, "0299j": 21, "02j": [43, 50, 52, 53, 54, 56], "03": [43, 50, 52, 54], "0303j": 21, "030503": 57, "0307e": 54, "0309": 55, "0323j": 21, "0328": 54, "0330": 21, "0332j": 21, "0336": 51, "03517652": 57, "0357": 22, "0361": 57, "0377": 48, "0382": 51, "0383j": 55, "0384e": 21, "0387j": 54, "0396": 56, "0396465": 56, "0396j": 22, "03j": [22, 43, 50, 52, 54], "04": [43, 50, 52, 54, 56], "0417": 51, "0420": 51, "0424": 54, "0430": 22, "0433j": 54, "0440": 55, "0440j": 22, "0442": 21, "0447": 23, "0449": 21, "0455": 21, "0463": 55, "04672": 54, "0472": 51, "0481": 55, "0482j": 21, "0486": 21, "0488": 54, "0494j": 21, "04j": [43, 48, 50, 52, 54, 56], "05": [42, 43, 50, 52, 54, 56, 57], "0502j": 55, "0503j": 54, "0516": 52, "0519": 54, "0523": 54, "0546": 44, "0549": 55, "0572": 43, "0578e": [22, 54], "0586": 56, "0587j": 54, "0598j": 21, "05j": [43, 50, 54], "06": [9, 42, 43, 44, 48, 50, 52, 54], "0609050v2": 22, "0630j": 21, "0638": 48, "0651j": 21, "0675": 21, "0687": 54, "06j": [43, 48, 50, 52, 54], "07": [43, 44, 48, 50, 52, 54], "0701j": 21, "0702": 54, "0707": 56, "0720": 21, "0749j": 22, "0756": 54, "0764": 56, "0768": 28, "0771j": 54, "0790": 22, "0791": 54, "0791j": 21, "0796e": 54, "07j": [43, 50, 52, 54], "08": [21, 22, 48, 50, 52, 53, 54], "0808": 55, "0825": 21, "0826": 54, "0827": 21, "0830": 48, "0831": 54, "0846": 51, "0866j": 21, "0874": 21, "0874j": 56, "0876": [44, 54], "0886j": 22, "0889j": 55, "0894": 21, "0894e": 22, "0894j": 21, "08j": [43, 48, 50, 52, 54], "09": [22, 43, 50, 52, 54], "0914": 21, "0918j": 21, "0931j": 21, "0941j": 21, "0947j": 22, "0952j": 55, "0956": 28, "0972e": 54, "0980": 56, "0987j": 54, "0996j": 55, "0998": 54, "09j": [22, 50, 52, 54], "0j": 43, "1": [4, 5, 8, 9, 12, 20, 21, 22, 23, 24, 25, 27, 28, 32, 35, 36, 37, 38, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "10": [9, 28, 32, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "100": [23, 49, 50, 51, 57], "1000": [8, 51, 56], "10000": 8, "10000000149011612": 20, "1008j": 21, "1017": 32, "102": 32, "1024": [43, 53], "1030": 21, "1038": 22, "1052j": 21, "1053": 21, "10856": 57, "10876": 5, "1088j": 55, "10915": 57, "10f": 53, "10j": 22, "10th": [32, 44], "11": [25, 28, 43, 48, 49, 50, 52, 53, 54, 56], "111": 53, "1111j": 21, "1114": 55, "1123": 21, "1123e": 22, "1128": 22, "1135": 21, "1140": 21, "1143": 55, "1148j": 21, "1154j": 21, "1155": 21, "1158": 51, "116": 53, "1162": 28, "1163": 22, "1167": 56, "1177": 21, "11801365595625102": 22, "1185j": 22, "119": 57, "1191": 53, "1194j": 21, "11j": [22, 43, 48, 50, 54], "12": [22, 25, 49, 50, 52, 53, 54, 56], "120": 57, "12028483j": 56, "1203j": 56, "1215e": 22, "1222": 21, "1232e": 24, "1236": 53, "1241": 54, "1243j": 54, "12440505341821817": 28, "1272": 21, "1273": 28, "12777564473712655": 22, "1277j": 44, "128": 57, "12j": [50, 52, 54, 56], "13": [43, 48, 49, 50, 52, 53, 54, 56], "1312": 55, "1339": 54, "1351j": 21, "1356": 22, "1362": 22, "13859613": 56, "1386": 56, "1387": 21, "13j": [22, 50, 52, 54], "14": [43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "140": 57, "1401": 21, "1404j": 22, "1406": 21, "1414": 23, "1416": 44, "1419": 55, "1430": 56, "1431": 21, "1433j": 21, "1446j": 22, "1456075082500372": 55, "1459": [21, 54], "1470375336229326": 55, "1473": 21, "1480j": 21, "1486j": 21, "1490": 55, "14j": [43, 54], "15": [5, 9, 21, 43, 48, 49, 50, 52, 54, 55, 56], "1503j": 21, "1504j": 22, "151": 54, "1513": 28, "1529": 54, "1530e": 54, "1546": 21, "1573j": 21, "1575j": 21, "1581": 23, "1581j": 23, "1583": 22, "1589": 48, "1593": 55, "15j": [50, 54], "16": [24, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "160": 57, "16234064": 57, "1624j": 22, "1634j": 22, "1646j": 22, "1647": 21, "1648": 48, "1652": 22, "1676": 28, "1677": 55, "1677j": 21, "1685": 55, "1686": 21, "1692": 22, "16j": [21, 22, 24, 43, 48, 50, 54], "17": [24, 52, 54, 56], "1704": 22, "17055199353235606": 51, "1706j": 22, "1714": 21, "1728": 54, "1730j": 55, "1742": 48, "1744j": 21, "1748": 28, "1748j": 21, "1760": 21, "1774j": 21, "1778j": 21, "1780": 56, "1784j": 55, "1789j": 55, "1797587035": 57, "17j": [21, 24, 50, 54], "18": [43, 48, 50, 52, 54, 56], "180": 57, "1804": 5, "1817j": 21, "1826": [28, 55], "1836": 52, "1841j": 21, "1847j": 21, "1873": 22, "1873j": 21, "1875": 49, "1891": 28, "18j": [22, 53, 54], "19": [50, 52, 54, 56, 57], "1903": 21, "1905": 5, "1913j": 21, "1921": 54, "1926j": 55, "1931j": 22, "1932": 54, "1940j": 21, "1943j": 21, "1966": 44, "1968j": 56, "1977": 54, "1980": 55, "1988": 52, "199": 57, "1991": 55, "1993j": 55, "19j": [54, 56], "1d": 40, "1e": [42, 44], "1j": [9, 37, 52, 54], "2": [4, 8, 9, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 31, 33, 35, 36, 37, 38, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "20": [9, 52, 54, 56, 57], "200": 57, "2000": 23, "20000000298023224": 20, "2001": [22, 51, 53], "201": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "2010": [32, 52, 54], "2011": 54, "2014": 57, "2018": [51, 57], "2018e": 22, "2019": 57, "2020": [51, 54, 57], "2021": 22, "2022": 57, "2031": 55, "2032": 55, "2071": 21, "2080": 21, "2099": 21, "21": [43, 50, 52, 54], "2100j": 55, "2101": 32, "2122j": 54, "2138": 21, "2146j": 22, "2150j": 22, "2151": 21, "21559535758899973": 51, "2156j": 51, "2180": 54, "2180j": 21, "2190j": 55, "2191": 54, "2193": 55, "21j": [48, 53], "22": [50, 54, 56], "2218": 22, "2221371571298889": 51, "2221j": 51, "2229": 28, "2231j": 21, "2236": 23, "2236j": 23, "2238": 22, "2245j": 55, "2246e": [21, 24], "2289": 55, "2298": 22, "22j": [48, 56], "23": [48, 52, 53, 54, 56], "230": 53, "2306": 21, "2322": 21, "2323": 56, "23232111": 56, "2324": 21, "2327j": 55, "2345": 21, "2360j": 54, "2361": 22, "2368j": 55, "2376": 55, "2378": 55, "2388e": 21, "23j": [43, 54], "24": [22, 43, 50, 53, 54], "2414j": 22, "2424": 21, "2425": 51, "2431": [21, 51], "2459j": 22, "2460e": 22, "2485": 21, "2489e": 22, "24940717j": 56, "2494j": 56, "2499e": 54, "24j": [50, 54, 56], "25": [25, 43, 50, 54], "2500": [44, 54], "2516e": 22, "2529j": 44, "2560": 56, "2560j": 56, "2568j": 55, "2593": 55, "25j": [54, 56], "26": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "2608": 51, "2609": 48, "26100": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "2612": 21, "2620": 22, "2620j": 44, "26312841520515695": 48, "2635": 21, "2648": [48, 54], "2655j": 21, "2661": 54, "2663": 28, "2665": 28, "2671688636": 53, "2671j": 22, "2677": 22, "2697j": 21, "26j": 50, "27": [50, 53, 54, 56], "2703": 21, "2708": 55, "2711j": 22, "2712": 21, "2717j": 55, "2735": 21, "27353507j": 56, "2735j": 56, "2798j": 55, "27j": 56, "28": [22, 56], "2800": 22, "28006427149436375": 48, "2801": 48, "2804": 22, "2806j": 21, "2816j": 54, "28233465254251144": 28, "2828": 23, "283185307179586": 4, "2842": 56, "2843": 56, "2843098": 56, "2846": 28, "2846j": 21, "2850": 22, "2854054036807161": 28, "2858": 21, "2860": 48, "2869j": 21, "2895": 56, "28j": [48, 54], "29": [22, 43, 50, 54], "2926j": 21, "2963j": 21, "29869042772144": 55, "2989": 54, "2991": 56, "2991j": 21, "29j": 54, "2e": 57, "2j": 50, "2n": 21, "2nd": 43, "2x2": 44, "2x\u2082\u00b2": 43, "3": [9, 12, 17, 20, 21, 22, 23, 24, 25, 28, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "30": [9, 23], "300": [4, 9, 53], "30000001192092896": [20, 51], "3009j": 22, "3023j": 22, "3033j": 22, "3040j": 21, "3056j": 21, "3090j": 21, "3098": 56, "31": [48, 50, 54], "3114": 49, "3118": 21, "3141e": 21, "3154": 44, "3156": 21, "3158j": 54, "3162": [23, 44], "3162j": 23, "3189": 22, "3191": 54, "31j": 22, "32": [48, 54], "3212j": 21, "3240": 22, "3242": 21, "3267": 22, "3280j": 22, "3282": 55, "3289j": 21, "3294": 21, "32j": [48, 53], "33": 22, "3312": 28, "3314j": 21, "3331": 54, "3364j": 22, "3369j": 21, "3380": 22, "3380j": 55, "33j": 54, "34": [53, 54, 56], "3414": 22, "3431": 54, "3432": 54, "3451j": 21, "3465j": 21, "349": 53, "3498j": 54, "35": 54, "3500e": 22, "3536": 54, "3536j": 54, "3538j": 21, "3539j": 21, "3577": 44, "3587": 22, "36": 9, "3601": 23, "3601e": 54, "3616j": 55, "3619j": 21, "3627": 22, "3633": 53, "3635j": 21, "3657": 53, "3662j": 54, "3665j": 55, "3671": 21, "36j": [48, 50], "37": [22, 50, 54], "3701": 53, "3707": 53, "379": 53, "3799": 53, "37j": [22, 56], "38": [24, 25, 56], "3811": 22, "3825": 21, "3827": 21, "3827j": 21, "383": 53, "3835": 21, "3841": 53, "3842e": 44, "3844j": 21, "3851j": 56, "3854j": 21, "3862": 22, "3878e": 54, "3887": 22, "38j": 48, "39": [48, 50, 51, 52, 53, 55], "3910227956714316": 51, "3944j": 22, "3958": 55, "3959j": 22, "396": 53, "3964j": 55, "3984j": 21, "3991": 49, "3j": [48, 54], "3p": [23, 32, 54], "3rd": [43, 51, 57], "3x": 22, "3x\u2083\u00b2": 43, "4": [9, 20, 21, 22, 23, 24, 25, 28, 32, 38, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "40": 57, "4000000059604645": 20, "4003": 21, "4019j": 22, "402": 53, "4038e": 22, "40390968": 57, "4095": 54, "41": 54, "4106j": 22, "4124": 21, "4142135381698608": 43, "4142j": 22, "4166": 22, "4181599354425789": 51, "4195j": [21, 55], "41j": 48, "42": 48, "4213": 57, "4229": 21, "4243": 23, "4251": 22, "43": 22, "4309": 21, "4328": 22, "4331": 21, "4369": 55, "4385j": 21, "44": 54, "4451e": 22, "4459": 28, "4472": 23, "4472j": 23, "4494": 43, "44j": 48, "45": 22, "45437813": 57, "4546": 22, "4563": 22, "4579": 22, "45j": 54, "4602": 21, "4619j": 21, "4625": 55, "4630": 49, "4694e": 54, "46j": 48, "47": 54, "4727": 55, "4751": 22, "4753": 54, "4784": 22, "47j": 48, "48": 48, "4802": 48, "4855e": 22, "4864": 22, "4875": 22, "4882": 48, "4886j": 22, "48992562": 57, "48j": 48, "49": 48, "4921": 28, "4925j": 22, "49346781": 57, "49388337": 57, "49395490": 57, "49395800": 57, "49395871": 57, "4954": 22, "4999999701976776": 44, "4f": 57, "4pt": 9, "5": [9, 20, 21, 22, 23, 24, 25, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "50": [9, 23], "500": 9, "5000": [24, 43, 53, 54], "5000725984573364": 44, "5000j": [24, 43], "5048868288610004": 48, "5048j": 55, "5073e": 54, "5076": 43, "5092": 54, "51": [48, 50], "5121": 22, "5136": 22, "5158": 21, "5167": 22, "5173j": 21, "5174": 22, "5193e": 22, "5196": [22, 51], "5198": 48, "52": [48, 54], "5253j": 22, "5277": 22, "5288": 22, "5296j": 22, "53": [44, 54, 55, 56], "5310": 55, "5321": 22, "5347j": 22, "5359": 21, "5372j": 22, "5374j": 21, "5383j": 55, "53906864j": 56, "5391": 21, "5391j": 56, "53j": 48, "54": 43, "5444j": 22, "5454": 21, "5460": 21, "5477": 23, "54j": 56, "5514e": 22, "5521": 55, "5522": 51, "5522232793578568": 51, "5543": 54, "5554969": 56, "5555": 56, "5577e": 54, "55j": [22, 50], "56": 56, "5634": 55, "5646j": 22, "5658": 27, "5660": 55, "5673e": 54, "57": [9, 22], "5703j": 21, "5708": 44, "5708j": 43, "5772": 4, "57j": 56, "58": 48, "5804": 21, "5813j": 55, "5852j": 22, "58j": 56, "5942": 22, "5th": 52, "5y": 22, "6": [4, 21, 24, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "60": 57, "600": 9, "6003j": 22, "6019637631250563": 22, "6062": 21, "6068": 22, "6095j": 22, "6097": 49, "61": [48, 52], "6113": 22, "6159": 53, "6166": 49, "61775345j": 56, "6178j": [22, 56], "6194e": 21, "62": 54, "6201": 53, "622": 53, "6235j": 22, "6293": 53, "6294": 22, "6299": 53, "62j": 56, "63": [22, 53], "6310": 22, "6315": 22, "6316e": 22, "6325": 23, "6343": 53, "6367": 53, "6385j": 22, "63j": 54, "64": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "641": 53, "6428": 55, "6432": 55, "645": 53, "6464j": 21, "6468": 56, "6481j": 21, "6495j": 55, "65": 54, "6529": 54, "6546j": 22, "6558": 55, "6596e": 21, "6603e": 22, "6620": 22, "6628j": 55, "6659j": 55, "6669": 54, "6674": 55, "66j": 50, "67": 22, "6728e": 21, "6740j": 22, "675": 53, "6765": 55, "6787e": 54, "6790j": 22, "6791e": 54, "68": [48, 53, 54], "6813": 44, "6831": 55, "6847e": 22, "6859": 22, "69": [48, 54], "6900j": 55, "6902": 56, "6951": 54, "6996": 22, "699999988079071": 20, "7": [20, 21, 22, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "7007e": 22, "7008e": 22, "7011": 54, "702": 53, "7071": [21, 22, 23, 24, 27, 43, 44, 52, 54], "7071067690849304": 43, "70710688829422": 44, "7071j": [21, 22, 24, 43, 54], "7075j": 54, "7090": [21, 27], "71": [24, 25, 56], "7121j": 22, "7183": 43, "72": 56, "7277": 22, "7283": 27, "7289": 22, "7298": 22, "72j": 22, "73": 54, "7309499027665167j": 55, "7333": 22, "7352": [48, 54], "74": 50, "7453e": 54, "7456e": 22, "7497j": 22, "75": [25, 44, 50], "7500": 54, "7500035113999476": 44, "77": 48, "7771": 28, "77j": 56, "78": 52, "7860": 22, "7873e": 22, "7906": 54, "79073524": 57, "7912": 27, "7926": 49, "8": [9, 21, 22, 23, 32, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "80": 57, "8000": 23, "8001j": 21, "8003e": 54, "8059": 48, "8084j": 22, "81": [5, 9, 21, 43], "8151": 21, "8177": 52, "8185e": 22, "82": 54, "8210": 49, "8258": 48, "8296": 22, "83": 22, "8328e": 54, "8367": 23, "8370e": 24, "8377j": 22, "83j": 54, "8408": 22, "844111804577901e": 55, "8485": 23, "8562e": 43, "8570": 56, "86j": 48, "87": 48, "8764": 53, "8798": 54, "8798j": 54, "88": 22, "8809": 53, "8916j": 22, "8944": 23, "8960976j": 56, "8961j": 56, "8f": 57, "9": [21, 22, 44, 48, 49, 50, 52, 53, 54, 56], "9013e": 22, "9020": 56, "9059897222160238": 22, "908": 53, "91": 50, "9104j": 44, "913": 53, "9134e": 21, "9169": 49, "92": [24, 48, 57], "9236": 56, "9239": 21, "9239j": 21, "9389e": 54, "94": 48, "9406": 55, "9432j": 44, "9486": 21, "9487": [23, 44], "95": 56, "9512": 54, "95348746": 56, "9535": 56, "9618": 23, "9700": 54, "9704": 22, "98": 53, "986": 57, "989130913609007": 55, "9908": 22, "9918": 44, "9987": [23, 52], "9997": 52, "999999761581421": 44, "9j": 56, "A": [4, 5, 8, 9, 12, 20, 21, 22, 24, 25, 32, 33, 36, 37, 38, 40, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57], "And": 54, "As": [52, 53], "At": [54, 55], "But": 49, "By": [43, 49, 50, 52, 57], "For": [9, 17, 21, 32, 36, 37, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "If": [8, 9, 12, 17, 21, 22, 24, 25, 28, 42, 43, 44, 49, 53, 54, 56, 57], "In": [49, 50, 51, 52, 53, 54, 56, 57], "Ising": [20, 51, 57], "It": [4, 25, 42, 52, 54, 57], "Its": [25, 32, 44, 51, 54, 56], "NOT": [52, 54, 57], "No": [35, 52], "Not": 54, "Of": [19, 21], "One": [5, 9, 36, 48, 49, 50, 52, 54, 56], "Such": [22, 32, 49, 53], "The": [4, 5, 8, 9, 11, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57], "Their": 57, "Then": [50, 54, 56, 57], "There": [51, 53, 54, 55], "These": [24, 49, 52, 53, 54, 57], "To": [9, 50], "With": 54, "_": [9, 48, 51, 52, 54, 56], "_1": 48, "_2": 48, "_3": 48, "__circuit_plot_param": 39, "__init__": [49, 53, 57], "_a": [54, 56], "_extract_highest_fidel": 8, "_i": 57, "_n": 52, "_type_transform": 55, "aa": 54, "ab": [5, 32, 43, 44, 54], "abil": 57, "abl": [51, 53, 57], "about": [9, 37, 38, 40, 48, 49], "abov": [9, 53, 54], "abs_nor": 43, "abs_norm": [41, 43], "academ": 9, "accept": [42, 49, 53], "access": [24, 49, 52], "accord": [4, 53, 57], "accur": 57, "achiev": [52, 54], "aco": 54, "across": [52, 53], "act": [4, 9, 12, 31, 32, 33, 35, 36, 40, 48, 50, 52, 53, 54, 57], "acted_system_dim": [31, 33, 35, 36, 40], "action": 54, "activ": [36, 40, 57], "actual": 57, "ad": [4, 9, 46, 48, 52], "adam": 57, "adapt": 56, "add": [4, 9, 48, 50, 54, 57], "add_system": 4, "addit": [9, 31, 49, 50], "addition": [52, 54, 55, 56], "adjust": [17, 49, 53, 57], "advanc": 52, "affect": 56, "after": [44, 48, 49, 50, 52, 53, 54, 56, 57], "ag": 57, "aim": 57, "al": 57, "alberto": 57, "algorithm": [21, 52, 57], "alia": [9, 22, 24, 25, 37], "align": [20, 37, 38, 49, 57], "all": [4, 9, 12, 21, 22, 24, 25, 28, 31, 33, 35, 36, 40, 43, 49, 52, 53, 54, 57], "allclos": 48, "allow": [17, 28, 53, 56, 57], "along": [24, 43, 49, 52], "alpha": [44, 54, 57], "alpha_": 20, "alphabet": 56, "also": [44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "altern": 54, "although": 57, "alwai": [53, 54], "amplitud": [9, 23, 32], "amplitude_damp": 9, "amplitude_damping_choi_repr": 54, "amplitude_damping_krau": [19, 23, 54], "amplitude_damping_kraus_repr": 54, "amplitude_damping_stin_repr": 54, "amplitude_encod": 9, "amplitudedamp": [30, 32], "an": [4, 9, 17, 21, 22, 23, 24, 25, 31, 33, 35, 36, 42, 43, 44, 48, 49, 50, 53, 54, 55, 57], "anaconda3": 53, "analog": 57, "analysi": 49, "ancilla": [8, 43], "angl": [9, 44, 52, 55, 57], "angle_encod": 9, "ani": [39, 49, 54, 57], "anniversari": 32, "anoth": [4, 54, 56], "ansatz": [1, 39, 49, 52], "answer": 4, "api": 52, "apostroph": 44, "appdata": 53, "append": [4, 51, 52, 54, 57], "appli": [4, 5, 8, 9, 36, 37, 38, 40, 42, 52, 53, 56, 57], "applic": [1, 9, 54, 55, 57], "approach": [54, 57], "approxim": 57, "ar": [4, 9, 17, 21, 23, 24, 25, 28, 32, 35, 36, 37, 38, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "arang": 52, "arbitrarili": 43, "are_qubit": [50, 56], "are_qutrit": [50, 56], "area": 55, "arg": [17, 43, 49, 57], "arg0": 4, "arg1": 4, "argument": [4, 40, 52, 53], "armv8": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "around": 55, "arrai": [42, 43], "artifici": 57, "arxiv": [5, 22, 32, 54], "assign": 50, "associ": [55, 57], "assum": [4, 21, 31, 43], "atom": 57, "attribut": [49, 50, 52, 53, 57], "automat": [12, 17, 56], "avail": [52, 56], "averag": 50, "avg_tim": 57, "ax": [35, 43, 54, 55], "axi": [9, 37, 38, 43, 48, 52, 54], "axis1": 43, "axis2": 43, "b": [24, 25, 43, 44, 54, 55, 57], "backend": [10, 13, 17, 22, 24, 25, 27, 28, 43, 48, 50, 52, 53, 54, 56], "background": 57, "backpropag": 57, "backward": [49, 57], "base": [1, 4, 8, 10, 21, 29, 30, 34, 43, 44, 53, 56, 57], "base_lin": 57, "base_lr": 8, "basi": [9, 12, 21, 24, 25, 28, 43, 48, 50, 53, 54, 56], "basic": [11, 31, 35, 54], "basic_encod": 9, "basis_encod": 9, "batch": [9, 17, 21, 22, 24, 27, 28, 35, 36, 40, 42, 44, 45, 46, 47, 49, 50, 51, 54, 56], "batch_channel": 22, "batch_cir": 48, "batch_result": 27, "batch_siz": [48, 49, 50, 53, 54], "been": 32, "befor": 53, "begin": [9, 20, 21, 23, 32, 37, 38, 51, 52, 54], "behav": 42, "behavior": [28, 42, 57], "being": 53, "bell": [24, 25, 43, 44, 56], "bell_basi": [19, 24], "bell_diagonal_st": [19, 25], "bell_mana": 44, "bell_stat": [19, 25, 27, 42, 43, 44, 56], "belong": 43, "below": [48, 49, 51, 54], "besid": 54, "best": 57, "beta": [44, 51, 54], "beta_": 20, "beta_k": 20, "better": [50, 51, 57], "between": [17, 27, 44, 51, 54, 55, 57], "bf": 9, "bias": 57, "bigotimes_": 51, "binari": [43, 53], "bipartit": 44, "bit": [9, 21, 23, 32, 48, 49, 50, 51, 52, 53, 55, 56, 57], "bit_flip": 9, "bit_flip_choi_repr": 54, "bit_flip_krau": [19, 23, 54], "bit_flip_kraus_repr": 54, "bit_flip_stin_repr": 54, "bit_phase_flip": [9, 52], "bit_phase_flip_choi_repr": 54, "bit_phase_flip_krau": [19, 23, 54], "bit_phase_flip_kraus_repr": 54, "bit_phase_flip_stin_repr": 54, "bitflip": [30, 32], "bitphaseflip": [30, 32, 52], "block": [9, 22, 43, 52, 54, 55], "block_enc": 43, "block_enc_herm": [41, 43], "bm": 49, "bmatrix": [9, 21, 23, 32, 37, 38, 52, 54], "bool": [4, 8, 9, 12, 22, 28, 31, 35, 36, 37, 38, 40, 42, 43, 44], "boolean": 42, "both": [28, 53, 54, 55], "bound": 57, "bpf": 9, "bra": 56, "brain": 57, "bravyi": 22, "briefli": 54, "broadcast": [17, 53], "build": [49, 54], "built": [4, 49, 54, 55], "c": [9, 24, 43, 44, 53], "c_i": 43, "cabl": 52, "calcul": [12, 17, 43, 44, 51, 54, 55, 56, 57], "call": [8, 35, 48, 52, 53, 54, 57], "callabl": [8, 9, 21, 35, 36, 42, 43, 44, 57], "cambridg": [32, 51, 52, 53, 54, 57], "can": [4, 8, 9, 11, 12, 17, 22, 24, 25, 27, 28, 31, 33, 35, 36, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "candid": [42, 51], "cannot": [52, 53], "cao": 57, "capabl": 57, "care": [17, 49], "case": [9, 22, 24, 25, 33, 35, 36, 43, 44, 46, 52, 56], "cat": 9, "categor": 55, "caus": 44, "cbo9780511976667": 32, "ccu3": 49, "ccx": [9, 19, 21, 34, 37], "ccx_gate": [19, 21], "cd": 44, "cdot": [9, 21, 50, 54, 57], "certain": 55, "cfloat": 21, "chain": 51, "challeng": 57, "chang": [35, 52, 53, 56], "channel": [1, 9, 22, 23, 29, 40, 44, 45, 46, 47, 48, 49, 56], "channel_choi": 22, "channel_info": 31, "channel_krau": 22, "channel_repr": 44, "channel_repr_convert": [41, 44, 54], "channel_stinespr": 22, "character": [48, 57], "check": [1, 4, 12, 17, 31, 35, 41, 44, 48, 50, 54, 55, 56], "check_leg": [31, 35], "chemic": 57, "chemistri": 57, "child": 49, "chio": 54, "choi": [9, 22, 23, 31, 33, 42, 44, 48, 50, 52, 56], "choi_channel": [9, 48, 50, 52], "choi_matrix": 44, "choi_op": 52, "choi_oper": 23, "choi_repr": [9, 31, 33, 52, 54], "choirepr": [30, 33, 44, 52], "chuang": [32, 51, 52, 53, 54], "cir": [48, 49, 50, 52, 54, 57], "cir1": 49, "cir2": 49, "cir_1": 48, "cir_cho": 48, "cir_cho2": 48, "cir_kra": 48, "cir_kra2": 48, "cir_ora": 48, "cir_ora2": 48, "cir_stat": 52, "circuit": [1, 4, 5, 8, 22, 35, 36, 37, 39, 45, 46, 47, 54], "clariti": [48, 50], "class": [4, 5, 8, 9, 12, 17, 27, 28, 31, 32, 33, 35, 36, 37, 38, 40, 47, 48, 49, 50, 52, 54, 55, 56, 57], "classic": [11, 49, 52, 54, 57], "classif": 57, "clifford": 22, "clifford_matrix": 22, "clone": 56, "close": 42, "closer": 57, "cloud": 53, "cnot": [5, 9, 19, 21, 34, 37, 49, 52, 54, 57], "cnot_gat": [19, 21], "co": [9, 21, 37, 38, 54], "code": [4, 9, 48, 49, 50, 51, 54], "coeffici": [9, 12, 23, 43, 44, 51], "collaps": [9, 29, 40, 48, 50, 53], "collapsed_st": 53, "collect": [32, 36, 37, 38, 53, 57], "color": 57, "com": 4, "comb": [1, 2, 6], "combin": [22, 54, 55, 56], "come": 53, "common": [17, 20, 25, 29, 30, 49, 54, 57], "commonli": [9, 54, 56], "commun": [54, 57], "compact": [4, 9], "compat": 47, "complet": [25, 31, 35, 53, 54], "completely_mixed_comput": [19, 25, 44], "complex": [5, 9, 50, 52, 54, 57], "complex128": [11, 23, 44, 48, 50, 53, 54, 55, 56], "complex64": [9, 11, 44, 54, 56], "complex_block_lay": [9, 49, 52], "complex_entangled_lay": [9, 50, 52, 57], "complexblocklay": [2, 5], "complexentangledlay": [2, 5], "compon": [44, 57], "compos": [24, 28, 50, 57], "composit": 52, "compound": 50, "compress": 12, "compris": 9, "comput": [9, 20, 24, 25, 27, 28, 32, 40, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 56, 57], "computation": 57, "computational_st": [19, 25, 49], "concaten": [4, 44], "concept": 54, "conceptu": 57, "concret": [54, 56], "condens": 57, "condit": [51, 54, 55, 57], "configur": 50, "conj": 44, "conjug": [53, 54, 55, 56], "connect": [49, 52, 57], "consid": [49, 51, 52, 54, 57], "consist": [5, 9, 52, 53, 55], "const_t": [9, 23, 32], "constant": 57, "construct": [12, 21, 43, 45, 47, 49, 50, 54, 57], "construct_cir": 57, "construct_h_matrix": 12, "contain": [1, 2, 9, 12, 22, 40, 43, 44, 49], "content": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "context": 57, "continu": 57, "control": [8, 9, 22, 36, 37, 44, 49, 50, 52, 54, 57], "control_idx": 9, "control_oracl": [9, 48, 50, 52], "controlledrot": 9, "controloracl": [34, 36, 52], "controlparamoracl": [34, 36], "conveni": 49, "convent": [44, 48, 49, 51, 52, 53, 54, 56, 57], "converg": 57, "convers": 44, "convert": [44, 54, 56], "convex": 56, "copi": 39, "copyslic": 43, "coracl": 9, "core": [1, 51, 53], "corespond": 51, "correct": 42, "correspond": [9, 12, 23, 28, 32, 43, 50, 51, 53, 54, 57], "cos_theta": 9, "cost": 57, "could": [12, 35, 49, 56], "count": 43, "coupl": 51, "cover": 49, "cp": [9, 19, 21, 34, 37], "cp_gate": [19, 21], "cptp": 54, "cpu": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "cr_x": [9, 21], "cr_y": [9, 21], "cr_z": [9, 21], "creat": [12, 22, 43, 44, 49, 50, 52, 57], "create_choi_repr": [41, 44], "create_cir": 49, "create_matrix": [41, 43], "creation": 49, "critic": 57, "cross": 57, "crucial": [54, 57], "crx": [9, 19, 21, 34, 37], "crx_gate": [19, 21], "cry": [9, 19, 21, 34, 37], "cry_gat": [19, 21], "crz": [9, 19, 21, 34, 37], "crz_gate": [19, 21], "cswap": [9, 19, 21, 34, 37], "cswap_gat": [19, 21], "ctrl": 9, "cu": [9, 19, 21, 34, 37], "cu_gat": [19, 21], "cuda": [11, 56], "current": [4, 11, 32, 40, 44], "custom": [9, 28, 29, 30, 34, 35, 45, 46, 51], "custom_unitari": 52, "cvx": 44, "cx": [34, 37, 52, 54], "cy": [9, 19, 21, 34, 37, 52], "cy_gat": [19, 21], "cycl": [9, 52], "cz": [9, 19, 21, 34, 37, 54], "cz_gate": [19, 21], "d": [9, 21, 22, 23, 24, 25, 32, 36, 43, 44, 50, 51, 54, 56, 57], "d1": 56, "d_": [31, 50], "d_0": 50, "d_2": 50, "d_3": 50, "dag": 43, "dagger": [4, 9, 21, 35, 38, 41, 42, 43, 44, 51, 52, 53, 54, 55, 57], "damp": [9, 23, 32], "darrel": [51, 57], "dash": 9, "data": [8, 11, 17, 22, 31, 42, 44, 47, 49, 56, 57], "databas": [1, 27, 28, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "dataset": 8, "datatyp": [17, 54], "david": [51, 57], "ddot": [9, 21], "decai": 54, "decid": 12, "decim": [4, 9, 53, 54], "decomp_1qubit": [41, 44, 55], "decomp_ctrl_1qubit": [41, 44], "decompos": [12, 28, 43, 44, 48, 55], "decompose_pauli_word": 12, "decompose_with_sit": 12, "decomposit": [9, 43, 44, 51, 53, 55], "def": [9, 21, 42, 43, 44, 49, 57], "default": [4, 5, 8, 9, 12, 17, 21, 22, 24, 25, 28, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 49, 50, 52, 53, 54, 56, 57], "defaultsimul": 17, "defin": [4, 24, 27, 28, 32, 42, 49, 50, 51, 52, 53, 54, 56, 57], "definit": [42, 55, 56, 57], "delta": [44, 53], "delta_": 53, "demonstr": [49, 50, 53, 54], "denot": [17, 28, 53, 57], "dens": 49, "densiti": [22, 25, 31, 42, 44, 54, 55, 56], "density_matrix": [13, 14, 22, 25, 28, 43, 44, 48, 49, 50, 52, 53, 54, 55, 56], "density_op": [42, 44], "depend": [9, 57], "depict": [48, 49, 50], "depolar": [9, 23, 30, 32, 52], "depolarizing_choi": 44, "depolarizing_choi_repr": 54, "depolarizing_krau": [19, 23, 48, 54], "depolarizing_kraus_repr": 54, "depolarizing_stin_repr": 54, "deprec": 9, "depth": [4, 5, 9, 52, 57], "descent": 57, "describ": [51, 53, 54, 56], "descript": [48, 49, 51, 52, 53, 54, 56, 57], "design": 57, "desir": [40, 56], "desired_result": [28, 40, 50, 53], "despit": 57, "detail": [4, 9, 50, 57], "determin": [12, 42, 43, 53, 57], "devic": [11, 32, 37, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "diagon": [25, 43, 55], "diagram": [9, 50, 52, 54], "diamond": 44, "diamond_norm": [41, 44], "dict": [28, 31, 35, 36, 39, 43], "dictionari": [39, 43, 53], "differ": [12, 44, 47, 52, 53, 56, 57], "dim": [9, 21, 22, 24, 31, 44, 54, 56], "dim_a": 44, "dim_b": 44, "dim_in": 44, "dim_io": 44, "dim_out": 44, "dimens": [4, 8, 9, 17, 21, 22, 24, 25, 28, 31, 33, 35, 36, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56], "dimension": [21, 43, 44, 48, 50, 57], "dir_sum": 43, "direct": [43, 54, 55, 56, 57], "direct_sum": [41, 43, 55], "directli": [49, 52, 53, 54, 57], "disabl": 17, "discrep": 57, "displai": [4, 9, 35, 39], "display_in_circuit": 35, "display_result": 57, "dist": 43, "distanc": [1, 26, 44, 55], "distinguish": 53, "distribut": [9, 17, 28, 40, 43, 50, 53, 56, 57], "divid": 22, "dmitri": 22, "dn": [44, 56], "document": 52, "doe": [8, 9, 42, 44, 49, 53, 54, 56], "doi": 32, "done": 52, "dot": [4, 9, 52], "doubl": 52, "dpi": [4, 9], "draw": [9, 57], "dtype": [9, 11, 21, 23, 43, 44, 54, 55, 56], "dure": 57, "dynam": [9, 52, 57], "e": [9, 12, 20, 21, 24, 28, 31, 35, 36, 37, 38, 42, 44, 51, 52, 53, 54], "e_": 25, "e_0": [23, 32], "e_1": [23, 32], "e_2": [23, 32], "e_3": [23, 32], "e_4": [23, 32], "e_k": [23, 32], "e_n": 44, "each": [4, 8, 9, 12, 21, 24, 25, 28, 32, 43, 44, 48, 50, 51, 53, 54, 57], "earli": 8, "easi": 57, "easili": [54, 56], "ed": [51, 57], "edg": [20, 57], "edit": [32, 44], "effect": [49, 53, 57], "effici": [49, 53, 57], "eigen": 28, "eigenbasi": [24, 53], "eigensolv": 47, "eigenspac": 43, "eigenst": [50, 57], "eigenvalu": [42, 43, 51, 57], "eigenvector": [24, 57], "eigh": 44, "eigvalsh": 57, "either": [42, 44, 53, 57], "element": [9, 12, 25, 36, 39, 44, 49, 53], "empti": 9, "enabl": 57, "encod": [9, 22, 43], "end": [4, 9, 20, 21, 23, 32, 37, 38, 50, 51, 52, 54], "energi": [51, 57], "enhanc": [8, 9, 57], "enough": 42, "ensur": [9, 57], "ent": 44, "entangl": [5, 9, 50, 52, 57], "entir": [4, 24, 52], "entri": 55, "entropi": [44, 55, 57], "enumer": 48, "env": 53, "environ": 47, "ep": [17, 42], "epoch": [8, 57], "equal": [32, 52, 54], "equal_dim": 4, "equat": [44, 53, 54], "equival": [48, 51, 53, 54], "error": [4, 42, 44, 53, 57], "essenti": 52, "establish": 50, "et": 57, "eta": 57, "evalu": 57, "event": 52, "everi": [53, 54], "evolut": [9, 52, 54], "evolv": [54, 56], "exact": 57, "exampl": [9, 17, 20, 21, 22, 23, 24, 25, 27, 36, 43, 44, 48, 49, 50, 51, 52, 53, 55, 56, 57], "except": [25, 53], "exchang": 54, "excit": [9, 32], "exclud": [12, 57], "exec_tim": [9, 23, 32], "execut": [9, 23, 32, 53, 54, 57], "exemplifi": 44, "exhibit": 57, "exist": [8, 52, 54], "exp": [21, 43, 54], "exp_h": 51, "exp_val": 57, "expand": 43, "expec_v": [28, 48, 51, 56], "expect": [28, 47, 48, 49, 56, 57], "expecv": [26, 28, 48, 49, 51, 57], "experi": [9, 53], "explor": 57, "expon": 44, "expos": 22, "express": [51, 52, 53, 54], "extend": 4, "extern": [51, 57], "extra": 44, "extract_highest_fidel": 8, "ey": [9, 19, 21, 42, 43, 44, 49], "eye_g": [19, 21], "f": [9, 20, 21, 22, 23, 24, 25, 28, 42, 43, 44, 48, 50, 51, 52, 53, 54, 55, 56, 57], "f_": 44, "fact": 53, "factor": 57, "fals": [4, 8, 9, 12, 22, 28, 35, 36, 37, 38, 40, 42, 43, 44, 53, 55, 56], "famili": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "fc1": 49, "fc2": 49, "fcn": 43, "featur": [9, 32, 45, 49], "ferromagnet": [51, 57], "fh": 43, "fidel": [8, 27, 44, 55], "fidelity_calcul": 27, "field": [51, 57], "fig": [48, 49, 50], "figur": [9, 39, 48, 50], "file": [4, 5, 8, 9, 27, 28, 31, 32, 33, 35, 36, 37, 38, 40, 53], "final": [49, 57], "find": 57, "finit": 56, "first": [4, 9, 17, 21, 24, 28, 36, 37, 38, 42, 43, 49, 50, 52, 53, 54, 55, 56], "first_gat": 49, "fix": [49, 52, 57], "flag": 8, "flatten": [4, 44], "flip": [9, 23, 32, 52], "float": [4, 8, 9, 11, 12, 17, 21, 23, 25, 32, 35, 36, 37, 38, 39, 42, 43, 44, 57], "float64": [44, 55], "focu": 49, "follow": [5, 11, 12, 22, 48, 49, 50, 51, 52, 53, 54, 56, 57], "form": [4, 9, 12, 21, 22, 23, 25, 35, 37, 38, 42, 43, 44, 51, 53, 54, 56], "formal": 54, "format": [4, 9, 47, 53], "formula": 32, "forward": [4, 27, 28, 40, 49, 57], "found": 52, "four": [24, 51, 53], "fourier": [21, 24, 52], "fourth": [49, 53], "frac": [9, 21, 23, 25, 37, 38, 44, 52, 53, 54, 57], "framework": [49, 57], "fredkin": [9, 37], "free": 22, "from": [4, 5, 9, 20, 22, 24, 25, 27, 28, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "full": [9, 22, 28], "fulli": [9, 49], "func": 42, "function": [8, 9, 11, 17, 21, 22, 27, 28, 35, 36, 39, 42, 43, 44, 47, 48, 49, 50, 53, 54, 56, 57], "fundament": [54, 57], "further": [52, 56], "furthermor": 52, "futur": 9, "g": [12, 21, 28], "gad": 9, "gamma": [9, 21, 23, 32, 37, 44, 51, 54], "gamma_": [20, 54], "gate": [1, 4, 5, 9, 21, 23, 29, 31, 32, 40, 44, 45, 46, 47, 48, 49, 55, 57], "gate_fidel": [41, 44], "gate_histori": 52, "gate_info": [35, 36, 52], "gate_nam": [9, 49, 52], "gategroup": 9, "gaussian": 49, "gell": [21, 24], "gell_mann": [19, 24], "gener": [4, 5, 8, 9, 17, 21, 22, 23, 24, 25, 32, 35, 36, 43, 44, 49, 51, 52, 53, 54, 56, 57], "general_state_fidel": [41, 44], "generalized_amplitude_damp": 9, "generalized_amplitude_damping_krau": [19, 23], "generalized_depolar": 9, "generalized_depolarizing_krau": [19, 23], "generalizedamplitudedamp": [30, 32], "generalizeddepolar": [30, 32], "get": [4, 9, 11, 24, 52, 53], "get_circuit_plot_param": [34, 39], "get_devic": [10, 11], "get_dtyp": [10, 11, 54], "get_float_dtyp": [10, 11], "get_last_lr": 57, "get_latex_nam": 4, "get_qasm": 4, "get_se": [10, 11], "ghz": 25, "ghz_state": [19, 25], "ghz_state_inst": 25, "give": 24, "given": [9, 24, 43, 44, 48, 49, 51, 52, 53, 54, 56, 57], "global": [11, 44], "go": 0, "good": 51, "gpu": 56, "grad": [4, 43, 49, 57], "grad_fn": [43, 49, 52], "gradient": [4, 41, 43, 49, 57], "gradual": 57, "grai": 9, "griffith": [51, 57], "ground": 57, "group": [22, 24, 52], "grover": 21, "grover_matrix": [19, 21], "grover_op": 21, "gt": [49, 50, 52, 53, 55], "guid": 57, "h": [9, 19, 21, 34, 38, 43, 44, 48, 49, 51, 52, 54, 56, 57], "h_": 20, "h_gate": [19, 21], "h_heisenberg": 20, "h_k": 51, "h_list": 51, "h_qkit": 54, "h_xy": 20, "ha": [32, 44, 49, 52, 53, 54], "haar": [22, 56], "haar_density_oper": [19, 22], "haar_orthogon": [19, 22], "haar_state_vector": [19, 22, 43, 56], "haar_unitari": [19, 22], "hadamard": [9, 21, 22, 38, 44, 49, 52, 54], "half": 43, "ham": 49, "hamiltonian": [1, 9, 10, 19, 22, 28, 45, 47, 48, 49, 56, 57], "hand": 52, "happen": 53, "hat": [51, 57], "have": [4, 9, 21, 49, 52, 54, 57], "he": 43, "heisenberg": [20, 24, 51], "heisenberg_hamiltonian": [19, 20, 51], "heisenberg_weyl": [19, 24], "help": 57, "here": [48, 49, 50, 52, 53, 56, 57], "herm_transform": [41, 43], "hermitian": [22, 35, 42, 43, 51, 56], "hessian": [41, 43], "hidden": 57, "high": [43, 57], "higher": 54, "hilbert": [21, 51, 52, 54, 56], "histori": [4, 35, 36, 52], "home": 0, "horizont": [35, 52], "how": [48, 49, 50, 51, 52, 53, 54, 57], "howev": [52, 53, 56], "http": [4, 5, 9, 32], "human": 57, "hybrid": 49, "i": [4, 5, 8, 9, 11, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 35, 36, 37, 38, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "i_": [52, 54], "i_a": 43, "i_b": 43, "idea": 53, "ident": [9, 21, 43, 44, 49, 51, 52], "identif": 44, "identity_choi": 44, "identity_map": 44, "idx": [4, 48], "ieee": 22, "if_print": [9, 40, 50], "ignor": 43, "ignore_zero": 43, "iix": [12, 51], "ij": 51, "illustr": [48, 50], "imag": [4, 9], "immedi": 53, "implement": [22, 25, 32, 36, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57], "impli": [44, 52], "import": [20, 27, 28, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "improv": [49, 57], "inc": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "inch": [4, 9], "includ": [9, 43, 49, 50, 52, 53, 54, 55, 56, 57], "include_empti": 9, "incorpor": 50, "index": [4, 8, 9, 12, 24, 25, 28, 36, 42, 49, 52, 53, 56], "indic": [4, 5, 8, 9, 12, 24, 28, 31, 32, 33, 35, 36, 37, 38, 40, 43, 44, 53], "individu": 21, "infer": [24, 25], "infidel": 57, "influenc": 57, "info": [9, 31, 35, 36, 40, 42], "inform": [4, 12, 22, 31, 32, 35, 36, 40, 44, 45, 47, 49, 51, 52, 53, 54, 57], "inher": 52, "inherit": 57, "initi": [4, 5, 51, 52, 53, 55, 57], "inner": [9, 56], "input": [4, 9, 12, 17, 21, 27, 28, 31, 32, 35, 36, 40, 42, 43, 44, 48, 49, 52, 53, 54, 55, 56, 57], "input_batch": 27, "input_dim": [43, 44], "input_dtyp": [42, 43, 44], "input_st": [27, 28, 49], "input_state_batch": [27, 28], "input_str": 44, "insert": [49, 52], "insid": 57, "insight": 57, "inspir": 57, "instal": 9, "instanc": [4, 9, 17, 31, 35, 40, 44, 47, 50, 52, 53, 57], "instantan": 9, "instanti": 12, "instruct": 50, "int": [4, 5, 8, 9, 11, 12, 17, 21, 22, 23, 24, 25, 28, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 49, 52, 57], "integ": [9, 17, 21, 24, 42], "integr": [50, 57], "interact": [47, 51, 57], "interconnect": 57, "interfac": [27, 28, 49], "introduc": [49, 54, 55, 57], "introduct": [45, 46, 54], "invers": [9, 38, 52], "involv": [48, 49, 51], "ion": 37, "ipykernel_21928": 53, "iqp": 9, "iqp_encod": 9, "is_auto_stop": 8, "is_choi": [41, 42], "is_ctrl_u": 8, "is_dens_mat": 42, "is_density_matrix": [41, 42], "is_hermit": 42, "is_hermitian": [41, 42], "is_lin": 42, "is_linear": [41, 42], "is_po": 42, "is_posit": [41, 42, 55], "is_pov": 42, "is_povm": [41, 42, 53], "is_ppt": [41, 42, 55], "is_proj": 42, "is_projector": [41, 42], "is_pt": 42, "is_pv": 42, "is_pvm": [41, 42], "is_real": [22, 56], "is_save_data": 8, "is_st_vec": 42, "is_state_vector": [41, 42], "is_unit": 42, "is_unitari": [22, 41, 42, 55], "isaac": [51, 52, 53, 54], "ischoi": 42, "ising_hamiltonian": [19, 20, 51, 57], "isometr": 54, "isometri": [44, 54], "isomorph": 54, "isotrop": [25, 56], "isotropic_st": [19, 25, 56], "isotropic_state_inst": 25, "isq2": 54, "item": [12, 52, 54, 57], "iter": [4, 9, 12, 21, 23, 28, 31, 32, 33, 35, 36, 37, 38, 40, 43, 44, 57], "itr": 57, "its": [22, 43, 44, 50, 51, 53, 54, 56, 57], "itself": 52, "ixz": 54, "j": [21, 22, 23, 24, 25, 28, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 57], "j_": 51, "j_result": 44, "je": 44, "jf": 44, "jim": [51, 57], "jule": 57, "just": [4, 49, 50, 52], "k": [20, 23, 32, 43, 51], "k0": 44, "k1": 44, "k_": 54, "k_0": 54, "keep": 48, "keep_stat": [28, 48, 50, 53], "kei": 57, "ket": [9, 54, 55, 56], "keyword": 52, "khatri": 54, "kind": [52, 55], "kinet": 51, "known": [51, 52, 54], "kp": 43, "krau": [9, 22, 23, 31, 32, 33, 44, 48, 49, 52, 56], "kraus_channel": [9, 48, 52], "kraus_op": [9, 44, 52], "kraus_oper": 23, "kraus_repr": [31, 33, 49, 52, 54], "krausrepr": [30, 33, 52], "kron": [9, 44, 49], "kron_pow": [41, 43], "kroneck": [17, 43, 53, 55], "kwarg": [9, 39, 44], "l": [32, 43, 51, 52, 53, 54, 57], "label": [9, 40, 44, 57], "lack": 53, "lambda": [9, 21, 37, 38, 51], "lambda_0": 57, "lambda_k": 51, "langl": [9, 21, 25, 37, 49, 51, 53, 54, 56, 57], "langle0": 21, "langle00": 25, "langle1": 21, "langle11": 25, "larger": [53, 55], "largest": 4, "last": 53, "latex": [4, 9, 40], "latex_nam": [9, 40, 52], "layer": [1, 2, 4, 9, 36, 37, 38, 49, 50, 52, 57], "ldot": 57, "le": 32, "lead": 54, "learn": [8, 49, 50, 51, 52, 54, 57], "learnabl": 57, "least": [17, 22, 55], "left": [21, 22, 25, 49, 51, 52, 54, 57], "leftarrow": 57, "legal": 42, "legend": 57, "legitimaci": 12, "len": [48, 51, 57], "length": [17, 21, 32], "less": [32, 53], "let": [49, 54, 56], "letter": 44, "level": 57, "leverag": 57, "lgm": 43, "lib": 53, "librari": [20, 22, 25], "like": [4, 9, 48, 52, 54, 57], "linalg": [1, 17, 41, 57], "line": [9, 50, 51, 52, 53, 57], "linear": [5, 9, 22, 42, 43, 44, 49, 52, 54], "linear_entangled_lay": [9, 52], "linear_map": [43, 44], "linearentangledlay": [2, 5], "linestyl": 57, "link": [41, 44], "linspac": 21, "list": [4, 5, 8, 9, 12, 17, 21, 22, 23, 24, 25, 28, 31, 32, 33, 35, 36, 40, 42, 43, 44, 48, 49, 52, 54, 56, 57], "list_choi": 48, "list_depo": 48, "list_exp_h": 51, "list_itr": 57, "list_krau": 48, "list_pvm": 53, "list_rho": 53, "list_unitari": [9, 48], "list_x": 48, "live": 9, "ll": 49, "loc": 57, "local": [9, 53], "local_unitari": 9, "locat": 52, "locc": [9, 40], "log": [8, 43, 44, 57], "log_": 44, "log_neg": 44, "logarithm": [43, 44], "logarithmic_neg": [41, 44], "logic": [4, 9, 32, 52], "logm": [41, 43], "loss": [1, 43, 48, 49, 50, 51, 53, 57], "loss_fcn": 57, "loss_funct": 43, "loss_list": 57, "lost": 56, "low": 8, "lower": 57, "lowercas": 44, "lowest": 57, "lr": 57, "lr_schedul": 57, "lstick": 9, "lt": [49, 52, 53, 55], "lvert": 43, "m": [9, 19, 21, 32, 34, 37, 40, 43, 44, 53, 54, 57], "m_": 53, "m_m": 53, "machin": [49, 57], "made": 35, "magnet": [51, 57], "mai": [43, 53], "mainli": [53, 55, 56], "make": [27, 28, 49, 53, 56, 57], "mana": [41, 44], "mana_chan": 44, "manag": [49, 57], "manipul": [45, 47, 49, 52], "mann": [21, 24], "map": [43, 44, 54], "mark": [54, 57], "marker": 57, "maslov": 22, "mat": [42, 43], "mat_repr": 43, "match": [8, 44, 50, 53], "materi": 57, "math": [22, 43, 49], "mathbb": 24, "mathcal": [9, 48, 54, 56], "mathemat": [5, 48, 51, 57], "mathit": 9, "mathrm": 54, "matplotlib": [9, 35, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "matric": [12, 21, 24, 43, 44, 48, 51, 54, 55, 57], "matrix": [1, 4, 5, 9, 12, 19, 22, 24, 25, 31, 33, 35, 36, 37, 38, 42, 43, 44, 51, 52, 53, 54, 55, 56, 57], "matrix_1st": 43, "matter": 57, "max_epoch": 8, "max_mix": 44, "maxim": 44, "maximum": [4, 8], "mcardl": 57, "mean": [4, 17, 28, 40, 53, 57], "measur": [1, 4, 9, 22, 26, 40, 42, 44, 45, 46, 47, 49, 51, 52, 56, 57], "measure_basi": 9, "measure_dim": 40, "measure_idx": 40, "measure_op": [28, 40], "mechan": [51, 53, 57], "mention": 54, "merg": 12, "mess": 49, "meter": 9, "method": [4, 49, 52, 54, 56, 57], "metric": 57, "mh": 48, "mi": 44, "michael": [51, 52, 53, 54], "microsecond": [23, 32], "might": [51, 53], "min": 57, "min_": 57, "minim": 57, "minimum": 57, "mix": [25, 44, 51, 54, 56], "mixed_st": 54, "mixed_state_evo": 54, "mixtur": 32, "mode": [8, 31], "model": [8, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "modern": [51, 54, 57], "modifi": [49, 57], "modul": [4, 11, 12, 46, 48, 52, 53, 55, 57], "moll": 57, "moment": 57, "more": [43, 49, 51, 52, 53, 54, 57], "moreov": [51, 52], "most": [22, 53, 54, 55], "move": [49, 57], "ms_gate": [19, 21], "mse": 57, "multi": [37, 52, 54], "multi_qubit_g": [29, 34], "multipl": [28, 49, 53, 56], "must": [32, 37, 38, 44, 52, 54], "mutual": 44, "mutual_inform": [41, 44], "m\u00f8lmer": [9, 37], "n": [9, 20, 21, 22, 23, 24, 25, 28, 32, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "n_qubit": [12, 51], "n_term": [12, 51], "name": [4, 8, 9, 11, 17, 40, 51, 53, 54], "nanosecond": [23, 32], "napolitano": [51, 57], "natur": [43, 57], "nbsphinx": 49, "ndarrai": [4, 12, 17, 21, 23, 42, 43, 44, 55, 56, 57], "need": [4, 9, 17, 31, 35, 43, 44, 49, 50, 53], "neg": [41, 42, 44, 57], "net": [8, 49], "network": [45, 46, 47, 48, 52], "neumann": [44, 55], "neural": [45, 46, 47, 48, 52], "neuron": 57, "new": [4, 8, 56], "new_cir": 49, "new_physical_idx": 4, "new_stat": 56, "new_system_dim": 4, "new_v": 8, "next": [49, 57], "niel": 4, "nielsen": [32, 51, 52, 53, 54], "nikolaj": 57, "nit": 56, "nkron": [17, 41, 43, 55, 56], "nn": [46, 57], "node": 57, "nois": 54, "noisi": [31, 56], "non": 42, "none": [4, 5, 8, 9, 11, 12, 17, 21, 22, 24, 25, 28, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 53, 57], "norm": [42, 43, 44, 54, 55], "normal": [4, 9, 22, 49, 52, 54, 56], "notat": [48, 49, 51, 52, 53, 54, 56, 57], "note": [49, 52, 53, 54, 56], "notic": [48, 53, 54], "notimplementederror": [22, 25, 27, 28, 31, 44], "now": 9, "np": [52, 57], "nthe": [53, 54, 56], "nulliti": 44, "num_acted_param": [9, 35, 36, 48, 49], "num_acted_qubit": 35, "num_acted_system": 4, "num_block_qubit": 43, "num_ctrl_system": 22, "num_itr": 57, "num_new_system": 4, "num_qubit": [4, 9, 21, 22, 23, 24, 25, 28, 32, 48, 50, 51, 52, 53, 54, 55, 56, 57], "num_qutrit": [4, 50], "num_slot": 8, "num_step": 9, "num_system": [4, 9, 22, 24, 25, 27, 28, 49, 50, 52, 56], "numbar": 50, "number": [4, 5, 8, 9, 12, 17, 21, 22, 23, 24, 25, 28, 31, 32, 35, 36, 43, 48, 50, 51, 52, 53, 54, 56, 57], "numer": 57, "numpi": [11, 17, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "o": [9, 22, 40, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "object": [52, 54, 56], "observ": [12, 22, 24, 28, 44, 48, 53, 56, 57], "obtain": [4, 49, 50, 51, 53, 56, 57], "occupi": [35, 55], "occur": 53, "octrl": 9, "of_gat": [19, 21], "offer": [50, 57], "often": [51, 53, 54, 57], "omega": 52, "omega_n": 21, "omit": [4, 52], "onc": 57, "one": [4, 9, 25, 40, 43, 48, 49, 50, 52, 53, 54, 56, 57], "one_st": [19, 25, 27], "ones": [51, 57], "ones_lik": [48, 49, 52], "onewaylocc": [29, 40], "onli": [4, 9, 22, 24, 31, 40, 44, 52, 53, 54, 56], "onto": 48, "op": [4, 28, 42, 48, 50, 53], "openqasm": [4, 9], "oper": [1, 4, 8, 9, 12, 21, 23, 24, 42, 44, 48, 51, 54, 55, 56, 57], "operator_histori": 4, "operator_idx": 4, "operatorinfotyp": [4, 17, 31, 35, 36, 40], "operatorlist": [2, 4], "operatornam": [9, 49, 51, 57], "oplu": 21, "opt": 57, "optim": [8, 27, 28, 57], "option": [8, 42, 49, 53], "oracl": [9, 21, 34, 36, 48, 49, 50, 52], "order": [4, 9, 43, 44, 52], "org": [5, 9, 32], "organ": 57, "orthogon": [22, 53], "orthogonal_projector": 22, "other": [4, 17, 25, 43, 47, 49, 54, 56, 57], "otherwis": [9, 42, 50], "otim": [9, 21, 22, 37, 43, 49, 52, 54, 56], "our": 49, "out": [8, 31, 43, 48], "out_dim": 44, "outcom": [9, 28, 51, 53], "outer": 44, "output": [4, 8, 9, 23, 27, 31, 39, 43, 44, 48, 49, 50, 52, 53, 54, 55, 56, 57], "output_plot": 9, "output_st": [48, 52, 54], "output_state_temp": 54, "over": 28, "overal": [49, 57], "overlap": [56, 57], "overload": 35, "overshoot": 57, "p": [9, 19, 21, 23, 25, 32, 34, 37, 38, 42, 43, 44, 51, 53, 54, 55, 56], "p_": 25, "p_0": 51, "p_1": 51, "p_2": 51, "p_3": 51, "p_gate": [19, 21], "p_i": 51, "p_j": 51, "p_m": 53, "p_matrix": 21, "p_nor": 43, "p_norm": [41, 43, 55], "packag": [9, 53, 54], "pair": [9, 57], "paper": 5, "param": [4, 5, 9, 35, 36, 37, 38, 48, 49, 52, 57], "param_locc": 9, "param_oracl": [9, 49], "param_quasi": 9, "param_shar": [9, 35, 36, 37, 38], "paramet": [4, 5, 8, 9, 11, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 37, 38, 39, 40, 42, 43, 44, 48, 49, 52, 54, 57], "parameter": [8, 9, 35, 36, 40, 45, 47, 48, 49, 52, 54], "parametr": 52, "paramg": [34, 35], "paramoracl": [8, 34, 36], "part": [52, 53, 54], "partial": [43, 54, 55, 57], "partial_trac": [41, 43], "partial_trace_discontigu": [41, 43], "partial_transpos": [41, 43], "particular": [49, 53, 57], "pass": [4, 40, 48, 49, 57], "path": [9, 57], "pauli": [9, 12, 21, 23, 24, 32, 43, 48, 50, 51, 52, 53, 54, 56, 57], "pauli_basi": [19, 24], "pauli_channel": 9, "pauli_dec": 43, "pauli_decomposit": [41, 43], "pauli_group": [19, 24], "pauli_krau": [19, 23], "pauli_str": [12, 24, 48, 51], "pauli_str_basi": [19, 24], "pauli_str_convertor": [41, 44], "pauli_str_povm": [19, 24, 53], "pauli_term": 44, "pauli_word": [12, 51], "pauli_words_matrix": 12, "pauli_words_r": 12, "paulichannel": [30, 32], "pd": 9, "pdf": 5, "per": [4, 9], "perform": [9, 40, 47, 49, 50, 52, 57], "perm": [9, 21, 36], "perm_list": 43, "permut": [9, 21, 34, 36, 43, 56], "permutation_matrix": [19, 21], "permute_system": [41, 43], "peruzzo": 57, "pf": 9, "ph": 22, "phase": [9, 19, 21, 23, 24, 32, 44, 51, 52], "phase_damp": 9, "phase_damping_krau": [19, 23], "phase_flip": 9, "phase_flip_choi_repr": 54, "phase_flip_krau": [19, 23, 54], "phase_flip_kraus_repr": 54, "phase_flip_stin_repr": 54, "phase_g": [19, 21], "phase_oper": 21, "phase_space_point": [19, 24], "phasedamp": [30, 32], "phaseflip": [30, 32], "phenomena": 57, "phi": [9, 21, 25, 37, 38, 54, 56], "phi_": 25, "phi_j": 56, "photon": 57, "physic": [4, 9, 42, 51, 52, 57], "physical_idx": [4, 9], "pi": [4, 9, 21, 24, 37, 38, 49, 52, 54], "pivot": 57, "place": [4, 9, 35, 36], "plai": [54, 57], "platform": 0, "pleas": [9, 32, 50, 52], "plot": [4, 8, 9, 35, 36, 49, 50, 52, 54, 57], "plt": 57, "pmatrix": 51, "pnorm": 55, "point": 24, "poisson": 49, "polynomi": 9, "pop": 52, "posit": [24, 35, 42, 52, 54, 55, 56], "possibl": 51, "post": [9, 28, 49, 53], "post_select": 9, "post_stat": 28, "postul": 53, "potenti": [51, 53], "povm": [24, 42, 53], "power": [9, 43], "pp": 42, "ppt": [42, 55], "pqc": 47, "pqcombnet": [7, 8], "practic": [49, 53, 57], "precis": 54, "predefin": [52, 57], "predict": 57, "prepar": [9, 47, 57], "preprint": 54, "present": 54, "preserv": [40, 43, 48, 54], "preserve_qubit": 43, "press": [32, 51, 52, 53, 54, 57], "prevent": 57, "previou": [49, 57], "prime": 54, "principl": [54, 57], "print": [4, 9, 20, 21, 22, 23, 24, 25, 27, 28, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "print_cod": [4, 9], "print_exc": 53, "print_info": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "prob": [9, 17, 23, 25, 28, 32, 40, 50, 52, 53, 54, 56], "prob_list": 23, "prob_sampl": [41, 43, 53], "probabilist": [40, 53], "probability_param": [9, 40], "probabl": [9, 17, 23, 25, 28, 32, 40, 43, 50, 52, 53, 54, 56, 57], "problem": [21, 49, 57], "proce": 57, "process": [8, 23, 32, 49, 56, 57], "processor": 57, "produc": 49, "product": [17, 43, 44, 51, 52, 55, 56], "product_st": 56, "progress": 57, "proj": 49, "project": [28, 42, 48, 53], "projector": [8, 22, 42, 53, 55], "prompt": 8, "propag": [49, 57], "proper": 43, "properti": [4, 9, 12, 31, 35, 36, 40, 47, 48, 51, 55, 56, 57], "proport": [43, 53], "protocol": [9, 40], "provid": [8, 31, 35, 42, 49, 51, 52, 53, 54, 55, 56, 57], "psd": 42, "psi": [25, 43, 49, 51, 53, 54, 56, 57], "psi_j": 56, "psi_x": 56, "pt": 43, "ptdi": 43, "public": 9, "pure": [25, 51, 53, 54, 56, 57], "pure_st": 54, "pure_state_evo": 54, "puriti": [41, 44, 55], "purity_st": 55, "push": 9, "pvm": [28, 40, 42, 48, 53], "pvm_tensor": 28, "py": 53, "pyplot": 57, "python": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "pytorch": [47, 52], "q": [23, 32, 43], "qasm": 9, "qasm2": 9, "qc": 9, "qft": [21, 24, 52], "qft_": 52, "qft_basi": [19, 24], "qft_gate": 21, "qft_invers": 52, "qft_mat": 52, "qft_matrix": [19, 21, 52], "qft_state": 24, "qinfo": [1, 52, 53, 54, 55, 56], "qkit": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "qnn": 57, "quad": [21, 51, 54], "quadratic_loss": 43, "quair": 0, "quair_test": 53, "quairkit": [45, 46, 47, 48, 50, 54, 55, 57], "qualcomm": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "quantifi": [55, 57], "quantikz": 9, "quantum": [4, 5, 8, 9, 17, 21, 22, 23, 24, 25, 28, 31, 32, 33, 35, 36, 37, 40, 42, 43, 44, 45, 46, 47, 49, 51], "quantumcomput": 4, "quasi": [9, 40], "quasioper": [29, 40], "qubit": [4, 5, 9, 12, 17, 21, 22, 23, 24, 25, 28, 32, 33, 35, 36, 37, 38, 43, 44, 46, 48, 49, 51, 52, 53, 55, 56, 57], "qubit_num": 12, "qubits_idx": [5, 9, 32, 37, 38, 48, 52, 53, 57], "qudit": [9, 21, 24, 36, 45, 46], "queri": 8, "qutrit": [4, 17, 56], "r": [9, 25, 31, 32, 49, 52, 57], "r_": [9, 21, 48, 52, 54], "r_entropi": 55, "r_state": [19, 25], "r_state_inst": 25, "r_x": [9, 21, 48], "r_xx": 21, "r_y": [9, 21, 48], "r_yi": 21, "r_z": [9, 21, 48], "r_zz": 21, "rais": [8, 11, 22, 25, 27, 28, 31, 35, 37, 38, 42, 43, 44, 53], "rand": [42, 48, 49, 52, 54], "random": [1, 4, 8, 11, 19, 35, 36, 44, 50, 51, 52, 54, 55, 56], "random_channel": [19, 22, 48, 52, 54, 56], "random_clifford": [19, 22], "random_density_matrix": [19, 22, 56], "random_hamiltonian_gener": [19, 22, 28, 48, 49, 51], "random_hermitian": [19, 22], "random_lcu": [19, 22], "random_orthogonal_project": [19, 22], "random_pauli_str_gener": [19, 22], "random_projector": [19, 22], "random_st": [19, 22, 27, 28, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56], "random_stin_repr": 52, "random_unitari": [19, 22, 42, 44, 48, 49, 50, 52, 54, 55, 56], "random_unitary_hermitian": [19, 22], "random_unitary_with_hermitian_block": [19, 22], "randomize_param": [4, 49], "randomli": [22, 49, 52, 56], "rang": [8, 31, 32, 35, 48, 51, 54, 57], "rangl": [9, 21, 23, 25, 32, 37, 43, 49, 51, 53, 54, 56, 57], "rangle_": [25, 54], "rank": [22, 28, 31, 53, 54, 55, 56], "rate": [8, 57], "rayleigh": 57, "re": 49, "reach": 57, "read": 56, "readabl": [50, 51, 57], "real": [5, 9, 22, 51, 52, 56, 57], "real_block_lay": [9, 52], "real_entangled_lay": [9, 49, 52], "realblocklay": [2, 5], "realentangledlay": [2, 5], "receiv": 57, "recent": 53, "recogn": [44, 53], "recommend": [48, 49], "record": 43, "reduc": [49, 57], "reducelronplateau": 57, "refer": [4, 22, 32, 47, 48, 49, 50, 56], "referenc": 22, "register_idx": 4, "rel": [44, 55], "rel_ent": 44, "relat": [52, 55, 56], "relative_entropi": [41, 44, 55], "relax": [9, 23, 32], "relev": 55, "relu": 49, "remain": [36, 43, 54, 55], "remov": 52, "render": 9, "renyi": 44, "replac": [4, 9, 23, 32, 40, 50, 52, 54], "replace_st": [9, 40], "replacement_choi": [19, 23, 50, 52], "replacement_choi_repr": [50, 52], "replacementchannel": [30, 32], "report": [4, 57], "repr_typ": [54, 56], "repres": [4, 5, 9, 21, 22, 24, 25, 31, 33, 35, 36, 43, 44, 48, 50, 51, 52, 54, 56, 57], "represent": [1, 4, 5, 9, 17, 19, 20, 22, 31, 33, 43, 44, 48, 49, 50, 51, 52, 57], "reproduc": [8, 57], "requir": [5, 9, 35, 36, 44, 49, 54], "requires_grad": [43, 49], "research": 49, "reset": [9, 23, 32, 39, 40, 52, 56], "reset_channel": 9, "reset_circuit_plot_param": [34, 39], "reset_krau": [19, 23, 52], "reset_kraus_repr": 52, "resetchannel": [30, 32], "resetst": [29, 40], "reshap": 42, "respect": [4, 12, 24, 28, 43, 49, 50, 51, 53, 56, 57], "restrict": 56, "result": [9, 27, 28, 40, 43, 44, 49, 50, 51, 53, 54, 55, 56, 57], "retriev": 28, "return": [4, 9, 11, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 31, 35, 39, 40, 42, 43, 44, 48, 49, 53, 56, 57], "return_glob": 44, "reveal": 57, "revers": [4, 54], "review": [46, 57], "revis": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "rho": [9, 32, 42, 43, 44, 48, 50, 51, 52, 53, 54, 56, 57], "rho1": 22, "rho2": 22, "rho_": [48, 54], "right": [21, 25, 49, 51, 52, 54, 57], "rightarrow": [54, 56], "ritz": 57, "role": [54, 57], "root": 43, "rotat": [5, 9, 21, 37, 38, 44, 48, 52, 54, 55, 57], "rotation_gener": 9, "round": 54, "row": 53, "rule": [52, 53, 57], "run": [31, 52, 54], "runtim": 49, "runtimeerror": 44, "runtimewarn": [43, 44], "rx": [9, 19, 21, 34, 37, 38, 48, 52, 54], "rx_gate": [19, 21], "rxx": [9, 19, 21, 34, 37], "rxx_gate": [19, 21], "ry": [5, 9, 19, 21, 34, 37, 38, 48, 49, 52, 54], "ry_gat": [19, 21], "ryi": [9, 19, 21, 34, 37], "ryy_gat": [19, 21], "rz": [5, 9, 19, 21, 34, 37, 38, 48, 52, 54], "rz_gate": [19, 21, 52], "rzz": [9, 19, 21, 34, 37], "rzz_gate": [19, 21], "s_gate": [19, 21], "s_state": [19, 25], "s_state_inst": 25, "sakurai": [51, 57], "sam": 57, "same": [4, 9, 21, 31, 35, 36, 37, 38, 42, 44, 49, 53, 54, 55], "sampl": [4, 22, 43, 47, 49], "satisfi": [21, 32, 49, 51, 53, 54, 55], "save": [8, 9, 11], "save_path": 9, "scalar": 39, "scale": [9, 39], "scale_circuit_plot_param": [34, 39], "schatten": [43, 55], "schedul": 57, "schmidt": 43, "schmidt_decompos": [41, 43], "schroeter": [51, 57], "scienc": 57, "scipi": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "sdg": [9, 19, 21, 34, 38], "sdg_gate": [19, 21], "search": 21, "second": [17, 42, 43, 48, 49, 50, 53, 55, 56], "section": [50, 57], "see": [4, 32], "seed": [8, 11, 51, 57], "seek": 57, "select": [9, 28, 43, 52], "selectbackward0": 52, "self": [5, 9, 49], "semant": 52, "semi": [42, 55, 56], "sent": 56, "sep": 9, "sequenc": [4, 22, 24, 25, 28, 43, 48, 50, 52, 53, 54, 56, 57], "sequenti": 4, "sergei": 22, "seri": [43, 48, 52], "serv": [51, 57], "set": [1, 4, 8, 9, 11, 19, 35, 39, 42, 44, 48, 49, 50, 51, 52, 53, 54, 56, 57], "set_circuit_plot_param": [34, 39], "set_devic": [10, 11], "set_dtyp": [10, 11, 48, 50, 53, 54, 55], "set_entangl": 9, "set_op": 42, "set_se": [10, 11, 57], "setup": [17, 28, 45, 46, 52, 57], "sever": [53, 55, 56], "shape": [20, 21, 24, 31, 42, 43, 44, 48, 49, 53, 56], "share": [9, 35, 36, 37, 38, 49], "shift": [19, 21, 57], "shift_gat": [19, 21], "shift_oper": 21, "shot": [28, 43, 53], "should": [11, 22, 25, 31, 32, 42, 44, 53], "show": [4, 9, 52, 57], "show_plot": [4, 9], "shown": [43, 52, 53, 54], "side": [49, 52], "sigl": 54, "sigma": [23, 32, 44, 52, 54, 56], "sigma_0": 51, "sigma_1": 51, "sigma_2": 51, "sigma_3": 51, "sigma_k": [23, 32], "sigma_x": 56, "sigmoid": 49, "sign": 54, "signal": 57, "signific": 54, "sigx_p": 12, "sigy_p": 12, "sigz_p": 12, "similar": [50, 52, 57], "similarli": [48, 50, 52], "simon": 21, "simpl": [50, 53], "simpli": 12, "simplic": 57, "simplifi": [12, 48, 57], "simul": [9, 32, 53, 57], "sin": [9, 21, 37, 38, 54], "sin_theta": 9, "sinc": [53, 54], "singl": [5, 9, 27, 35, 36, 37, 38, 44, 48, 49, 51, 52, 53, 55, 56], "single_qubit_g": [29, 34], "site": [12, 51, 53, 57], "situat": 55, "size": [12, 22, 24, 27, 28, 43, 48, 49, 50, 51, 53, 54, 56, 57], "slot": 8, "slot_dim": 8, "small": 57, "smaller": 54, "smooth": 57, "so": [52, 53, 55], "solut": 57, "solv": 49, "solver": 57, "some": [35, 50, 51, 54, 56], "sort": 4, "sourc": [4, 5, 8, 9, 27, 28, 31, 32, 33, 35, 36, 37, 38, 40, 44, 54], "space": [21, 24, 43, 44, 51, 52, 53, 54, 56, 57], "span": 24, "spars": 12, "speak": 54, "special": [1, 29, 49, 57], "specif": [28, 49, 52, 54, 55, 57], "specifi": [8, 9, 17, 21, 28, 31, 35, 42, 43, 44, 50, 52, 53, 54, 57], "spectral": 53, "spectrum": 51, "spin": 12, "spinop": [10, 12], "split_lin": [50, 51], "spontan": 57, "sqrt": [9, 21, 23, 25, 32, 37, 38, 43, 44, 52, 53, 54, 56, 57], "sqrt_2": 54, "sqrtm": [41, 43], "squar": [43, 44, 57], "squeezebackward0": 52, "st": [21, 42], "stab_nul": [41, 44], "stab_renyi": [41, 44], "stabil": 44, "stabilizer_renyi_entropi": 44, "stabl": 57, "stack": [48, 51, 54], "stackexchang": 4, "stage": 52, "standard": [4, 9, 24], "start": [4, 9, 35, 48, 49, 52], "start_tim": [53, 57], "state": [1, 4, 8, 9, 10, 19, 22, 23, 24, 27, 28, 32, 40, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 55, 57], "state1": [49, 55], "state1_num": 55, "state1_sta": 55, "state2": [49, 55], "state2_num": 55, "state2_sta": 55, "state_1": 56, "state_1st": 17, "state_2": 56, "state_basi": 24, "state_batch": 28, "state_cho": 56, "state_choi": 54, "state_evo": [54, 56], "state_evo_temp": 54, "state_fidel": [41, 44, 55], "state_kra": 56, "state_krau": 54, "state_label": [9, 40], "state_list": 54, "state_temp": 54, "state_tran": 54, "state_trans_temp": 54, "state_vector": [13, 14, 22, 24, 25, 28, 48, 50, 52, 53, 54, 56], "statefidel": [26, 27], "stateoper": [4, 23, 25, 28, 42, 43, 44], "statesimul": [4, 9, 17, 22, 23, 24, 25, 28, 40, 42, 43, 44], "statist": 57, "std_basi": [19, 24, 28], "steadi": 57, "step": [9, 57], "stin_repr": 54, "stine": 44, "stine_op": 52, "stine_repr": 52, "stinespr": [9, 22, 31, 33, 44, 52], "stinespring_channel": [9, 52], "stinespring_mat": 33, "stinespring_repr": [9, 31], "stinespringrepr": [30, 33, 52], "stop": 8, "stop_gradi": [4, 57], "storag": 8, "store": [48, 57], "str": [4, 8, 9, 11, 12, 17, 22, 24, 28, 31, 32, 36, 37, 38, 40, 43, 44], "strength": [51, 57], "string": [4, 9, 12, 21, 24, 28, 51, 53], "strongli": [5, 9], "structur": [22, 49, 57], "studi": 51, "style": [4, 9], "sub": [4, 43], "subclass": 52, "subnorm": 44, "subsequ": 49, "subsystem": [9, 21, 28, 36, 43, 53, 54, 56], "sum": [32, 43, 51, 53, 55], "sum_": [9, 20, 25, 51, 54, 56, 57], "sum_i": 43, "sum_m": 53, "sumeet": 54, "summar": 53, "super": 49, "superconduct": 32, "superposit": 57, "superposition_lay": 49, "support": [4, 9, 17, 27, 28, 35, 36, 40, 42, 44, 48, 50, 51, 52, 53, 54, 55, 56], "support_batch": [9, 35, 36], "suppos": 49, "surround": 5, "suzuki": 9, "swap": [8, 9, 19, 21, 34, 36, 37, 43, 52, 54], "swap_gat": [19, 21], "symbol": [48, 49, 51, 52, 53, 54, 56, 57], "sys_a": 43, "sys_idx": [54, 56], "system": [4, 8, 9, 12, 17, 21, 22, 24, 25, 28, 31, 33, 35, 36, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "system_dim": [4, 9, 17, 21, 22, 24, 25, 43, 50], "system_histori": 52, "system_idx": [4, 9, 28, 31, 32, 33, 35, 36, 40, 49, 50, 52], "system_seq": 56, "s\u00f8rensen": [9, 37], "t": [9, 19, 21, 24, 34, 38, 43, 51, 54], "t1": 9, "t2": 9, "t_1": [23, 32], "t_2": [23, 32], "t_a": [43, 44], "t_gate": [19, 21], "tabl": [8, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "tag": [51, 52, 53, 54, 57], "take": [4, 43, 44, 49, 54, 57], "taken": [43, 44, 56], "targ": 9, "target": [22, 27, 28, 44, 48, 52, 54, 56, 57], "target_batch": 27, "target_funct": 8, "target_st": 27, "target_state_batch": 27, "task": [8, 49, 57], "task_nam": 8, "taylor": 43, "tdg": [9, 19, 21, 34, 38], "tdg_gate": [19, 21], "techniqu": 57, "technologi": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "temp": 53, "templat": [5, 57], "tensor": [4, 5, 8, 9, 11, 12, 17, 20, 21, 22, 23, 24, 27, 28, 31, 32, 33, 35, 36, 37, 38, 40, 42, 43, 44, 48, 49, 51, 52, 53, 54, 55, 56, 57], "tensor_st": [13, 17], "term": [12, 22, 28, 48, 51, 54, 57], "test": [8, 42], "test_unitary_info": 8, "tex": [9, 35], "texliv": 9, "texnam": 52, "text": [9, 23, 31, 32, 44, 48, 52, 54], "textrm": 9, "th": [25, 51, 56, 57], "tha": 54, "than": [32, 43, 53, 54], "thei": [24, 52, 54, 56], "them": [49, 52, 56, 57], "theorem": 53, "theoret": [55, 56, 57], "theori": [22, 54, 55, 57], "therefor": [53, 54], "thermal": [9, 23, 32], "thermal_relax": 9, "thermal_relaxation_krau": [19, 23], "thermalrelax": [30, 32], "thermodynam": 57, "theta": [4, 9, 21, 37, 38, 48, 49, 52, 54, 57], "theta2": [9, 37, 38], "theta_j": 57, "thi": [4, 5, 9, 17, 22, 23, 24, 25, 27, 28, 31, 32, 33, 35, 36, 40, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "thing": 52, "third": [50, 53, 56], "those": 50, "three": [5, 9, 21, 23, 32, 37, 48, 49, 52, 56], "threshold": 57, "through": [40, 48, 49, 52, 54, 55, 57], "thu": [52, 54], "tikz": 9, "tilli": 57, "time": [9, 22, 23, 24, 32, 43, 44, 52, 53, 54, 55, 57], "time_list": 57, "tini": 9, "to_latex": 9, "to_stat": [13, 17, 54, 55, 56], "toffoli": [9, 19, 21, 34, 37], "toffoli_g": [19, 21], "tol": 44, "toler": [17, 42, 44], "too": 8, "tool": [43, 44, 45, 47, 57], "torch": [8, 9, 11, 17, 20, 21, 23, 28, 37, 38, 42, 43, 44, 46, 48, 50, 51, 52, 53, 54, 55, 56, 57], "total": [9, 22, 32, 35, 50, 51, 52, 57], "toward": 57, "tr": [32, 43, 44, 48, 51, 54, 57], "tr_dist": 44, "tr_norm": 43, "trace": [27, 41, 42, 43, 44, 48, 50, 51, 54, 55, 56, 57], "trace_dist": [27, 41, 44, 55], "trace_idx": 43, "trace_norm": [41, 43], "traceback": 53, "tracedist": [26, 27, 55], "track": 57, "train": [8, 45, 47, 49], "train_mod": 8, "train_model": 57, "train_unitary_info": 8, "trainabl": [4, 49, 52], "training_data": 49, "transact": 22, "transfer_stat": 4, "transform": [24, 43, 52, 53, 54, 55, 56, 57], "transit": 51, "transmit": 54, "transpil": [4, 9], "transpos": [21, 43, 53, 54, 55, 56], "transpose_idx": 43, "trap": 37, "treat": 57, "trotter": 9, "true": [4, 8, 9, 12, 22, 28, 31, 35, 36, 42, 43, 44, 48, 49, 50, 53, 55, 56, 57], "try": 53, "tug": 9, "tunabl": 57, "tune": 57, "tupl": [8, 12, 28, 43, 44], "tutori": [0, 22, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "two": [4, 5, 9, 12, 17, 21, 23, 28, 32, 36, 37, 42, 43, 44, 49, 51, 52, 53, 55, 56, 57], "type": [4, 9, 11, 12, 17, 20, 21, 22, 23, 24, 25, 27, 28, 31, 35, 39, 40, 42, 43, 44, 52, 54, 55, 56, 57], "type_repr": 31, "typeerror": [8, 31, 42, 44], "u": [8, 9, 20, 21, 43, 44, 52, 54, 57], "u3": [5, 9, 19, 21, 34, 38, 49, 52], "u3_gat": [19, 21], "u3_matrix": 21, "u_1": 57, "u_3": [9, 21], "u_l": 57, "u_n": 57, "u_perm": 21, "u_qudit_matrix": 21, "uf": [19, 21], "uf_gat": [19, 21], "unchang": 54, "under": [53, 54, 56], "undergo": 54, "underli": 57, "understand": 57, "undo": 54, "unexpect": 31, "uni": 9, "uniform": [4, 49, 57], "uniformli": 49, "uniqu": 53, "unit": [56, 57], "unitari": [4, 5, 8, 9, 21, 22, 35, 36, 40, 42, 43, 44, 48, 52, 54, 55, 56], "unitary_hermitian": 22, "unitary_matrix": [9, 21, 52], "unitary_matrix_1": 22, "unitary_matrix_2": 22, "unitary_matrix_3": 22, "unitary_stabilizer_nul": 44, "unitary_temp": 54, "univers": [5, 9, 21, 32, 36, 48, 49, 50, 51, 52, 53, 54, 57], "universal2": [2, 5, 19, 21], "universal2_g": [19, 21], "universal3": [2, 5, 19, 21], "universal3_g": [19, 21], "universal_qudit": [9, 19, 21, 50], "universal_three_qubit": [9, 52], "universal_two_qubit": [9, 49, 52], "universalqudit": [34, 36], "universalthreequbit": 52, "universaltwoqubit": 52, "unknown": 9, "unless": 50, "unnorm": 24, "unsqueez": [9, 48], "unsqueezebackward0": 49, "unstructur": 21, "unsupport": [31, 44], "up": 49, "updat": [4, 8, 32, 39, 49, 52, 57], "update_param": [4, 49, 52], "update_v_circuit": 8, "upper": 22, "uppercas": 44, "us": [4, 8, 9, 11, 12, 17, 21, 27, 28, 40, 42, 43, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "usag": 43, "use_spars": 12, "user": [8, 12, 28, 35, 49, 50, 51, 52, 53, 55, 56], "usual": 52, "util": [9, 50, 54], "uu": 54, "uv": [20, 44], "v": [8, 20, 43, 44, 51, 54, 57], "valid": [17, 42, 44, 47, 57], "valu": [27, 28, 32, 42, 47, 48, 49, 52, 56, 57], "valuabl": 57, "valueerror": [8, 11, 31, 35, 37, 38, 44, 53], "var": 43, "varepsilon": 54, "variabl": 43, "variant": [48, 49, 51, 52, 53, 54, 56, 57], "variat": [47, 52], "variation": 57, "varieti": 50, "variou": [55, 57], "vdot": [9, 21, 52], "vec": [9, 42, 56], "vector": [9, 22, 24, 42, 43, 54, 56], "verifi": [42, 44, 50, 52, 55], "version": [32, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "vert": [49, 51, 53, 54, 56, 57], "vertex": 51, "vertic": [9, 20, 57], "via": [9, 46, 48, 51, 53, 56], "view": 57, "visit": 49, "visual": [1, 9, 10, 29, 34, 57], "vol": [51, 53], "von": [44, 55], "von_neumann_entropi": [41, 44, 55], "vqe": [47, 49], "w": 25, "w_state": [19, 25], "w_state_inst": 25, "wai": [9, 40, 49, 53, 56], "want": [40, 49, 50], "we": [4, 9, 40, 48, 49, 50, 52, 53, 54, 56, 57], "weak_superposition_lay": 49, "weakli": [5, 9], "weight": 57, "well": [49, 50], "weyl": 24, "what": 49, "when": [9, 24, 35, 37, 44, 51, 52, 53, 56], "wher": 54, "where": [9, 20, 23, 24, 31, 32, 40, 44, 48, 50, 51, 52, 53, 54, 55, 56, 57], "wherea": 56, "whether": [4, 8, 9, 12, 22, 28, 31, 35, 36, 37, 38, 40, 42, 43, 55], "which": [4, 5, 8, 9, 12, 27, 28, 31, 32, 33, 35, 36, 37, 38, 40, 43, 44, 49, 51, 53, 54, 56, 57], "which_system": 52, "while": [50, 57], "whole": 52, "whose": [9, 22, 25, 43, 52], "wide": 57, "width": 35, "wild": 54, "window": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57], "wire": [9, 52], "wireoverrid": 9, "within": [42, 56, 57], "without": [43, 44, 52], "word": [12, 51], "work": [48, 54], "worth": 52, "would": [49, 56], "written": [9, 52], "wrong": [22, 25, 27, 28], "wrt": 52, "www": 9, "x": [9, 12, 19, 21, 23, 24, 28, 32, 34, 35, 37, 38, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 56, 57], "x0": [20, 22, 28, 48, 51], "x1": [20, 44, 51], "x2": [20, 22, 51], "x3": 12, "x_": [51, 57], "x_gate": [19, 21], "x_i": [9, 12, 51, 57], "x_j": 51, "x_k": [20, 51], "x_u": 20, "x_v": 20, "xlabel": 57, "xx": [9, 21], "xy": [20, 28, 51], "xy_fidel": 44, "xy_hamiltonian": [19, 20, 51], "xyz": 51, "x\u2081\u00b2": 43, "y": [9, 19, 21, 23, 24, 28, 32, 34, 37, 38, 43, 44, 48, 51, 52, 53, 54, 55, 57], "y0": [20, 22, 28, 48, 51], "y1": [20, 51], "y2": [20, 44, 51], "y_": 51, "y_gate": [19, 21], "y_i": [12, 51, 57], "y_j": 51, "y_u": 20, "y_v": 20, "yet": 52, "yield": [4, 57], "yii": 51, "ylabel": 57, "you": [9, 27, 28, 40, 49, 52, 57], "your": 9, "yudong": 57, "yy": [9, 21], "yz": 28, "z": [9, 12, 19, 21, 22, 23, 24, 28, 32, 34, 37, 38, 44, 48, 51, 52, 53, 54, 55, 56, 57], "z0": [12, 20, 22, 28, 44, 51, 56], "z1": [12, 20, 22, 44, 48, 51], "z2": [20, 22, 51], "z_": [51, 57], "z_gate": [19, 21], "z_i": [12, 51, 57], "z_j": 51, "z_u": 20, "z_v": 20, "zero": [4, 9, 25, 43, 44, 52, 54, 55, 56], "zero_grad": 57, "zero_st": [19, 25, 44, 56], "ziz": [12, 51], "zxzz": 12, "zz": [9, 21], "zzix": 12, "zzx": 12}, "titles": ["Welcome to QuAIRKit\u2019s documentation!", "quairkit", "quairkit.ansatz", "quairkit.ansatz.comb", "quairkit.ansatz.container", "quairkit.ansatz.layer", "quairkit.application", "quairkit.application.comb", "quairkit.application.comb.comb", "quairkit.circuit", "quairkit.core", "quairkit.core.base", "quairkit.core.hamiltonian", "quairkit.core.state", "quairkit.core.state.backend", "quairkit.core.state.backend.density_matrix", "quairkit.core.state.backend.state_vector", "quairkit.core.state.state", "quairkit.core.visual", "quairkit.database", "quairkit.database.hamiltonian", "quairkit.database.matrix", "quairkit.database.random", "quairkit.database.representation", "quairkit.database.set", "quairkit.database.state", "quairkit.loss", "quairkit.loss.distance", "quairkit.loss.measure", "quairkit.operator", "quairkit.operator.channel", "quairkit.operator.channel.base", "quairkit.operator.channel.common", "quairkit.operator.channel.custom", "quairkit.operator.gate", "quairkit.operator.gate.base", "quairkit.operator.gate.custom", "quairkit.operator.gate.multi_qubit_gate", "quairkit.operator.gate.single_qubit_gate", "quairkit.operator.gate.visual", "quairkit.operator.special", "quairkit.qinfo", "quairkit.qinfo.check", "quairkit.qinfo.linalg", "quairkit.qinfo.qinfo", "tutorials", "tutorials.feature", "tutorials.introduction", "Batch Computation", "Neural network setup customization", "Introduction to qudit quantum computing", "Hamiltonian in QuAIRKit", "Constructing Quantum Circuits in QuAIRKit", "Measuring quantum states in QuAIRKit", "Quantum Gates and Quantum Channels", "Quantum information tools", "Manipulation of Quantum States in QuAIRKit", "Training parameterized quantum circuits"], "titleterms": {"": 0, "The": 51, "ad": 50, "add": 52, "among": 54, "amplitud": 54, "ansatz": [2, 3, 4, 5], "appli": 54, "applic": [6, 7, 8], "backend": [14, 15, 16], "base": [11, 31, 35], "batch": [48, 53], "bit": 54, "case": 50, "channel": [30, 31, 32, 33, 50, 52, 54], "check": 42, "choi": 54, "circuit": [9, 48, 49, 50, 52, 57], "class": 51, "comb": [3, 7, 8], "common": 32, "compat": 55, "comput": [48, 50, 55], "construct": [51, 52], "contain": 4, "convers": 54, "core": [10, 11, 12, 13, 14, 15, 16, 17, 18], "custom": [33, 36, 49, 50, 52], "damp": 54, "data": 55, "databas": [19, 20, 21, 22, 23, 24, 25], "density_matrix": 15, "depolar": 54, "differ": 55, "distanc": 27, "document": 0, "eigensolv": 57, "environ": 56, "exampl": 54, "execut": 52, "expect": 51, "featur": 46, "flip": 54, "format": 55, "function": 55, "gate": [34, 35, 36, 37, 38, 39, 50, 52, 54], "gener": 50, "hamiltonian": [12, 20, 51], "inform": [55, 56], "instanc": 56, "interact": 56, "introduct": [47, 50, 51, 57], "krau": 54, "layer": 5, "linalg": 43, "loss": [26, 27, 28], "manag": 52, "manipul": 56, "matrix": 21, "measur": [28, 48, 50, 53], "modul": 49, "multi_qubit_g": 37, "network": [49, 57], "neural": [49, 57], "nn": 49, "note": [4, 5, 9, 11, 12, 17, 28, 31, 32, 35, 42, 44], "oper": [29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 50, 52, 53], "other": 52, "parameter": 57, "perform": 53, "phase": 54, "posit": 53, "pqc": 57, "prepar": 56, "properti": 52, "pytorch": 57, "qinfo": [41, 42, 43, 44], "quairkit": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 49, 51, 52, 53, 56], "quantum": [48, 50, 52, 53, 54, 55, 56, 57], "qubit": [50, 54], "qudit": 50, "qutrit": 50, "random": 22, "refer": [51, 52, 53, 54, 57], "represent": [23, 54], "review": 50, "sampl": 53, "set": 24, "setup": [49, 50], "singl": 54, "single_qubit_g": 38, "special": 40, "state": [13, 14, 15, 16, 17, 25, 53, 54, 56], "state_vector": 16, "stinespr": 54, "templat": 52, "three": 54, "tool": 55, "torch": 49, "train": 57, "tutori": [45, 46, 47], "two": 54, "valid": 55, "valu": [51, 53], "variat": 57, "via": 49, "visual": [18, 39], "vqe": 57, "warn": [9, 44], "welcom": 0}})